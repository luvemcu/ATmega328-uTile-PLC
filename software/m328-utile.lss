
AVRASM ver. 2.2.7  E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm Tue Dec 10 09:29:57 2019

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m328pdef.inc'
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): Including file 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm'
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(2535): Including file 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\file-transfer.asm'
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4424): Including file 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\eeprom_module.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m328pdef.inc'
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): Including file 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm'
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(2535): Including file 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\file-transfer.asm'
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4424): Including file 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\eeprom_module.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; m328-utile.asm
                                 ;
                                 ; Created: 12/10/2019 9:18:44 AM
                                 ; Author : lynf
                                 ;
                                 .include	"m328-nano-utile.asm"
                                 
                                 ; m328-nano-utile.asm
                                 ;
                                 ;  Created: 1/31/2016 7:30:50 AM
                                 ;  Author: lynf
                                 ;
                                 ;###########################################################################
                                 ; MIT License
                                 ;
                                 ; Copyright (c) 2019 Francis Lyn
                                 ;
                                 ; Permission is hereby granted, free of charge, to any person obtaining a copy
                                 ; of this software and associated documentation files (the "Software"), to deal
                                 ; in the Software without restriction, including without limitation the rights
                                 ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                                 ; copies of the Software, and to permit persons to whom the Software is
                                 ; furnished to do so, subject to the following conditions:
                                 ;
                                 ; The above copyright notice and this permission notice shall be included in all
                                 ; copies or substantial portions of the Software.
                                 ;
                                 ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                                 ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                                 ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                                 ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                                 ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                                 ; SOFTWARE.
                                 ;###########################################################################
                                 ;
                                 ;
                                 ;
                                 ; Controller board: Arduino Nano
                                 ; ATmega328P cpu, 16.0000 MHz external crystal
                                 ; Studio 7 IDE
                                 ;
                                 ;
                                 ; Fuse settings:
                                 ; L = 0xf7
                                 ; H = 0xdf
                                 ; E = 0xfd
                                 ;
                                 
                                 .list		; Listing on
                                 
                                 .equ F_CPU = 16000000
                                 ;
                                 ; UART definitions
                                 ;
                                 .equ	BAUD = 19200		; Baud rate
                                 .equ	BAUD_PRE = 51		; Baud rate prescaler
                                 .equ	NULL = 0x0			; Null terminator
                                 .equ	BELL = 0x07			; Bell
                                 .equ	BS = 0x08			; Backspace
                                 .equ	HT = 0x09			; Tab
                                 .equ	LF = 0x0a			; Linefeed
                                 .equ	CR = 0x0d			; Carriage return
                                 .equ	ctlW = 0x17			; Control W
                                 .equ	ctlX = 0x18			; Control X
                                 .equ	ctlZ = 0x1a			; Control Z
                                 .equ	SP = 0x20			; Space
                                 .equ	ESC = 0x1b			; Escape
                                 .equ	DEL = 0x7f			; Delete
                                 .equ	CMA	= 0x2c			; Comma
                                 ;
                                 .equ	ctlA = 0x01			; Control A, SOH
                                 .equ	ctlS = 0x13			; Control S, DC3
                                 ;
                                 ; Output sense selection input pin
                                 ;
                                 .equ	out_sense = PB1		; Ground D9 to invert outputs
                                 ;
                                 ; Timer0, Timer1 parameters
                                 ;
                                 .equ	OCR0Aload = 64		; OCR0A 8 bit register, 64 x 64 us = 4.096 ms
                                 .equ	OCR1Aload = 6250	; OCR1A 16 bit register, 6250 x 16 us = 100 ms
                                 ;
                                 ;
                                 ; Flag register flaga
                                 ;
                                 .equ	t100msf = 0			; 100 ms tick flag
                                 .equ	t600msf = 1			; 600 ms tick flag
                                 .equ	t1800msf = 2		; 1800 ms tick flag
                                 .equ	numfl = 3			; Valid byte number flag
                                 .equ	crf = 4				; Carriage return key flag
                                 .equ	escf = 5			; Escape key flag
                                 .equ	kyf	= 6				; Control key flag
                                 .equ	xclinf = 7			; Delayed line clear flag
                                 ;
                                 ; Flag register flagb
                                 ;
                                 .equ	clkaf = 0			; CLKA tick flagb
                                 .equ	clkbf = 1			; CLKB tick flagb
                                 .equ	clkcf = 2			; CLKc tick flagb
                                 .equ	paceb = 3			; Pace flag for printing ports
                                 .equ	t4msf = 4			; 4 ms timer flag
                                 ;
                                 ;
                                 .equ	timrav = 2			; timrb reload for 200 ms
                                 .equ	timrbv = 6			; timrb reload for 600 ms
                                 .equ	timrcv = 18			; timrc reload for 1800 ms
                                 .equ	PRVms = 25			; 25 x 4.096 = 102.4 ms prescaler
                                 .equ	PRVs = 10			; 10 x 0.1 s = 1.0 s prescaler
                                 .equ	PRVm = 100			; 100 x 0.6s = 60 s prescaler
                                 .equ	PRVh = 222			; 222 x 1.8s = 399.6 s prescaler
                                 ;
                                 .equ	linsz = 8			; Line buffer size
                                 .equ	opclen = 6			; Maximum opcode length + 1
                                 .equ	nlines = 32			; Command lines per screen
                                 .equ	lastpg = 224		; Basln number on last page
                                 .equ	dlhzr = 19			; 19 spaces between columns
                                 .equ	vtri = 9			; y = 0 position
                                 .equ	hzri = 8			;  x = 0 position
                                 ;
                                 ; One-shot timer loader display
                                 ;
                                 .equ	xinit = 15			; LDT initial x position
                                 .equ	yinit = 11			; LDT initial y position
                                 .equ	ntim = 16			; Number of timers
                                 .equ	dx1 = 7				; Basic buffer screen spacing
                                 .equ	dx2 = 4				; Extra spacing
                                 .equ	dy = 5				; Row spacing
                                 ;
                                 ;
                                 .equ	maxbits = 0xff		; High byte mask
                                 .equ	nbits = 16			; Convert 16 bits
                                 .equ	ndig = 3			; Digit pair bytes
                                 .equ	ndec = 5			; Digits to display/convert
                                 ;
                                 ; Command word attributes
                                 ;
                                 .equ	NORM = 0x0			; Default, interpreter and runtime command
                                 .equ	EDIT = 0x0001		; Editor mode only
                                 .equ	FALSE = 0x0			; Logical 0
                                 .equ	TRUE = !FALSE		; Logical 1
                                 ;
                                 .equ	uf0en = 0x60+0x1ff	; End of UF0 space - 2
                                 ;
                                 ; --- Addressable Bits for Input, Output and Variable storage ---
                                 ;
                                 ; Bit Stack, BSTK in register
                                 ;
                                 .equ	SKB7 = 7
                                 .equ	SKB6 = 6
                                 .equ	SKB5 = 5
                                 .equ	SKB4 = 4
                                 .equ	SKB3 = 3
                                 .equ	SKB2 = 2
                                 .equ	SKB1 = 1
                                 .equ	SKB0 = 0
                                 ;
                                 ; Input Port A bits, PA in register
                                 ;
                                 .equ	A7 = 7
                                 .equ	A6 = 6
                                 .equ	A5 = 5
                                 .equ	A4 = 4
                                 .equ	A3 = 3
                                 .equ	A2 = 2
                                 .equ	A1 = 1
                                 .equ	A0 = 0
                                 ;
                                 ; Port A leading edge bits, PAL in data space
                                 ;
                                 .equ	AL7 = 7
                                 .equ	AL6 = 6
                                 .equ	AL5 = 5
                                 .equ	AL4 = 4
                                 .equ	AL3 = 3
                                 .equ	AL2 = 2
                                 .equ	AL1 = 1
                                 .equ	AL0 = 0
                                 ;
                                 ; Port A trailing edge bits, PAT in data space
                                 ;
                                 .equ	AT7 = 7
                                 .equ	AT6 = 6
                                 .equ	AT5 = 5
                                 .equ	AT4 = 4
                                 .equ	AT3 = 3
                                 .equ	AT2 = 2
                                 .equ	AT1 = 1
                                 .equ	AT0 = 0
                                 ;
                                 ; Port A double action bits, PAD in data space
                                 ;
                                 .equ	AD7 = 7
                                 .equ	AD6 = 6
                                 .equ	AD5 = 5
                                 .equ	AD4 = 4
                                 .equ	AD3 = 3
                                 .equ	AD2 = 2
                                 .equ	AD1 = 1
                                 .equ	AD0 = 0
                                 ;
                                 ; Virtual bits, PU in register
                                 ;
                                 .equ	U7 = 7			; Temporary storage bits
                                 .equ	U6 = 6
                                 .equ	U5 = 5
                                 .equ	U4 = 4
                                 .equ	U3 = 3
                                 .equ	U2 = 2
                                 .equ	U1 = 1
                                 .equ	U0 = 0
                                 ;
                                 ; Virtual bits, PV in register
                                 ;
                                 .equ	V7 = 7			; Temporary storage bits
                                 .equ	V6 = 6
                                 .equ	V5 = 5
                                 .equ	V4 = 4
                                 .equ	V3 = 3
                                 .equ	V2 = 2
                                 .equ	V1 = 1
                                 .equ	V0 = 0
                                 ;
                                 ; Output Port Y bits, PY in register
                                 ;
                                 .equ	Y7 = 7
                                 .equ	Y6 = 6
                                 .equ	Y5 = 5
                                 .equ	Y4 = 4
                                 .equ	Y3 = 3
                                 .equ	Y2 = 2
                                 .equ	Y1 = 1
                                 .equ	Y0 = 0
                                 ;
                                 ; --- Flip/Flop control bits ---
                                 ;
                                 .equ	QF7 = 7				; RS F/F output bits
                                 .equ	QF6 = 6
                                 .equ	QF5 = 5
                                 .equ	QF4 = 4
                                 .equ	QF3 = 3
                                 .equ	QF2 = 2
                                 .equ	QF1 = 1
                                 .equ	QF0 = 0
                                 ;
                                 .equ	QFF = 7				; RS F/F output bits
                                 .equ	QFE = 6
                                 .equ	QFD = 5
                                 .equ	QFC = 4
                                 .equ	QFB = 3
                                 .equ	QFA = 2
                                 .equ	QF9 = 1
                                 .equ	QF8 = 0
                                 ;
                                 .equ	RF7 = 7				; RS F/F reset bits
                                 .equ	RF6 = 6
                                 .equ	RF5 = 5
                                 .equ	RF4 = 4
                                 .equ	RF3 = 3
                                 .equ	RF2 = 2
                                 .equ	RF1 = 1
                                 .equ	RF0 = 0
                                 ;
                                 .equ	RFF = 7				; RS F/F reset bits
                                 .equ	RFE = 6
                                 .equ	RFD = 5
                                 .equ	RFC = 4
                                 .equ	RFB = 3
                                 .equ	RFA = 2
                                 .equ	RF9 = 1
                                 .equ	RF8 = 0
                                 ;
                                 .equ	SF7 = 7				; RS F/F set bits
                                 .equ	SF6 = 6
                                 .equ	SF5 = 5
                                 .equ	SF4 = 4
                                 .equ	SF3 = 3
                                 .equ	SF2 = 2
                                 .equ	SF1 = 1
                                 .equ	SF0 = 0
                                 ;
                                 .equ	SFF = 7				; RS F/F set bits
                                 .equ	SFE = 6
                                 .equ	SFD = 5
                                 .equ	SFC = 4
                                 .equ	SFB = 3
                                 .equ	SFA = 2
                                 .equ	SF9 = 1
                                 .equ	SF8 = 0
                                 ;
                                 ; --- Software one-shot timer control flags ---
                                 ;
                                 .equ	TQ0 = 0				; Timer_0 output flag
                                 .equ	TR0 = 1				; Timer_0 reset flag
                                 .equ	TM0 = 2				; Timer_0 enable flag
                                 .equ	TK0 = 3				; Timer_0 trigger flag
                                 ;
                                 .equ	TQ1 = 4				; Timer_1 output flag
                                 .equ	TR1 = 5				; Timer_1 reset flag
                                 .equ	TM1 = 6				; Timer_1 enable flag
                                 .equ	TK1 = 7				; Timer_1 trigger flag
                                 ;
                                 .equ	TQ2 = 0				; Timer_2 output flag
                                 .equ	TR2 = 1				; Timer_2 reset flag
                                 .equ	TM2 = 2				; Timer_2 enable flag
                                 .equ	TK2 = 3				; Timer_2 trigger flag
                                 ;
                                 .equ	TQ3 = 4				; Timer_3 output flag
                                 .equ	TR3 = 5				; Timer_3 reset flag
                                 .equ	TM3 = 6				; Timer_3 enable flag
                                 .equ	TK3 = 7				; Timer_3 trigger flag
                                 ;
                                 .equ	TQ4 = 0				; Timer_4 output flag
                                 .equ	TR4 = 1				; Timer_4 reset flag
                                 .equ	TM4 = 2				; Timer_4 enable flag
                                 .equ	TK4 = 3				; Timer_4 trigger flag
                                 ;
                                 .equ	TQ5 = 4				; Timer_5 output flag
                                 .equ	TR5 = 5				; Timer_5 reset flag
                                 .equ	TM5 = 6				; Timer_5 enable flag
                                 .equ	TK5 = 7				; Timer_5 trigger flag
                                 ;
                                 .equ	TQ6 = 0				; Timer_6 output flagF
                                 .equ	TR6 = 1				; Timer_6 reset flag
                                 .equ	TM6 = 2				; Timer_6 enable flag
                                 .equ	TK6 = 3				; Timer_6 trigger flag
                                 ;
                                 .equ	TQ7 = 4				; Timer_7 output flag
                                 .equ	TR7 = 5				; Timer_7 reset flag
                                 .equ	TM7 = 6				; Timer_7 enable flag
                                 .equ	TK7 = 7				; Timer_7 trigger flag
                                 ;
                                 .equ	TQ8 = 0				; Timer_8 output flag
                                 .equ	TR8 = 1				; Timer_8 reset flag
                                 .equ	TM8 = 2				; Timer_8 enable flag
                                 .equ	TK8 = 3				; Timer_8 trigger flag
                                 ;
                                 .equ	TQ9 = 4				; Timer_9 output flag
                                 .equ	TR9 = 5				; Timer_9 reset flag
                                 .equ	TM9 = 6				; Timer_9 enable flag
                                 .equ	TK9 = 7				; Timer_9 trigger flag
                                 ;
                                 .equ	TQA = 0				; Timer_A output flag
                                 .equ	TRA = 1				; Timer_A reset flag
                                 .equ	TMA = 2				; Timer_A enable flag
                                 .equ	TKA = 3				; Timer_A trigger flag
                                 ;
                                 .equ	TQB = 4				; Timer_B output flag
                                 .equ	TRB = 5				; Timer_B reset flag
                                 .equ	TMB = 6				; Timer_B enable flag
                                 .equ	TKB = 7				; Timer_B trigger flag
                                 ;
                                 .equ	TQC = 0				; Timer_C output flag
                                 .equ	TRC = 1				; Timer_C reset flag
                                 .equ	TMC = 2				; Timer_C enable flag
                                 .equ	TKC = 3				; Timer_C trigger flag
                                 ;
                                 .equ	TQD = 4				; Timer_D output flag
                                 .equ	TRD = 5				; Timer_D reset flag
                                 .equ	TMD = 6				; Timer_D enable flag
                                 .equ	TKD = 7				; Timer_D trigger flag
                                 ;
                                 .equ	TQE = 0				; Timer_E output flagF
                                 .equ	TRE = 1				; Timer_E reset flag
                                 .equ	TME = 2				; Timer_E enable flag
                                 .equ	TKE = 3				; Timer_E trigger flag
                                 ;
                                 .equ	TQF = 4				; Timer_F output flag
                                 .equ	TRF = 5				; Timer_F reset flag
                                 .equ	TMF = 6				; Timer_F enable flag
                                 .equ	TKF = 7				; Timer_F trigger flag
                                 ;
                                 ;
                                 ; --- Register definitions ---
                                 ;
                                 ; Low registers
                                 ;
                                 .def	count = R2			; Counter for line buffer
                                 .def	asav = R3			; rga save register
                                 .def	ufpch = R4			; UF program counter high
                                 .def	ufpcl = R5			; UF program counter low
                                 .def	BSTK = R6			; Boolean bit stack
                                 .def	SRsav = R7			; SREG save
                                 ;
                                 .def	timra = R8			; Software timera
                                 .def	timrb = R9			; Software timerb
                                 .def	timrc = R10			; Software timerc
                                 ;
                                 .def	res0 = R13			; result register 0
                                 .def	res1 = R14			; result register 1
                                 .def	res2 = R15			; result register 2
                                 ;
                                 ; High registers
                                 ;
                                 .def	rmp = R16			; Multipurpose register
                                 .def	rga = R17			; GP register RGA
                                 .def	rgb = R18			; GP register RGB
                                 .def	rgc = R19			; GP register RGC
                                 .def	rgd = R20			; GP register RGD
                                 .def	rge	= R21			; GP register RGE
                                 .def	rgu	= R22			; Variable register
                                 .def	rgv	= R23			; Variable register
                                 .def	flaga = R24			; Flag A register, 8 flags
                                 .def	flagb = R25			; Flag B register, 8 flags
                                 ;
                                 ;
                                 ; --- Macro definitions ---
                                 ;
                                 .macro	ldzptr				; Load ZH:ZL pointer with address*2
                                 		ldi		ZH,high(@0*2)
                                 		ldi		ZL,low(@0*2)
                                 .endm
                                 ;
                                 .macro	ldxptr				; Load XH:XL pointer with address to access data memory
                                 		ldi		XH,high(@0)
                                 		ldi		XL,low(@0)
                                 .endm
                                 ;
                                 .macro	ldyptr					; Load YH:YL pointer with address to access data memory
                                 		ldi		YH,high(@0)
                                 		ldi		YL,low(@0)
                                 .endm
                                 ;
                                 ; Exchange contents of registers
                                 ;
                                 .macro	xchreg					; Exchange registers
                                 		push	@0
                                 		push	@1
                                 		pop		@0
                                 		pop		@1
                                 .endm
                                 ;
                                 ; --- Tile macros ---
                                 ;
                                 ; Macros with '2' suffix are for namestrings with an even number of characters
                                 ; e.g. "AD0.". These macros add a null padding byte after the namestring, so that
                                 ; the complete string including the ^W terminator ends on a word boundary.
                                 ;
                                 .LISTMAC
                                 ;
                                 ; Get direct bit (from register) and push to bit stack. C destroyed.
                                 ; Follow the form of macro exactly as shown. The offset to start of namestring is
                                 ; in 2's complement format. Adding this offset to PC at offset word's .dw location yields
                                 ; the address of the start of the namestring.
                                 ;
                                 .macro	gbit					; @0 = bit, @1 = byte, @2 = namestring		(OK)
                                 gbits:
                                 		.db		@2,ctlW			; Namestring,ctlW
                                 		.dw		gbite			; Link address to next word
                                 		.dw		NORM			; Interpreter and runtime
                                 gbitL:
                                 		.dw		(gbits-gbitL)	; Offset to start of namestring
                                 ;
                                 		bst		@1,@0			; T <-- Rd(b)
                                 		sec						; Assume C = 1
                                 		brts	gbit1			; Skip next if T = 1
                                 		clc						; Clear C
                                 gbit1:
                                 		rol		BSTK			; Push C to TOS. BSTK bit 7 lost.
                                 		ret
                                 gbite:
                                 .endm
                                 ;
                                 ; Get virtual bit (from data space byte) and push to bit stack. C destroyed.
                                 ; Follow the form of macro exactly as shown. The offset to start of namestring is
                                 ; in 2's complement format. Adding this offset to PC at offset word's .dw location yields
                                 ; the address of the start of the namestring.
                                 ;
                                 .macro	gvbit2					; @0 = bit, @1 = data space byte, @2 = namestring		(OK)
                                 gvbit2s:
                                 		.db		@2,0,ctlW		; Namestring,ctlW
                                 		.dw		gvbit2e			; Link address to next word
                                 		.dw		NORM			; Interpreter and runtime
                                 gvbit2L:
                                 		.dw		(gvbit2s-gvbit2L)	; Offset to start of namestring
                                 ;
                                 		lds		rmp,@1			; Get buffer byte
                                 		bst		rmp,@0			; T <-- Rd(b)
                                 		sec						; Assume C = 1
                                 		brts	gvbit21			; Skip next if T = 1
                                 		clc						; Clear C
                                 gvbit21:
                                 		rol		BSTK			; Push C to TOS. BSTK bit 7 lost.
                                 		ret
                                 gvbit2e:
                                 .endm
                                 ;
                                 .macro	gvbit					; @0 = bit, @1 = data space byte, @2 = namestring		(OK)
                                 gvbits:
                                 		.db		@2,ctlW		; Namestring,ctlW
                                 		.dw		gvbite			; Link address to next word
                                 		.dw		NORM			; Interpreter and runtime
                                 gvbitL:
                                 		.dw		(gvbits-gvbitL)	; Offset to start of namestring
                                 ;
                                 		lds		rmp,@1			; Get buffer byte
                                 		bst		rmp,@0			; T <-- Rd(b)
                                 		sec						; Assume C = 1
                                 		brts	gvbit1			; Skip next if T = 1
                                 		clc						; Clear C
                                 gvbit1:
                                 		rol		BSTK			; Push C to TOS. BSTK bit 7 lost.
                                 		ret
                                 gvbite:
                                 .endm
                                 ;
                                 ;
                                 ; Get an input transition bit (from data space byte) and push to the bit stack
                                 ; then clear the bit. C destroyed. Disable TCNT0 interrupt during the routine
                                 ; to prevent missing a bit transition.
                                 ; Consider the following. @0 (transition bit) is 0 when the gbitx2 routine is entered.
                                 ; A Timer0 interrupt occurs after the @0 bit is pushed to the BSTK and before the
                                 ; @0 bit is cleared. During the Timer0 interrupt routine the @0 bit is set to 1 by
                                 ; an external event.
                                 ; The new result is cleared, resulting in a miss. To prevent such misses, the
                                 ; Timer0 interrupt is disabled before the push to BSTK, and re-enabled after the @0 bit
                                 ; is cleared.
                                 ;
                                 .macro	gbitx2					; @0 = bit, @1 = data space byte, @2 = namestring		(OK)
                                 gbitx2s:
                                 		.db		@2,0,ctlW		; Namestring,ctlW
                                 		.dw		gbitx2e			; Link address to next word
                                 		.dw		NORM			; Interpreter and runtime
                                 gbitx2L:
                                 		.dw		(gbitx2s-gbitx2L)	; Offset to start of namestring
                                 ;
                                 		lds		rmp,TIMSK0		; Timer0 overflow interrupt
                                 		cbr		rmp,1<<TOIE0	; Disable Timer/Counter0 Oveflow Interrupt
                                 		sts		TIMSK0,rmp
                                 ;
                                 		lds		rmp,@1			; Get buffer byte
                                 		bst		rmp,@0			; T <-- Rd(b)
                                 		sec						; Assume C = 1
                                 		brts	gbitx21			; Skip next if T = 1
                                 		clc						; Clear C
                                 gbitx21:
                                 		rol		BSTK			; Push C to TOS. BSTK bit 7 lost
                                 		clt						; Clear T
                                 		bld		rmp,@0			; Rd(b) <--T, clear transition bit
                                 		sts		@1,rmp			; Save result
                                 ;
                                 		lds		rmp,TIMSK0		; Timer0 overflow interrupt
                                 		sbr		rmp,1<<TOIE0	; Enable Timer/Counter0 Oveflow Interrupt
                                 		sts		TIMSK0,rmp
                                 ;
                                 		ret
                                 gbitx2e:
                                 .endm
                                 ;
                                 .macro	pbit					; @0 = bit, @1 = byte, @2 = namestring
                                 pbits:
                                 		.db		@2,ctlW			; Namestring,ctlW
                                 		.dw		pbite			; Link address to next word
                                 		.dw		NORM			; Interpreter and runtime
                                 pbitL:
                                 		.dw		(pbits-pbitL)	; Offset to start of namestring
                                 ;
                                 		lsr		BSTK			; Pop TOS to C, 0 moved to BSTK bit 7
                                 		bclr	6				; Clear T bit
                                 		brcc	pbit1			; Set the Rd(b)
                                 		bset	6				; Set T bit
                                 pbit1:
                                 		bld		@1,@0			; Rd(b) <-- T
                                 		ret
                                 pbite:
                                 .endm
                                 ;
                                 ; Pop bit stack and put to virtual bit (in data space byte). C destroyed.		(OK)
                                 ;
                                 .macro	pvbit					; @0 = bit, @1 = data space byte, @2 = namestring
                                 pvbits:
                                 		.db		@2,ctlW			; Namestring,ctlW
                                 		.dw		pvbite			; Link address to next word
                                 		.dw		NORM			; Interpreter and runtime
                                 pvbitL:
                                 		.dw		(pvbits-pvbitL)	; Offset to start of namestring
                                 ;
                                 		lsr		BSTK			; Pop TOS to C, 0 moved to BSTK bit 7
                                 		bclr	6				; Clear T bit
                                 		brcc	pvbit1			; Set the Rd(b)
                                 		bset	6				; Set T bit
                                 pvbit1:
                                 		lds		rmp,@1
                                 		bld		rmp,@0			; Rd(b) <-- T
                                 		sts		@1,rmp
                                 		ret
                                 pvbite:
                                 .endm
                                 ;
                                 ; Pop bit stack and put to virtual bit (in data space byte). C destroyed.		(OK)
                                 ;
                                 .macro	pvbit2					; @0 = bit, @1 = data space byte, @2 = namestring
                                 pvbit2s:
                                 		.db		@2,0,ctlW		; Namestring,ctlW
                                 		.dw		pvbit2e			; Link address to next word
                                 		.dw		NORM			; Interpreter and runtime
                                 pvbit2L:
                                 		.dw		(pvbit2s-pvbit2L)	; Offset to start of namestring
                                 ;
                                 		lsr		BSTK			; Pop TOS to C, 0 moved to BSTK bit 7
                                 		bclr	6				; Clear T bit
                                 		brcc	pvbit21			; Set the Rd(b)
                                 		bset	6				; Set T bit
                                 pvbit21:
                                 		lds		rmp,@1
                                 		bld		rmp,@0			; Rd(b) <-- T
                                 		sts		@1,rmp
                                 		ret
                                 pvbit2e:
                                 .endm
                                 ;
                                 ;  Put bit stack to buffer
                                 ;  @0 = Destination buffer
                                 ;  @1 = namestring
                                 ;
                                 .macro		pbyt
                                 pbyts:
                                 		.db		@1,ctlW
                                 		.dw		pbytx
                                 		.dw		NORM
                                 pbytL:
                                 		.dw		(pbyts-pbytL)
                                 ;
                                 		sts		@0,BSTK
                                 		ret
                                 pbytx:
                                 .endm
                                 ;
                                 ;  Get buffer to bit stack
                                 ;  @0 = Destination byte
                                 ;  @1 = namestring
                                 ;
                                 .macro		gbyt
                                 gbyts:
                                 		.db		@1,ctlW
                                 		.dw		gbytx
                                 		.dw		NORM
                                 gbytL:
                                 		.dw		(gbyts-gbytL)
                                 ;
                                 		lds		BSTK,@0
                                 		ret
                                 gbytx:
                                 .endm
                                 ;
                                 ;
                                 ; --- One-shot timers ---
                                 ;
                                 ; Software one-shot timers T0 through TF are triggered by '.TKn' word,
                                 ; see TKTR routine for details on processing the trigger bit. When '.TKn'
                                 ; gets a 1 bit, and if the timer value is non-zero, the timer output TQn
                                 ; is set high, the TMn timer enable flag is set, and the one-shot timer
                                 ; starts timing.
                                 ;
                                 ; Timing is done by SWD timer routine which operate in the Timer1
                                 ; interrupt handler. If the TMn flag is set, the prescaler is decremented
                                 ; to zero. On zero rollover, the prescaler is reloaded and the timer count
                                 ; buffer is decremented. The timing cycle continues until the TCBn count
                                 ; reaches zero, at which time the TQn timer output flag is cleared and the
                                 ; TMn timer enable flag is cleared.
                                 ;
                                 ; The timer buffers are in internal data space. Timers can be be set to any
                                 ; decimal value between 0 and 255 counts of the timebase units.
                                 ; The timebase runs at 100 ms (t100msf), 1 timer tick every 100 ms.
                                 ; The prescalers divide down the timebase to seconds and minutes.
                                 ;
                                 ; Timer 0..B counts in seconds, timer C..F counts in minutes. The timers are
                                 ; re-triggerable, meaning the timing cycle is restarted as long as high
                                 ; is sensed on TKn bit. Timing cycle starts when the TKn returns to 0.
                                 ;
                                 .macro		swd
                                 ;
                                 ; @0 = TCBn, @1 = PRBn, @2 = TQn, @3 = TMn, @4 = PRVs/PRVm
                                 ; @5 = tmf01
                                 ;
                                 swds:
                                 		lds		rga,@5			; Get timer flags
                                 		sbrs	rga,@3			; TMn cleared?
                                 		rjmp	swdx			;	Yes, exit
                                 		lds		rmp,@1			; Get PRBn
                                 		dec		rmp				; Count ticks
                                 		sts		@1,rmp
                                 		brne	swdx			; Not 0, exit
                                 		ldi		rmp,@4			; Get PRVs/m
                                 		sts		@1,rmp			; PRBn <-- PRVs/m
                                 ;
                                 		lds		rmp,@0			; Get TCBn
                                 		dec		rmp				; TCBn = TCBn-1
                                 		sts		@0,rmp
                                 		brne	swdx			; Not 0, exit
                                 		clt						; T = 0
                                 		bld		rga,@2			; rga(TQn) <-- T
                                 		bld		rga,@3			; rga(TMn) <-- T
                                 		sts		@5,rga			; Save tmf01
                                 swdx:
                                 .endm
                                 ;
                                 ;
                                 ; Get trigger bit for one-shot timer from TOS. If bit fetched by
                                 ; '.TK'n = 1, and if the one-shot timer is loaded with a value other
                                 ; than 0, enable timer and set timer output. If .TKn returns a 0 bit,
                                 ; do nothing and return.
                                 ;
                                 .macro	tktr
                                 ;
                                 ; @0 = TCBn, @1 = PRBn, @2 = TQn, @3 = TMn, @4 = PRVs/m
                                 ; @5 = TRBn, @6 = tmf01, @7 = namestring
                                 ;
                                 tkts:
                                 		.db		@7,0,ctlW
                                 		.dw		tkte
                                 		.dw		NORM
                                 tktL:
                                 		.dw		(tkts-tktL)
                                 ;
                                 itkt:
                                 		lsr		BSTK			; Pop TOS to C
                                 		brcc	tktx
                                 		lds		rmp,@5			; Get TRBn
                                 		tst		rmp
                                 		breq	tktx			; Exit if 0
                                 		ldi		rmp,@4			; Get PRVs/m
                                 		sts		@1,rmp			; Store PRBn
                                 		lds		rmp,@5			; Get TRBn
                                 		sts		@0,rmp			; Store TCBn
                                 		lds		rmp,@6			; Get timer flags
                                 		set						; T=1
                                 		bld		rmp,@2			; Set TQn bit
                                 		bld		rmp,@3			; Set TMn bit
                                 		sts		@6,rmp			; Store timer flags
                                 tktx:
                                 		ret
                                 tkte:
                                 .endm
                                 ;
                                 ;
                                 ; --- Reset Timers ---
                                 ;
                                 .macro		rstd
                                 ;
                                 ; @0 = TQn, @1 = TMn, @2 = tmf01, @3 = namestring
                                 ;
                                 rstds:
                                 		.db		@3,0,ctlW		; Namestring,ctlW
                                 		.dw		rstde			; Link address
                                 		.dw		NORM
                                 rstdL:
                                 		.dw		(rstds-rstdL)
                                 ;
                                 irstd:
                                 		lsr		BSTK			; Pop TOS to C
                                 		brcs	rstd1
                                 		ret
                                 ;
                                 rstd1:
                                 		lds		rmp,@2			; Get timer flags
                                 		clt						; T=0
                                 		bld		rmp,@0			; Clear TQn output
                                 		bld		rmp,@1			; Clear TMn bit
                                 		sts		@2,rmp			; Store timer flags
                                 		ret
                                 rstde:
                                 .endm
                                 ;
                                 ; --- SRAM Data Segment ---
                                 ;
                                 .DSEG
                                 .ORG	0X0100		; 2 Kb SRAM space
                                 ;
                                 ; --- User File Area ---
                                 ;
                                 filbeg:
                                 ;
                                 uf0st:
000100                           .byte	0x200		; 256 words - Don't move this buffer, aligned to word boundary!
                                 ;
                                 ; One-shot timer data and flag buffers. 1 flag buffer required
                                 ; per two timers. timers require 28 bytes total.
                                 ;
                                 TRB0:
000300                           .byte	1			; Timer_0 reload buffer
                                 TRB1:
000301                           .byte	1			; Timer_1 reload buffer
                                 TRB2:
000302                           .byte	1			; Timer_2 reload buffer
                                 TRB3:
000303                           .byte	1			; Timer_3 reload buffer
                                 TRB4:
000304                           .byte	1			; Timer_4 reload buffer
                                 TRB5:
000305                           .byte	1			; Timer_5 reload buffer
                                 TRB6:
000306                           .byte	1			; Timer_6 reload buffer
                                 TRB7:
000307                           .byte	1			; Timer_7 reload buffer
                                 ;
                                 TRB8:
000308                           .byte	1			; Timer_8 reload buffer
                                 TRB9:
000309                           .byte	1			; Timer_9 reload buffer
                                 TRBa:
00030a                           .byte	1			; Timer_A reload buffer
                                 TRBb:
00030b                           .byte	1			; Timer_B reload buffer
                                 TRBc:
00030c                           .byte	1			; Timer_C reload buffer
                                 TRBd:
00030d                           .byte	1			; Timer_D reload buffer
                                 TRBe:
00030e                           .byte	1			; Timer_E reload buffer
                                 TRBf:
00030f                           .byte	1			; Timer_F reload buffer
                                 ;
                                 filend:
                                 ;
                                 ; Timer count buffers
                                 ;
                                 TCB0:
000310                           .byte	1			; Timer_0 count buffer
                                 TCB1:
000311                           .byte	1			; Timer_1 count buffer
                                 TCB2:
000312                           .byte	1			; Timer_2 count buffer
                                 TCB3:
000313                           .byte	1			; Timer_3 count buffer
                                 TCB4:
000314                           .byte	1			; Timer_4 count buffer
                                 TCB5:
000315                           .byte	1			; Timer_5 count buffer
                                 TCB6:
000316                           .byte	1			; Timer_6 count buffer
                                 TCB7:
000317                           .byte	1			; Timer_7 count buffer
                                 ;
                                 TCB8:
000318                           .byte	1			; Timer_8 count buffer
                                 TCB9:
000319                           .byte	1			; Timer_9 count buffer
                                 TCBa:
00031a                           .byte	1			; Timer_A count buffer
                                 TCBb:
00031b                           .byte	1			; Timer_B count buffer
                                 TCBc:
00031c                           .byte	1			; Timer_C count buffer
                                 TCBd:
00031d                           .byte	1			; Timer_D count buffer
                                 TCBe:
00031e                           .byte	1			; Timer_E count buffer
                                 TCBf:
00031f                           .byte	1			; Timer_F count buffer
                                 ;
                                 PRB0:
000320                           .byte	1			; Timer_0 prescale count buffer
                                 PRB1:
000321                           .byte	1			; Timer_1 prescale count buffer
                                 PRB2:
000322                           .byte	1			; Timer_2 prescale count buffer
                                 PRB3:
000323                           .byte	1			; Timer_3 prescale count buffer
                                 PRB4:
000324                           .byte	1			; Timer_4 prescale count buffer
                                 PRB5:
000325                           .byte	1			; Timer_5 prescale count buffer
                                 PRB6:
000326                           .byte	1			; Timer_6 prescale count buffer
                                 PRB7:
000327                           .byte	1			; Timer_7 prescale count buffer
                                 ;
                                 PRB8:
000328                           .byte	1			; Timer_8 prescale count buffer
                                 PRB9:
000329                           .byte	1			; Timer_9 prescale count buffer
                                 PRBa:
00032a                           .byte	1			; Timer_A prescale count buffer
                                 PRBb:
00032b                           .byte	1			; Timer_B prescale count buffer
                                 PRBc:
00032c                           .byte	1			; Timer_C prescale count buffer
                                 PRBd:
00032d                           .byte	1			; Timer_D prescale count buffer
                                 PRBe:
00032e                           .byte	1			; Timer_E prescale count buffer
                                 PRBf:
00032f                           .byte	1			; Timer_F prescale count buffer
                                 ;
                                 tmf01:
000330                           .byte	1			; Timers 0 & 1 control flags
                                 tmf23:
000331                           .byte	1			; Timers 2 & 3 control flags
                                 tmf45:
000332                           .byte	1			; Timers 4 & 5 control flags
                                 tmf67:
000333                           .byte	1			; Timers 6 & 7 control flags
                                 ;
                                 tmf89:
000334                           .byte	1			; Timers 8 & 9 control flags
                                 tmfab:
000335                           .byte	1			; Timers A & B control flags
                                 tmfcd:
000336                           .byte	1			; Timers C & D control flags
                                 tmfef:
000337                           .byte	1			; Timers E & F control flags
                                 ;
                                 linbuf:
000338                           .byte	linsz		; Character input line buffer
                                 ;
                                 basln:
000340                           .byte	2			;* Base line buffer, 16b wide
                                 pointr:
000342                           .byte	2			;* Target address in UFx, 16b wide
                                 lnctr:
000344                           .byte	2			;* Program line counter, 16b wide
                                 attrb:
000346                           .byte	2			;* Attribute type buffer
                                 ;
                                 offs:
000348                           .byte	1			; Offset buffer
                                 cursor:
000349                           .byte	1			; Cursor offset position
                                 hzr:
00034a                           .byte	1			; Horizontal relative position
                                 vtr:
00034b                           .byte	1			; Vertical relative position
                                 ;
                                 ; Data buffer for word and byte
                                 ;
                                 wdbuf:
00034c                           .byte	2			; Word byte buffer
                                 dba:
00034e                           .byte	1			; Data byte buffer (don't move position relative to wdbuf)
                                 ;
                                 ; Port image buffers
                                 ;
                                 pa:
00034f                           .byte	1			; Port A image buffer
                                 ;
                                 pb:
000350                           .byte	1			; Port A image buffer
                                 ;
                                 py:
000351                           .byte	1			; Port A image buffer
                                 ;
                                 pz:
000352                           .byte	1			; Port A image buffer
                                 ;
                                 pu:
000353                           .byte	1			; Port U image buffer
                                 ;
                                 pv:
000354                           .byte	1			; Port V image buffer
                                 ;
                                 ;
                                 ; Port A debounce buffers
                                 ;
                                 paim:
000355                           .byte	1			; Previous port A scan image
                                 pal:
000356                           .byte	1			; Port A leading edge bits
                                 pat:
000357                           .byte	1			; Port A trailding edge bits
                                 pad:
000358                           .byte	1			; Port A double action bits
                                 padb:
000359                           .byte	1			; Port A debounced image
                                 dbr1:
00035a                           .byte	1			; Debounce result register 1
                                 dbr2:
00035b                           .byte	1			; Debounce result register 2
                                 ;
                                 ; Flip/Flop control registers
                                 ;
                                 vsff_0:
00035c                           .byte	1			; F/F Set byte
                                 vrff_0:
00035d                           .byte	1			; F/F Reset byte
                                 vqff_0:
00035e                           .byte	1			; F/F Output byte
                                 ;
                                 vsff_1:
00035f                           .byte	1			; F/F Set byte
                                 vrff_1:
000360                           .byte	1			; F/F Reset byte
                                 vqff_1:
000361                           .byte	1			; F/F Output byte
                                 ;
                                 ;
                                 ;
                                 buffend:
                                 ;
                                 ;
                                 ; ============================================
                                 ;   R E S E T   A N D   I N T   V E C T O R S
                                 ; ============================================
                                 ;
                                 ;
                                 ; --- Code Segment ---
                                 ;
                                 .CSEG
                                 .ORG	$0000						; Interrupt vectors go here
                                 ;
000000 940c 127e                 		jmp		start				; Int vector 1 - Reset vector
                                 ;
                                 .ORG	OC0Aaddr
00001c 940c 003a                 		jmp			Timer0_COMPA	; Timer 0 Output Compare A handler
                                 ;
                                 .ORG	OC1Aaddr
000016 940c 00f3                 		jmp			Timer1_COMPA	; Timer 1 Output Compare A handler
                                 ;
                                 ; End of interrupt vectors, start of program code space
                                 ;
                                 .ORG	0x0034						; Program begins here
                                 ;
                                 ;
                                 ;###########################################################################
                                 ;
000034 6556
000035 7372
000036 6f69
000037 206e
000038 2e30
000039 1a30                      verm:	.db	"Version 0.0",ctlZ
                                 ;
                                 ;###########################################################################
                                 ;
                                 ;
                                 ;
                                 ; ============================================
                                 ;     I N T E R R U P T   S E R V I C E S
                                 ; ============================================
                                 ;
                                 ;
                                 ; --- Timer 0 interrupt handler ---
                                 ;
                                 ; TCNT0 run in Output Compare mode, using OCR0A register to
                                 ; generate output compare interrupt every 4.096 ms. TCNT0 operates
                                 ; in Clear Timer on Compare Match (WGM02:0 = 2). OCR0A defines
                                 ; the counter's TOP value.
                                 ;
                                 ; On Compare Match, TCNT0 counter is cleared.
                                 ; Clk_t0 = 16 MHz/1024 = 15.625 kHz, 64 us period.
                                 ;
                                 Timer0_COMPA:
00003a 930f                      		push	rmp					; Save registers
00003b 931f                      		push	rga
00003c 932f                      		push	rgb
00003d b67f                      		in		SRsav,SREG
                                 ;
                                 ; --- Timers using 4.096 ms tick, ms ---
                                 ;
                                +
                                +
                                +
                                +
                                +
                                +swds :
00003e 9110 0330                +lds rga , tmf01
000040 ff12                     +sbrs rga , TM0
000041 c014                     +rjmp swdx
000042 9100 0320                +lds rmp , PRB0
000044 950a                     +dec rmp
000045 9300 0320                +sts PRB0 , rmp
000047 f471                     +brne swdx
000048 e00a                     +ldi rmp , PRVs
000049 9300 0320                +sts PRB0 , rmp
                                +
00004b 9100 0310                +lds rmp , TCB0
00004d 950a                     +dec rmp
00004e 9300 0310                +sts TCB0 , rmp
000050 f429                     +brne swdx
000051 94e8                     +clt
000052 f910                     +bld rga , TQ0
000053 f912                     +bld rga , TM0
000054 9310 0330                +sts tmf01 , rga
                                +swdx :
                                 		swd		TCB0,PRB0,TQ0,TM0,PRVs,tmf01
                                +
                                +
                                +
                                +
                                +
                                +swds :
000056 9110 0330                +lds rga , tmf01
000058 ff16                     +sbrs rga , TM1
000059 c014                     +rjmp swdx
00005a 9100 0321                +lds rmp , PRB1
00005c 950a                     +dec rmp
00005d 9300 0321                +sts PRB1 , rmp
00005f f471                     +brne swdx
000060 e00a                     +ldi rmp , PRVs
000061 9300 0321                +sts PRB1 , rmp
                                +
000063 9100 0311                +lds rmp , TCB1
000065 950a                     +dec rmp
000066 9300 0311                +sts TCB1 , rmp
000068 f429                     +brne swdx
000069 94e8                     +clt
00006a f914                     +bld rga , TQ1
00006b f916                     +bld rga , TM1
00006c 9310 0330                +sts tmf01 , rga
                                +swdx :
                                 		swd		TCB1,PRB1,TQ1,TM1,PRVs,tmf01
                                +
                                +
                                +
                                +
                                +
                                +swds :
00006e 9110 0331                +lds rga , tmf23
000070 ff12                     +sbrs rga , TM2
000071 c014                     +rjmp swdx
000072 9100 0322                +lds rmp , PRB2
000074 950a                     +dec rmp
000075 9300 0322                +sts PRB2 , rmp
000077 f471                     +brne swdx
000078 e00a                     +ldi rmp , PRVs
000079 9300 0322                +sts PRB2 , rmp
                                +
00007b 9100 0312                +lds rmp , TCB2
00007d 950a                     +dec rmp
00007e 9300 0312                +sts TCB2 , rmp
000080 f429                     +brne swdx
000081 94e8                     +clt
000082 f910                     +bld rga , TQ2
000083 f912                     +bld rga , TM2
000084 9310 0331                +sts tmf23 , rga
                                +swdx :
                                 		swd		TCB2,PRB2,TQ2,TM2,PRVs,tmf23
                                +
                                +
                                +
                                +
                                +
                                +swds :
000086 9110 0331                +lds rga , tmf23
000088 ff16                     +sbrs rga , TM3
000089 c014                     +rjmp swdx
00008a 9100 0323                +lds rmp , PRB3
00008c 950a                     +dec rmp
00008d 9300 0323                +sts PRB3 , rmp
00008f f471                     +brne swdx
000090 e00a                     +ldi rmp , PRVs
000091 9300 0323                +sts PRB3 , rmp
                                +
000093 9100 0313                +lds rmp , TCB3
000095 950a                     +dec rmp
000096 9300 0313                +sts TCB3 , rmp
000098 f429                     +brne swdx
000099 94e8                     +clt
00009a f914                     +bld rga , TQ3
00009b f916                     +bld rga , TM3
00009c 9310 0331                +sts tmf23 , rga
                                +swdx :
                                 		swd		TCB3,PRB3,TQ3,TM3,PRVs,tmf23
                                 ;
                                 ;
00009e 6190                      		sbr		flagb,(1<<t4msf)	; Set timer 0 overflow flag
                                 ;
                                 ; --- Update Output Port PD7...PD2 ---
                                 ;
                                 ; PY5...0 bits are mapped to PD7...PD2 pins
                                 ;
                                 outy:
00009f 9100 0351                 		lds		rmp,PY
0000a1 9b19                      		sbis	PINB,out_sense		; Test if out_sense pin jumpered
0000a2 9500                      		com		rmp					;	Jumpered, invert results
0000a3 730f                      		andi	rmp,0b00111111		; Mask off bits 7,6
0000a4 0f00                      		lsl		rmp
0000a5 0f00                      		lsl		rmp					; Align data
0000a6 b119                      		in		rga,PIND			; Read PIND
0000a7 7013                      		andi	rga,0b00000011		; Clear output field
0000a8 2b01                      		or		rmp,rga				; Write results to port pins
0000a9 b90b                      		out		PORTD,rmp
                                 ;
                                 ; PB4, PB5 pins mapped to PY6,7 outputs
                                 ;
0000aa 9100 0351                 		lds		rmp,PY				; Get PY image from RAM buffer
0000ac 9b19                      		sbis	PINB,out_sense		; Test if out_sense pin jumpered
0000ad c007                      		rjmp	inv_py				;	Jumpered, invert results
                                 
                                 ; Normal sense
0000ae 9a2d                      		sbi		PORTB,PB5			; Set bit
0000af ff07                      		sbrs	rmp,Y7				; If Y7 = 0
0000b0 982d                      		cbi		PORTB,PB5			; Clear output pin
                                 ;
0000b1 9a2c                      		sbi		PORTB,PB4			; Set bit
0000b2 ff06                      		sbrs	rmp,Y6				; If Y6 = 0
0000b3 982c                      		cbi		PORTB,PB4			; Clear output pin
0000b4 c006                      		rjmp	outex				; Exit
                                 ;
                                 ; Invert output values
                                 ;
                                 inv_py:
0000b5 982d                      		cbi		PORTB,PB5			; Clear bit
0000b6 ff07                      		sbrs	rmp,Y7				; If Y7 = 0
0000b7 9a2d                      		sbi		PORTB,PB5			; Set output pin
                                 ;
0000b8 982c                      		cbi		PORTB,PB4			; Clear bit
0000b9 ff06                      		sbrs	rmp,Y6				; If Y6 = 0
0000ba 9a2c                      		sbi		PORTB,PB4			; Set output pin
                                 outex:
                                 ;
                                 	;	in		rga,PINB			; Read PINB
                                 	;	andi	rga,0b1100000		; Clear output field
                                 	;	or		rmp,rga				; Write results to port pins
                                 	;	out		PORTB,rmp
                                 ;
                                 ;
                                 ; Read and debounce Input Port PC5...PC0 bits ---
                                 ;
                                 inputa:
0000bb b126                      		in		rgb,PINC			; Read Port C
0000bc 732f                      		andi	rgb,0b00111111		; Mask off bits 7,6
                                 ;
0000bd 9110 0355                 		lds		rga,paim			; Get previous scan image
0000bf 9320 0355                 		sts		paim,rgb			; Save this scan as previous image
0000c1 2712                      		eor		rga,rgb				; 1 = changed bit, 0 = no change
0000c2 9310 035a                 		sts		dbr1,rga			; Save bit pattern of changes
0000c4 9510                      		com		rga					; 0 = changed bit, 1 = no change
0000c5 2312                      		and		rga,rgb				; Changed bits cleared to 0
0000c6 9310 035b                 		sts		dbr2,rga			; Save input with changed bits = 0
                                 ;
                                 ;  Merge in debounced bits to the old input image, keeping the old bits in
                                 ;  the positions that are not debounced. That is, an input bit is not
                                 ;  changed from its old state until it is debounced, since it could be
                                 ;  flipping on each scan cycle.
                                 ;
0000c8 9110 034f                 		lds		rga,pa				; Get old debounced input image
0000ca 9100 035a                 		lds		rmp,dbr1			; 1 = changed bit, 0 = no change
0000cc 2310                      		and		rga,rmp				; 0 = debounced positions
0000cd 9100 035b                 		lds		rmp,dbr2
0000cf 2b10                      		or		rga,rmp				; Merge in new debounced bits
0000d0 9100 034f                 		lds		rmp,pa				; Save old input image
0000d2 9300 035b                 		sts		dbr2,rmp
0000d4 9310 034f                 		sts		pa,rga				; Update new debounced input image
                                 ;
                                 ;  Process -ve transitions for counter inputs ANDing the complemented
                                 ;  scan image with the changed bit mask in DBR1. Merge result with the
                                 ;  trailing edge trigger byte, pat.
                                 ;
0000d6 2f12                      		mov		rga,rgb				; Get input port reading
0000d7 9510                      		com		rga					; Invert port reading
0000d8 9100 035a                 		lds		rmp,dbr1
0000da 2310                      		and		rga,rmp				; Isolate -ve transitions
0000db 9100 0357                 		lds		rmp,pat
0000dd 2b01                      		or		rmp,rga				; Merge to trigger byte
0000de 9300 0357                 		sts		pat,rmp				; Save result back to pat
                                 ;
                                 ;  Process +ve transition bits by ANDing bits in the scan image with the
                                 ;  changed bits mask in DBR1 to generate 1's in positions with 0 to 1
                                 ;  transitions in DBR1. Merge this resut to the transition image byte.
                                 ;
0000e0 2f12                      		mov		rga,rgb				; Get input port reading
0000e1 9100 035a                 		lds		rmp,dbr1
0000e3 2310                      		and		rga,rmp				; Isolate +ve transitions
0000e4 9100 0356                 		lds		rmp,pal
0000e6 2b01                      		or		rmp,rga				; Merge to trigger byte
0000e7 9310 0356                 		sts		pal,rga				; Save result back to pat
                                 ;
                                 ;  Process double action bits. Each double action output bit acts as a
                                 ;  flip flop that change output state on each 0 to 1 transition of the
                                 ;  input bit. Each input bit has a corresponding double action output bit.
                                 ;
0000e9 9100 0358                 		lds		rmp,pad				; Process double action changes
0000eb 2710                      		eor		rga,rmp
0000ec 9310 0358                 		sts		pad,rga				; Sace result back to pad
                                 ;
0000ee be7f                      		out		SREG,SRsav			; Restore SREG
0000ef 912f                      		pop		rgb
0000f0 911f                      		pop		rga
0000f1 910f                      		pop		rmp
0000f2 9518                      		reti
                                 ;
                                 ;
                                 ; --- Timer 1 interrupt handler ---
                                 ;
                                 ; TCNT1 run in output compare mode, using OCR1A register to
                                 ; generate output compare interrupt every 100 ms. TCNT1 operates in mode 5
                                 ; CTC (WGM13:10 = 4). OCR1A define the counter's TOP value.
                                 ;
                                 ; TCNT1 is cleared on compare match with OCR1A channel.
                                 ; Clk_t1 = 16 MHz/256 = 62.5 kHz, 16 us period.
                                 ;
                                 ;
                                 Timer1_COMPA:
0000f3 930f                      		push	rmp					; Save registers
0000f4 931f                      		push	rga
0000f5 b67f                      		in		SRsav,SREG
                                 ;
0000f6 6081                      		sbr		flaga,(1<<t100msf)	; Set 100 ms flag
0000f7 6098                      		sbr		flagb,(1<<paceb)	; Set 100 ms display pace flag
                                 ;
                                 ; --- Service software timers ---
                                 ;
                                 ; Timebase for CLKA count down timra to 0, reload counter
                                 ; and Complement CLKA every 200 ms
                                 ;
                                 tbasea:
0000f8 948a                      		dec		timra				; Count down timer
0000f9 f421                      		brne	tbaseax
0000fa e002                      		ldi		rmp,timrav			; Reload timer b
0000fb 2e80                      		mov		timra,rmp
0000fc e011                      		ldi		rga,(1<<clkaf)
0000fd 2791                      		eor		flagb,rga
                                 tbaseax:
                                 ;
                                 ; Timebase for CLKB count down timrb to 0, reload counter
                                 ; and set timer flag t600ms
                                 ;
                                 tbaseb:
0000fe 949a                      		dec		timrb				; Count down timer
0000ff f429                      		brne	tbasebx
000100 e006                      		ldi		rmp,timrbv			; Reload timer b
000101 2e90                      		mov		timrb,rmp
000102 6082                      		sbr		flaga,(1<<t600msf)	; Set timer flag
                                 ;
                                 ; Complement CLKB every 600 ms
                                 ;
000103 e012                      		ldi		rga,(1<<clkbf)
000104 2791                      		eor		flagb,rga
                                 tbasebx:
                                 ;
                                 ; Timebase for CLKBC count down timrc to 0, reload counter
                                 ; and set timer flag t1800msf
                                 ;
                                 tbasec:
000105 94aa                      		dec		timrc				; Count down timer
000106 f429                      		brne	tbasecx
000107 e102                      		ldi		rmp,timrcv			; Reload timer c
000108 2ea0                      		mov		timrc,rmp
000109 6084                      		sbr		flaga,(1<<t1800msf)	; Set timer flag
                                 ;
                                 ; Complement CLKC every 1.8 s
                                 ;
00010a e014                      		ldi		rga,(1<<clkcf)
00010b 2791                      		eor		flagb,rga
                                 tbasecx:
                                 ;
00010c ff80                      		sbrs	flaga,t100msf
00010d c154                      		rjmp	tbcfx				; Clear flags and exit
                                 ;
                                 ; --- Timers using 100 ms tick, seconds ---
                                 ;
                                +
                                +
                                +
                                +
                                +
                                +swds :
00010e 9110 0330                +lds rga , tmf01
000110 ff12                     +sbrs rga , TM0
000111 c014                     +rjmp swdx
000112 9100 0320                +lds rmp , PRB0
000114 950a                     +dec rmp
000115 9300 0320                +sts PRB0 , rmp
000117 f471                     +brne swdx
000118 e00a                     +ldi rmp , PRVs
000119 9300 0320                +sts PRB0 , rmp
                                +
00011b 9100 0310                +lds rmp , TCB0
00011d 950a                     +dec rmp
00011e 9300 0310                +sts TCB0 , rmp
000120 f429                     +brne swdx
000121 94e8                     +clt
000122 f910                     +bld rga , TQ0
000123 f912                     +bld rga , TM0
000124 9310 0330                +sts tmf01 , rga
                                +swdx :
                                 		swd		TCB0,PRB0,TQ0,TM0,PRVs,tmf01
                                +
                                +
                                +
                                +
                                +
                                +swds :
000126 9110 0330                +lds rga , tmf01
000128 ff16                     +sbrs rga , TM1
000129 c014                     +rjmp swdx
00012a 9100 0321                +lds rmp , PRB1
00012c 950a                     +dec rmp
00012d 9300 0321                +sts PRB1 , rmp
00012f f471                     +brne swdx
000130 e00a                     +ldi rmp , PRVs
000131 9300 0321                +sts PRB1 , rmp
                                +
000133 9100 0311                +lds rmp , TCB1
000135 950a                     +dec rmp
000136 9300 0311                +sts TCB1 , rmp
000138 f429                     +brne swdx
000139 94e8                     +clt
00013a f914                     +bld rga , TQ1
00013b f916                     +bld rga , TM1
00013c 9310 0330                +sts tmf01 , rga
                                +swdx :
                                 		swd		TCB1,PRB1,TQ1,TM1,PRVs,tmf01
                                +
                                +
                                +
                                +
                                +
                                +swds :
00013e 9110 0331                +lds rga , tmf23
000140 ff12                     +sbrs rga , TM2
000141 c014                     +rjmp swdx
000142 9100 0322                +lds rmp , PRB2
000144 950a                     +dec rmp
000145 9300 0322                +sts PRB2 , rmp
000147 f471                     +brne swdx
000148 e00a                     +ldi rmp , PRVs
000149 9300 0322                +sts PRB2 , rmp
                                +
00014b 9100 0312                +lds rmp , TCB2
00014d 950a                     +dec rmp
00014e 9300 0312                +sts TCB2 , rmp
000150 f429                     +brne swdx
000151 94e8                     +clt
000152 f910                     +bld rga , TQ2
000153 f912                     +bld rga , TM2
000154 9310 0331                +sts tmf23 , rga
                                +swdx :
                                 		swd		TCB2,PRB2,TQ2,TM2,PRVs,tmf23
                                +
                                +
                                +
                                +
                                +
                                +swds :
000156 9110 0331                +lds rga , tmf23
000158 ff16                     +sbrs rga , TM3
000159 c014                     +rjmp swdx
00015a 9100 0323                +lds rmp , PRB3
00015c 950a                     +dec rmp
00015d 9300 0323                +sts PRB3 , rmp
00015f f471                     +brne swdx
000160 e00a                     +ldi rmp , PRVs
000161 9300 0323                +sts PRB3 , rmp
                                +
000163 9100 0313                +lds rmp , TCB3
000165 950a                     +dec rmp
000166 9300 0313                +sts TCB3 , rmp
000168 f429                     +brne swdx
000169 94e8                     +clt
00016a f914                     +bld rga , TQ3
00016b f916                     +bld rga , TM3
00016c 9310 0331                +sts tmf23 , rga
                                +swdx :
                                 		swd		TCB3,PRB3,TQ3,TM3,PRVs,tmf23
                                +
                                +
                                +
                                +
                                +
                                +swds :
00016e 9110 0332                +lds rga , tmf45
000170 ff12                     +sbrs rga , TM4
000171 c014                     +rjmp swdx
000172 9100 0324                +lds rmp , PRB4
000174 950a                     +dec rmp
000175 9300 0324                +sts PRB4 , rmp
000177 f471                     +brne swdx
000178 e00a                     +ldi rmp , PRVs
000179 9300 0324                +sts PRB4 , rmp
                                +
00017b 9100 0314                +lds rmp , TCB4
00017d 950a                     +dec rmp
00017e 9300 0314                +sts TCB4 , rmp
000180 f429                     +brne swdx
000181 94e8                     +clt
000182 f910                     +bld rga , TQ4
000183 f912                     +bld rga , TM4
000184 9310 0332                +sts tmf45 , rga
                                +swdx :
                                 		swd		TCB4,PRB4,TQ4,TM4,PRVs,tmf45
                                +
                                +
                                +
                                +
                                +
                                +swds :
000186 9110 0332                +lds rga , tmf45
000188 ff16                     +sbrs rga , TM5
000189 c014                     +rjmp swdx
00018a 9100 0325                +lds rmp , PRB5
00018c 950a                     +dec rmp
00018d 9300 0325                +sts PRB5 , rmp
00018f f471                     +brne swdx
000190 e00a                     +ldi rmp , PRVs
000191 9300 0325                +sts PRB5 , rmp
                                +
000193 9100 0315                +lds rmp , TCB5
000195 950a                     +dec rmp
000196 9300 0315                +sts TCB5 , rmp
000198 f429                     +brne swdx
000199 94e8                     +clt
00019a f914                     +bld rga , TQ5
00019b f916                     +bld rga , TM5
00019c 9310 0332                +sts tmf45 , rga
                                +swdx :
                                 		swd		TCB5,PRB5,TQ5,TM5,PRVs,tmf45
                                +
                                +
                                +
                                +
                                +
                                +swds :
00019e 9110 0333                +lds rga , tmf67
0001a0 ff12                     +sbrs rga , TM6
0001a1 c014                     +rjmp swdx
0001a2 9100 0326                +lds rmp , PRB6
0001a4 950a                     +dec rmp
0001a5 9300 0326                +sts PRB6 , rmp
0001a7 f471                     +brne swdx
0001a8 e00a                     +ldi rmp , PRVs
0001a9 9300 0326                +sts PRB6 , rmp
                                +
0001ab 9100 0316                +lds rmp , TCB6
0001ad 950a                     +dec rmp
0001ae 9300 0316                +sts TCB6 , rmp
0001b0 f429                     +brne swdx
0001b1 94e8                     +clt
0001b2 f910                     +bld rga , TQ6
0001b3 f912                     +bld rga , TM6
0001b4 9310 0333                +sts tmf67 , rga
                                +swdx :
                                 		swd		TCB6,PRB6,TQ6,TM6,PRVs,tmf67
                                +
                                +
                                +
                                +
                                +
                                +swds :
0001b6 9110 0333                +lds rga , tmf67
0001b8 ff16                     +sbrs rga , TM7
0001b9 c014                     +rjmp swdx
0001ba 9100 0327                +lds rmp , PRB7
0001bc 950a                     +dec rmp
0001bd 9300 0327                +sts PRB7 , rmp
0001bf f471                     +brne swdx
0001c0 e00a                     +ldi rmp , PRVs
0001c1 9300 0327                +sts PRB7 , rmp
                                +
0001c3 9100 0317                +lds rmp , TCB7
0001c5 950a                     +dec rmp
0001c6 9300 0317                +sts TCB7 , rmp
0001c8 f429                     +brne swdx
0001c9 94e8                     +clt
0001ca f914                     +bld rga , TQ7
0001cb f916                     +bld rga , TM7
0001cc 9310 0333                +sts tmf67 , rga
                                +swdx :
                                 		swd		TCB7,PRB7,TQ7,TM7,PRVs,tmf67
                                +
                                +
                                +
                                +
                                +
                                +swds :
0001ce 9110 0335                +lds rga , tmfab
0001d0 ff12                     +sbrs rga , TMA
0001d1 c014                     +rjmp swdx
0001d2 9100 032a                +lds rmp , PRBA
0001d4 950a                     +dec rmp
0001d5 9300 032a                +sts PRBA , rmp
0001d7 f471                     +brne swdx
0001d8 e00a                     +ldi rmp , PRVs
0001d9 9300 032a                +sts PRBA , rmp
                                +
0001db 9100 031a                +lds rmp , TCBA
0001dd 950a                     +dec rmp
0001de 9300 031a                +sts TCBA , rmp
0001e0 f429                     +brne swdx
0001e1 94e8                     +clt
0001e2 f910                     +bld rga , TQA
0001e3 f912                     +bld rga , TMA
0001e4 9310 0335                +sts tmfab , rga
                                +swdx :
                                 		swd		TCBA,PRBA,TQA,TMA,PRVs,tmfab
                                +
                                +
                                +
                                +
                                +
                                +swds :
0001e6 9110 0335                +lds rga , tmfab
0001e8 ff16                     +sbrs rga , TMB
0001e9 c014                     +rjmp swdx
0001ea 9100 032b                +lds rmp , PRBB
0001ec 950a                     +dec rmp
0001ed 9300 032b                +sts PRBB , rmp
0001ef f471                     +brne swdx
0001f0 e00a                     +ldi rmp , PRVs
0001f1 9300 032b                +sts PRBB , rmp
                                +
0001f3 9100 031b                +lds rmp , TCBB
0001f5 950a                     +dec rmp
0001f6 9300 031b                +sts TCBB , rmp
0001f8 f429                     +brne swdx
0001f9 94e8                     +clt
0001fa f914                     +bld rga , TQB
0001fb f916                     +bld rga , TMB
0001fc 9310 0335                +sts tmfab , rga
                                +swdx :
                                 		swd		TCBB,PRBB,TQB,TMB,PRVs,tmfab
                                 ;
                                 ; --- Timers using 600 ms tick, minutes ---
                                 ;
0001fe ff81                      		sbrs	flaga,t600msf
0001ff c062                      		rjmp	tbcfx
                                 ;
                                +
                                +
                                +
                                +
                                +
                                +swds :
000200 9110 0336                +lds rga , tmfcd
000202 ff12                     +sbrs rga , TMC
000203 c014                     +rjmp swdx
000204 9100 032c                +lds rmp , PRBC
000206 950a                     +dec rmp
000207 9300 032c                +sts PRBC , rmp
000209 f471                     +brne swdx
00020a e604                     +ldi rmp , PRVm
00020b 9300 032c                +sts PRBC , rmp
                                +
00020d 9100 031c                +lds rmp , TCBC
00020f 950a                     +dec rmp
000210 9300 031c                +sts TCBC , rmp
000212 f429                     +brne swdx
000213 94e8                     +clt
000214 f910                     +bld rga , TQC
000215 f912                     +bld rga , TMC
000216 9310 0336                +sts tmfcd , rga
                                +swdx :
                                 		swd		TCBC,PRBC,TQC,TMC,PRVm,tmfcd
                                +
                                +
                                +
                                +
                                +
                                +swds :
000218 9110 0336                +lds rga , tmfcd
00021a ff16                     +sbrs rga , TMD
00021b c014                     +rjmp swdx
00021c 9100 032d                +lds rmp , PRBD
00021e 950a                     +dec rmp
00021f 9300 032d                +sts PRBD , rmp
000221 f471                     +brne swdx
000222 e604                     +ldi rmp , PRVm
000223 9300 032d                +sts PRBD , rmp
                                +
000225 9100 031d                +lds rmp , TCBD
000227 950a                     +dec rmp
000228 9300 031d                +sts TCBD , rmp
00022a f429                     +brne swdx
00022b 94e8                     +clt
00022c f914                     +bld rga , TQD
00022d f916                     +bld rga , TMD
00022e 9310 0336                +sts tmfcd , rga
                                +swdx :
                                 		swd		TCBD,PRBD,TQD,TMD,PRVm,tmfcd
                                +
                                +
                                +
                                +
                                +
                                +swds :
000230 9110 0337                +lds rga , tmfef
000232 ff12                     +sbrs rga , TME
000233 c014                     +rjmp swdx
000234 9100 032e                +lds rmp , PRBE
000236 950a                     +dec rmp
000237 9300 032e                +sts PRBE , rmp
000239 f471                     +brne swdx
00023a e604                     +ldi rmp , PRVm
00023b 9300 032e                +sts PRBE , rmp
                                +
00023d 9100 031e                +lds rmp , TCBE
00023f 950a                     +dec rmp
000240 9300 031e                +sts TCBE , rmp
000242 f429                     +brne swdx
000243 94e8                     +clt
000244 f910                     +bld rga , TQE
000245 f912                     +bld rga , TME
000246 9310 0337                +sts tmfef , rga
                                +swdx :
                                 		swd		TCBE,PRBE,TQE,TME,PRVm,tmfef
                                 ;
                                 ; --- Timer Tf using 1800 ms flag
                                 ;
000248 ff82                      		sbrs	flaga,t1800msf
000249 c018                      		rjmp	tbcfx
                                 ;
                                +
                                +
                                +
                                +
                                +
                                +swds :
00024a 9110 0337                +lds rga , tmfef
00024c ff16                     +sbrs rga , TMF
00024d c014                     +rjmp swdx
00024e 9100 032f                +lds rmp , PRBF
000250 950a                     +dec rmp
000251 9300 032f                +sts PRBF , rmp
000253 f471                     +brne swdx
000254 ed0e                     +ldi rmp , PRVh
000255 9300 032f                +sts PRBF , rmp
                                +
000257 9100 031f                +lds rmp , TCBF
000259 950a                     +dec rmp
00025a 9300 031f                +sts TCBF , rmp
00025c f429                     +brne swdx
00025d 94e8                     +clt
00025e f914                     +bld rga , TQF
00025f f916                     +bld rga , TMF
000260 9310 0337                +sts tmfef , rga
                                +swdx :
                                 		swd		TCBF,PRBF,TQF,TMF,PRVh,tmfef
                                 ;
                                 ;  Clear t100ms, t600msf  and t1800ms after timer processing
                                 ;
                                 tbcfx:
000262 7f88                      		cbr		flaga,(1<<t100msf)|(1<<t600msf)|(1<<t1800msf)
                                 ;
                                 ; Exit service toutine
                                 ;
000263 be7f                      		out		SREG,SRsav
000264 911f                      		pop		rga					; Restore registers
000265 910f                      		pop		rmp
000266 9518                      		reti
                                 ;
                                 ;
                                 ;###########################################################################
                                 ;
                                 ;
                                 ; --- Initialization Routines ---
                                 ;
                                 ; Initialize the Tile Engine
                                 ;
                                 initz:
000267 940e 146f                 		call	zbuf			; Clear data space buffers, excluding uf0 space
000269 940e 1477                 		call	zregs			; Clear lower registers R0,..,R15
00026b 2788                      		clr		flaga			; Clear flags
00026c 2799                      		clr		flagb
                                 ;
                                 ; Initialize PB0/D8 as autostart, PB1/D9 as output_sense. Activate pull-ups
                                 ;
00026d 9a28                      		sbi		PORTB,PB0		; Activate pull-up
00026e 9a29                      		sbi		PORTB,PB1		; Activate pull-up
                                 ;
                                 ; Initialize PB4, PB5 as outputs for Y6, Y7
                                 ;
00026f 9a24                      		sbi		DDRB,PB4		; Y6 output
000270 9a25                      		sbi		DDRB,PB5		; Y7 output
                                 ;
                                 ; Initialize PC5...PC0 as inputs, pull-ups activated
                                 ;
000271 e30f                      		ldi		rmp,0b00111111
000272 b908                      		out		PORTC,rmp		; Set PC bits high
                                 ;
                                 ; Initialize PD7...PD2 as outputs
                                 ;
000273 ef0c                      		ldi		rmp,0b11111100
000274 b90a                      		out		DDRD,rmp		; Set PD as outputs
                                 ;
                                 ;
                                 ; --- Timers Initialization ----
                                 ;
                                 ; === TCNT0 Initialization === (OK)
                                 ;
                                 ; Setup 8 bit Timer/Counter0 Compare A in CTC mode
                                 ; Setup TCNT0 prescaler = 1024, 64 us period
                                 ;
                                 InitTimer0:
000275 e005                      		ldi		rmp,(1<<CS02)|(1<<CS00)	; Divide by 1024 prescaler, Fclk = 15.625 kHz
000276 bd05                      		out		TCCR0B,rmp				; Timer/Counter0 control register B
                                 ;
                                 ; Setup TCNT0 for CTC mode
                                 ;
000277 e002                      		ldi		rmp,(1<<WGM01)			; CTC mode
000278 bd04                      		out		TCCR0A,rmp				; Timer/Counter0 control register A
                                 ;
                                 ; Initialize OCR0A output compare register
                                 ;
000279 e400                      		ldi		rmp,OCR0Aload			; Set OCR0A = 64 for 4.096 ms period
00027a bd07                      		out		OCR0A,rmp
                                 ;
                                 ; Enable Timer/Counter0 Compare A Match Interrput in TIMSK0
                                 ;
00027b 9100 006e                 		lds		rmp,TIMSK0
00027d 6002                      		sbr		rmp,(1<<OCIE0A)			; Enable Timer/Counter0 Output Compare A Match Interrupt
00027e 9300 006e                 		sts		TIMSK0,rmp
                                 ;
                                 ;
                                 ; === TCNT1 Initialization === (OK)
                                 ;
                                 ; Setup 16 bit Timer/Counter1 Compare A in CTC mode
                                 ; Setup TCNT1 prescaler for 256, clock period = 16 us and CTC mode
                                 ;
                                 InitTimer1:
000280 e00c                      		ldi		rmp,(1<<CS12)|(1<<WGM12)	; Divide by 256 prescaler, Fclk = 62.5 kHz
000281 9300 0081                 		sts		TCCR1B,rmp					; Write to control register B
                                 ;
                                 ; Initialize OCR1A output compare register
                                 ;
000283 e108                      		ldi		rmp,high(OCR1Aload)		; Set OCR1A = 100 ms period
000284 e61a                      		ldi		rga,low(OCR1Aload)
000285 9300 0089                 		sts		OCR1AH,rmp				; 16 bit write
000287 9310 0088                 		sts		OCR1AL,rga
                                 ;
                                 ; Enable TCNT1 Compare A Match Interrputs in TIMSK1
                                 ;
000289 9100 006f                 		lds		rmp,TIMSK1
00028b 6002                      		sbr		rmp,(1<<OCIE1A)		; Enable Output Compare A Match Interrupt
00028c 9300 006f                 		sts		TIMSK1,rmp
                                 ;
                                 ;
                                 ; Load software timra, timrb and timrc counters with reload values
                                 ;
00028e e002                      		ldi		rmp,timrav			; Reload timer
00028f 2e80                      		mov		timra,rmp
                                 ;
000290 e006                      		ldi		rmp,timrbv			; Reload timer
000291 2e90                      		mov		timrb,rmp
000292 7f8d                      		cbr		flaga,(1<<t600msf)	; Clear t1800msf flag
                                 ;
000293 e102                      		ldi		rmp,timrcv			; Reload timer
000294 2ea0                      		mov		timrc,rmp
000295 7f8b                      		cbr		flaga,(1<<t1800msf)	; Clear t1800msf flag
000296 9508                      		ret
                                 ;
                                 ; Initialize the UART for 19,200 baud asynchronous operation
                                 ;
                                 inzuart:
000297 94f8                      		cli							; Clear global interrupts
000298 e000                      		ldi		rmp,high(BAUD_PRE)
000299 9300 00c5                 		sts		UBRR0H,rmp			; Load baud rate register high
00029b e303                      		ldi		rmp,low(BAUD_PRE)
00029c 9300 00c4                 		sts		UBRR0L,rmp			; Load baud rate register low
                                 ;
                                 ; Setup frame for 1 start, 8 data, 1 stop and no parity
                                 ;
00029e e006                      		ldi		rmp,(1<<UCSZ00)|(1<<UCSZ01)
00029f 9300 00c2                 		sts		UCSR0C,rmp
                                 ;
                                 ; Enable the UART
                                 ;
0002a1 e108                      		ldi		rmp,(1<<RXEN0)|(1<<TXEN0)
0002a2 9300 00c1                 		sts		UCSR0B,rmp			; Enable RX and TX
                                 ;
                                 ; --- Enable GLobal Interrupts
                                 ;
0002a4 9478                      		sei							; Set global interrupts
0002a5 9508                      		ret
                                 ;
                                 ; Initialize User File Space buffers
                                 ;
                                 inzuf0:
0002a6 e001                      		ldi		rmp,high(uf0st)
0002a7 2e40                      		mov		ufpch,rmp			; Setup UF program counter
0002a8 e000                      		ldi		rmp,low(uf0st)
0002a9 2e50                      		mov		ufpcl,rmp
                                 ;
0002aa 2700                      		clr		rmp
0002ab 9300 0340                 		sts		basln,rmp
0002ad 9300 0341                 		sts		basln+1,rmp			; Clear basln buffer
0002af 9300 0349                 		sts		cursor,rmp			; Clear cursor buffer
                                 ;
0002b1 9508                      		ret
                                 ;
                                 ;
                                 ;###########################################################################
                                 ;
                                 ;  UWORDS.ASM - UTL Dictionary
                                 ;
                                 ;  Copyright (c)   2013 Jan 25   Francis A. Lyn
                                 ;  Version 0
                                 ;
                                 ; --- The Word Dictionary ---
                                 ;
                                 ;  These subroutine modules form the WORDS that make up the DICTIONARY.
                                 ;  Each module consists of a header section, a main code body, and a RET
                                 ;  instruction at the end of the code body.
                                 ;
                                 ;  The header starts with a ^W terminated namestring, ['namestring',^W],
                                 ;  followed by a link address (LA) to next word in the dictionary. The LA
                                 ;  is followed by an offset byte. When this offset byte value is added to a
                                 ;  16 bit pointer to the offset byte location, the result will move the
                                 ;  pointer to the start of the WORD's namestring. The offset byte is in 2's
                                 ;  complement, as the namestring starts somewhere ahead of the the main code
                                 ;  body. The offset byte is used by the Editor to locate the beginning of
                                 ;  the namestring, given the vector to the start of the main code body, IWRD.
                                 ;
                                 ;  The offset byte is followed by the Attribute type byte. This byte
                                 ;  determines the execution environment for the word, i.e. whether the
                                 ;  word is interpreter only, interpreter and program run time (normal),
                                 ;  or run time only (not executed in interpreter mode).
                                 ;
                                 ;  The main code body for the WORD comes next, and is terminated by a
                                 ;  RET instruction.
                                 ;
                                 ;  The WORD structure is as follows:
                                 ;
                                 ;WORD1:	DB	'namestring',^W	Name of word			!!!MUST BE EVEN NUMBER OF BYTES!!!
                                 ;	DW	Link_Address	Address of next WORD2
                                 ;	DW	(WORD1-$)	Offset to start of namestring
                                 ;	DW	Attribute	Controls execution environment
                                 ;IWRD:	code		Subroutine code start for this word
                                 ;	.
                                 ;	.
                                 ;	code
                                 ;	RET
                                 ;
                                 ;WORD2: next Dictionary word, defined by the link_address field
                                 ;
                                 ;
                                 ; --- Attribute Type Definitions ---
                                 ;
                                 ;
                                 ;NORM	.dw		0	Default, Interpreter and Runtime command
                                 ;EDIT	.dw		1	Editor mode only
                                 ;
                                 ; ---
                                 ;
                                 ;  Bit Stack Push and Pop Operations
                                 ;
                                 ; ---
                                 ;
                                 dict:							; Dictionary entry point
                                 ;
                                 ; ---
                                 ;
                                 drop:
0002b2 5244
0002b3 504f
0002b4 1700                      		.db		"DROP",0,ctlW
0002b5 02ba                      		.dw		drope			; Link address to next word
0002b6 0000                      		.dw		NORM
                                 dropL:
0002b7 fffb                      		.dw		(drop-dropL)
                                 ;
                                 idrop:
0002b8 9466                      		lsr		BSTK			; Pop TOS, discard bit, (n1 --   )
0002b9 9508                      		ret
                                 drope:
                                 ;
                                 clr1:
0002ba 4c43
0002bb 1752                      		.db		"CLR",ctlW		; Clear TOS
0002bc 02c3                      		.dw		clre
0002bd 0000                      		.dw		NORM
                                 clrL:
0002be fffc                      		.dw		(clr1-clrL)
                                 ;
                                 iclr:
0002bf 9466                      		lsr		BSTK			; Clear TOS bit, (n1 -- 0)
0002c0 9488                      		clc
0002c1 0c66                      		lsl		BSTK
0002c2 9508                      		ret
                                 clre:
                                 ;
                                 dup1:
0002c3 5544
0002c4 1750                      		.db		"DUP",ctlW
0002c5 02d2                      		.dw		dupe
0002c6 0000                      		.dw		NORM
                                 dupL:
0002c7 fffc                      		.dw		(dup1-dupL)
                                 ;
                                 idup:
0002c8 9466                      		lsr		BSTK			; Duplicate TOS, (n1 -- n1,n1)
0002c9 f420                      		brcc	dup2
0002ca 1c66                      		rol		BSTK			; TOS <-- C=1
0002cb 9408                      		sec
0002cc 1c66                      		rol		BSTK			; TOS <-- C=1
0002cd 9508                      		ret
                                 ;
                                 dup2:
0002ce 1c66                      		rol		BSTK			; TOS <-- C=0
0002cf 9488                      		clc
0002d0 1c66                      		rol		BSTK			; TOS <-- C=0
0002d1 9508                      		ret
                                 dupe:
                                 ;
                                 set1:
0002d2 4553
0002d3 1754                      		.db		"SET",ctlW
0002d4 02db                      		.dw		sete
0002d5 0000                      		.dw		NORM
                                 setL:
0002d6 fffc                      		.dw		(set1-setL)
                                 ;
                                 iset:
0002d7 9466                      		lsr		BSTK			; Set TOS, (n1 -- 1)
0002d8 9408                      		sec
0002d9 1c66                      		rol		BSTK
0002da 9508                      		ret
                                 sete:
                                 ;
                                 or1:
0002db 524f
0002dc 1700                      		.db		"OR",0,ctlW
0002dd 02e8                      		.dw		ore
0002de 0000                      		.dw		NORM
                                 orL:
0002df fffc                      		.dw		(or1-orL)
                                 ;
                                 ior:
0002e0 2d06                      		mov		rmp,BSTK	; Copy BSTK to rmp
0002e1 9506                      		lsr		rmp			; Operand bits in bit 0 position
0002e2 2906                      		or		rmp,BSTK	; Perform logical OR
0002e3 9466                      		lsr		BSTK		; Drop bit stack
0002e4 9466                      		lsr		BSTK		; Drop bit stack
0002e5 9506                      		lsr		rmp			; OR result in C
0002e6 1c66                      		rol		BSTK		; Push C to TOS
0002e7 9508                      		ret
                                 ore:
                                 ;
                                 and1:
0002e8 4e41
0002e9 1744                      		.db		"AND",ctlW
0002ea 02f5                      		.dw		ande
0002eb 0000                      		.dw		NORM
                                 andL:
0002ec fffc                      		.dw		(and1-andL)
                                 ;
                                 iand:
0002ed 2d06                      		mov		rmp,BSTK	; Copy BSTK to rmp
0002ee 9506                      		lsr		rmp			; Operand bits in bit 0 position
0002ef 2106                      		and		rmp,BSTK	; Perform logical AND
0002f0 9466                      		lsr		BSTK		; Drop bit stack
0002f1 9466                      		lsr		BSTK		; Drop bit stack
0002f2 9506                      		lsr		rmp			; OR result in C
0002f3 1c66                      		rol		BSTK		; Push C to TOS
0002f4 9508                      		ret
                                 ande:
                                 ;
                                 not1:
0002f5 1721                      		.db		"!",ctlW	; Logical negate TOS
0002f6 0301                      		.dw		note
0002f7 0000                      		.dw		NORM
                                 notL:
0002f8 fffd                      		.dw		(not1-notL)
                                 ;
                                 inot:
0002f9 9466                      		lsr		BSTK		; Pop TOS
0002fa f418                      		brcc	not2
0002fb 9488                      		clc					; TOS was 1
0002fc 1c66                      		rol		BSTK		; Push C to TOS
0002fd 9508                      		ret
                                 ;
                                 not2:
0002fe 9408                      		sec					; TOS was 0
0002ff 1c66                      		rol		BSTK		; Push C to TOS
000300 9508                      		ret
                                 note:
                                 ;
                                 ; --- Complement the bit stack byte --
                                 ;
                                 cplbs1:
000301 2121
000302 1700                      		.db		"!!",0,ctlW	; Logical negate bit stack byte
000303 0309                      		.dw		cplbse
000304 0000                      		.dw		NORM
                                 cplbsL:
000305 fffc                      		.dw		(cplbs1-cplbsL)
                                 ;
                                 icplbs:
000306 6f0f                      		sbr		rmp,0xff
000307 2660                      		eor		BSTK,rmp		; Complement bit stack
000308 9508                      		ret
                                 ;
                                 cplbse:
                                 ;
                                 xor:
000309 4f58
00030a 1752                      		.db		"XOR",ctlW
00030b 0316                      		.dw		xore
00030c 0000                      		.dw		NORM
                                 xorL:
00030d fffc                      		.dw		(xor-xorL)
                                 ;
                                 ixor:
00030e 2d06                      		mov		rmp,BSTK	; Copy BSTK to rmp
00030f 9506                      		lsr		rmp			; Operand bits in bit 0 position
000310 2506                      		eor		rmp,BSTK	; Perform logical XOR
000311 9466                      		lsr		BSTK		; Drop bit stack
000312 9466                      		lsr		BSTK		; Drop bit stack
000313 9506                      		lsr		rmp			; XOR result in C
000314 1c66                      		rol		BSTK		; Push C to TOS
000315 9508                      		ret
                                 xore:
                                 ;
                                 ; --- Byte transfers to bit stack ---		(OK)
                                 ;
                                +
                                +gbyts :
000316 4150
000317 172e                     +		.db "PA." , ctlW
000318 031e                     +		.dw gbytx
000319 0000                     +		.dw NORM
                                +gbytL :
00031a fffc                     +		.dw ( gbyts - gbytL )
                                +
00031b 9060 034f                +lds BSTK , PA
00031d 9508                     +ret
                                +gbytx :
                                 		gbyt	PA,"PA."
                                +
                                +gbyts :
00031e 5550
00031f 172e                     +		.db "PU." , ctlW
000320 0326                     +		.dw gbytx
000321 0000                     +		.dw NORM
                                +gbytL :
000322 fffc                     +		.dw ( gbyts - gbytL )
                                +
000323 9060 0353                +lds BSTK , PU
000325 9508                     +ret
                                +gbytx :
                                 		gbyt	PU,"PU."
                                +
                                +gbyts :
000326 5650
000327 172e                     +		.db "PV." , ctlW
000328 032e                     +		.dw gbytx
000329 0000                     +		.dw NORM
                                +gbytL :
00032a fffc                     +		.dw ( gbyts - gbytL )
                                +
00032b 9060 0354                +lds BSTK , PV
00032d 9508                     +ret
                                +gbytx :
                                 		gbyt	PV,"PV."
                                +
                                +gbyts :
00032e 5950
00032f 172e                     +		.db "PY." , ctlW
000330 0336                     +		.dw gbytx
000331 0000                     +		.dw NORM
                                +gbytL :
000332 fffc                     +		.dw ( gbyts - gbytL )
                                +
000333 9060 0351                +lds BSTK , PY
000335 9508                     +ret
                                +gbytx :
                                 		gbyt	PY,"PY."
                                 ;
                                 ; --- Bit stack transfers to bytes ---		(OK)
                                 ;
                                +
                                +pbyts :
000336 502e
000337 1741                     +		.db ".PA" , ctlW
000338 033e                     +		.dw pbytx
000339 0000                     +		.dw NORM
                                +pbytL :
00033a fffc                     +		.dw ( pbyts - pbytL )
                                +
00033b 9260 034f                +sts PA , BSTK
00033d 9508                     +ret
                                +pbytx :
                                 		pbyt	PA,".PA"
                                +
                                +pbyts :
00033e 502e
00033f 1755                     +		.db ".PU" , ctlW
000340 0346                     +		.dw pbytx
000341 0000                     +		.dw NORM
                                +pbytL :
000342 fffc                     +		.dw ( pbyts - pbytL )
                                +
000343 9260 0353                +sts PU , BSTK
000345 9508                     +ret
                                +pbytx :
                                 		pbyt	PU,".PU"
                                +
                                +pbyts :
000346 502e
000347 1756                     +		.db ".PV" , ctlW
000348 034e                     +		.dw pbytx
000349 0000                     +		.dw NORM
                                +pbytL :
00034a fffc                     +		.dw ( pbyts - pbytL )
                                +
00034b 9260 0354                +sts PV , BSTK
00034d 9508                     +ret
                                +pbytx :
                                 		pbyt	PV,".PV"
                                +
                                +pbyts :
00034e 502e
00034f 1759                     +		.db ".PY" , ctlW
000350 0356                     +		.dw pbytx
000351 0000                     +		.dw NORM
                                +pbytL :
000352 fffc                     +		.dw ( pbyts - pbytL )
                                +
000353 9260 0351                +sts PY , BSTK
000355 9508                     +ret
                                +pbytx :
                                 		pbyt	PY,".PY"
                                 ;
                                 ; --- Tile defined bits ---		(OK)
                                 ;
                                 ; Software internal clock bits
                                 ;
                                +
                                +gbits :
000356 4c43
000357 414b
000358 172e                     +		.db "CLKA." , ctlW
000359 0362                     +		.dw gbite
00035a 0000                     +		.dw NORM
                                +gbitL :
00035b fffb                     +		.dw ( gbits - gbitL )
                                +
00035c fb90                     +bst flagb , clkaf
00035d 9408                     +sec
00035e f00e                     +brts gbit1
00035f 9488                     +clc
                                +gbit1 :
000360 1c66                     +rol BSTK
000361 9508                     +ret
                                +gbite :
                                 		gbit	clkaf,flagb,"CLKA."		; Get CLKA bit, 100 ms
                                +
                                +gbits :
000362 4c43
000363 424b
000364 172e                     +		.db "CLKB." , ctlW
000365 036e                     +		.dw gbite
000366 0000                     +		.dw NORM
                                +gbitL :
000367 fffb                     +		.dw ( gbits - gbitL )
                                +
000368 fb91                     +bst flagb , clkbf
000369 9408                     +sec
00036a f00e                     +brts gbit1
00036b 9488                     +clc
                                +gbit1 :
00036c 1c66                     +rol BSTK
00036d 9508                     +ret
                                +gbite :
                                 		gbit	clkbf,flagb,"CLKB."		; Get CLKB bit, 600 ms
                                +
                                +gbits :
00036e 4c43
00036f 434b
000370 172e                     +		.db "CLKC." , ctlW
000371 037a                     +		.dw gbite
000372 0000                     +		.dw NORM
                                +gbitL :
000373 fffb                     +		.dw ( gbits - gbitL )
                                +
000374 fb92                     +bst flagb , clkcf
000375 9408                     +sec
000376 f00e                     +brts gbit1
000377 9488                     +clc
                                +gbit1 :
000378 1c66                     +rol BSTK
000379 9508                     +ret
                                +gbite :
                                 		gbit	clkcf,flagb,"CLKC."		; Get CLKC bit, 1200 ms
                                 ;
                                 ; Port A input bits
                                 ;
                                +
                                +gvbits :
00037a 3041
00037b 172e                     +		.db "A0." , ctlW
00037c 0387                     +		.dw gvbite
00037d 0000                     +		.dw NORM
                                +gvbitL :
00037e fffc                     +		.dw ( gvbits - gvbitL )
                                +
00037f 9100 034f                +lds rmp , PA
000381 fb00                     +bst rmp , A0
000382 9408                     +sec
000383 f00e                     +brts gvbit1
000384 9488                     +clc
                                +gvbit1 :
000385 1c66                     +rol BSTK
000386 9508                     +ret
                                +gvbite :
                                 		gvbit	A0,PA,"A0."		; Get bit A0
                                +
                                +gvbits :
000387 3141
000388 172e                     +		.db "A1." , ctlW
000389 0394                     +		.dw gvbite
00038a 0000                     +		.dw NORM
                                +gvbitL :
00038b fffc                     +		.dw ( gvbits - gvbitL )
                                +
00038c 9100 034f                +lds rmp , PA
00038e fb01                     +bst rmp , A1
00038f 9408                     +sec
000390 f00e                     +brts gvbit1
000391 9488                     +clc
                                +gvbit1 :
000392 1c66                     +rol BSTK
000393 9508                     +ret
                                +gvbite :
                                 		gvbit	A1,PA,"A1."		; Get bit A1
                                +
                                +gvbits :
000394 3241
000395 172e                     +		.db "A2." , ctlW
000396 03a1                     +		.dw gvbite
000397 0000                     +		.dw NORM
                                +gvbitL :
000398 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000399 9100 034f                +lds rmp , PA
00039b fb02                     +bst rmp , A2
00039c 9408                     +sec
00039d f00e                     +brts gvbit1
00039e 9488                     +clc
                                +gvbit1 :
00039f 1c66                     +rol BSTK
0003a0 9508                     +ret
                                +gvbite :
                                 		gvbit	A2,PA,"A2."		; Get bit A2
                                +
                                +gvbits :
0003a1 3341
0003a2 172e                     +		.db "A3." , ctlW
0003a3 03ae                     +		.dw gvbite
0003a4 0000                     +		.dw NORM
                                +gvbitL :
0003a5 fffc                     +		.dw ( gvbits - gvbitL )
                                +
0003a6 9100 034f                +lds rmp , PA
0003a8 fb03                     +bst rmp , A3
0003a9 9408                     +sec
0003aa f00e                     +brts gvbit1
0003ab 9488                     +clc
                                +gvbit1 :
0003ac 1c66                     +rol BSTK
0003ad 9508                     +ret
                                +gvbite :
                                 		gvbit	A3,PA,"A3."		; Get bit A3
                                +
                                +gvbits :
0003ae 3441
0003af 172e                     +		.db "A4." , ctlW
0003b0 03bb                     +		.dw gvbite
0003b1 0000                     +		.dw NORM
                                +gvbitL :
0003b2 fffc                     +		.dw ( gvbits - gvbitL )
                                +
0003b3 9100 034f                +lds rmp , PA
0003b5 fb04                     +bst rmp , A4
0003b6 9408                     +sec
0003b7 f00e                     +brts gvbit1
0003b8 9488                     +clc
                                +gvbit1 :
0003b9 1c66                     +rol BSTK
0003ba 9508                     +ret
                                +gvbite :
                                 		gvbit	A4,PA,"A4."		; Get bit A4
                                +
                                +gvbits :
0003bb 3541
0003bc 172e                     +		.db "A5." , ctlW
0003bd 03c8                     +		.dw gvbite
0003be 0000                     +		.dw NORM
                                +gvbitL :
0003bf fffc                     +		.dw ( gvbits - gvbitL )
                                +
0003c0 9100 034f                +lds rmp , PA
0003c2 fb05                     +bst rmp , A5
0003c3 9408                     +sec
0003c4 f00e                     +brts gvbit1
0003c5 9488                     +clc
                                +gvbit1 :
0003c6 1c66                     +rol BSTK
0003c7 9508                     +ret
                                +gvbite :
                                 		gvbit	A5,PA,"A5."		; Get bit A5
                                +
                                +gvbits :
0003c8 3641
0003c9 172e                     +		.db "A6." , ctlW
0003ca 03d5                     +		.dw gvbite
0003cb 0000                     +		.dw NORM
                                +gvbitL :
0003cc fffc                     +		.dw ( gvbits - gvbitL )
                                +
0003cd 9100 034f                +lds rmp , PA
0003cf fb06                     +bst rmp , A6
0003d0 9408                     +sec
0003d1 f00e                     +brts gvbit1
0003d2 9488                     +clc
                                +gvbit1 :
0003d3 1c66                     +rol BSTK
0003d4 9508                     +ret
                                +gvbite :
                                 		gvbit	A6,PA,"A6."		; Get bit A6
                                +
                                +gvbits :
0003d5 3741
0003d6 172e                     +		.db "A7." , ctlW
0003d7 03e2                     +		.dw gvbite
0003d8 0000                     +		.dw NORM
                                +gvbitL :
0003d9 fffc                     +		.dw ( gvbits - gvbitL )
                                +
0003da 9100 034f                +lds rmp , PA
0003dc fb07                     +bst rmp , A7
0003dd 9408                     +sec
0003de f00e                     +brts gvbit1
0003df 9488                     +clc
                                +gvbit1 :
0003e0 1c66                     +rol BSTK
0003e1 9508                     +ret
                                +gvbite :
                                 		gvbit	A7,PA,"A7."		; Get bit A7
                                 ;
                                 ; Port A +ve edge transition bits
                                 ;
                                +
                                +gbitx2s :
0003e2 4c41
0003e3 2e30
0003e4 1700                     +		.db "AL0." , 0 , ctlW
0003e5 03fe                     +		.dw gbitx2e
0003e6 0000                     +		.dw NORM
                                +gbitx2L :
0003e7 fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
0003e8 9100 006e                +lds rmp , TIMSK0
0003ea 7f0e                     +cbr rmp , 1 << TOIE0
0003eb 9300 006e                +sts TIMSK0 , rmp
                                +
0003ed 9100 0356                +lds rmp , PAL
0003ef fb00                     +bst rmp , AL0
0003f0 9408                     +sec
0003f1 f00e                     +brts gbitx21
0003f2 9488                     +clc
                                +gbitx21 :
0003f3 1c66                     +rol BSTK
0003f4 94e8                     +clt
0003f5 f900                     +bld rmp , AL0
0003f6 9300 0356                +sts PAL , rmp
                                +
0003f8 9100 006e                +lds rmp , TIMSK0
0003fa 6001                     +sbr rmp , 1 << TOIE0
0003fb 9300 006e                +sts TIMSK0 , rmp
                                +
0003fd 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AL0,PAL,"AL0."	; Get bit AL0
                                +
                                +gbitx2s :
0003fe 4c41
0003ff 2e31
000400 1700                     +		.db "AL1." , 0 , ctlW
000401 041a                     +		.dw gbitx2e
000402 0000                     +		.dw NORM
                                +gbitx2L :
000403 fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
000404 9100 006e                +lds rmp , TIMSK0
000406 7f0e                     +cbr rmp , 1 << TOIE0
000407 9300 006e                +sts TIMSK0 , rmp
                                +
000409 9100 0356                +lds rmp , PAL
00040b fb01                     +bst rmp , AL1
00040c 9408                     +sec
00040d f00e                     +brts gbitx21
00040e 9488                     +clc
                                +gbitx21 :
00040f 1c66                     +rol BSTK
000410 94e8                     +clt
000411 f901                     +bld rmp , AL1
000412 9300 0356                +sts PAL , rmp
                                +
000414 9100 006e                +lds rmp , TIMSK0
000416 6001                     +sbr rmp , 1 << TOIE0
000417 9300 006e                +sts TIMSK0 , rmp
                                +
000419 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AL1,PAL,"AL1."	; Get bit AL1
                                +
                                +gbitx2s :
00041a 4c41
00041b 2e32
00041c 1700                     +		.db "AL2." , 0 , ctlW
00041d 0436                     +		.dw gbitx2e
00041e 0000                     +		.dw NORM
                                +gbitx2L :
00041f fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
000420 9100 006e                +lds rmp , TIMSK0
000422 7f0e                     +cbr rmp , 1 << TOIE0
000423 9300 006e                +sts TIMSK0 , rmp
                                +
000425 9100 0356                +lds rmp , PAL
000427 fb02                     +bst rmp , AL2
000428 9408                     +sec
000429 f00e                     +brts gbitx21
00042a 9488                     +clc
                                +gbitx21 :
00042b 1c66                     +rol BSTK
00042c 94e8                     +clt
00042d f902                     +bld rmp , AL2
00042e 9300 0356                +sts PAL , rmp
                                +
000430 9100 006e                +lds rmp , TIMSK0
000432 6001                     +sbr rmp , 1 << TOIE0
000433 9300 006e                +sts TIMSK0 , rmp
                                +
000435 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AL2,PAL,"AL2."	; Get bit AL2
                                +
                                +gbitx2s :
000436 4c41
000437 2e33
000438 1700                     +		.db "AL3." , 0 , ctlW
000439 0452                     +		.dw gbitx2e
00043a 0000                     +		.dw NORM
                                +gbitx2L :
00043b fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
00043c 9100 006e                +lds rmp , TIMSK0
00043e 7f0e                     +cbr rmp , 1 << TOIE0
00043f 9300 006e                +sts TIMSK0 , rmp
                                +
000441 9100 0356                +lds rmp , PAL
000443 fb03                     +bst rmp , AL3
000444 9408                     +sec
000445 f00e                     +brts gbitx21
000446 9488                     +clc
                                +gbitx21 :
000447 1c66                     +rol BSTK
000448 94e8                     +clt
000449 f903                     +bld rmp , AL3
00044a 9300 0356                +sts PAL , rmp
                                +
00044c 9100 006e                +lds rmp , TIMSK0
00044e 6001                     +sbr rmp , 1 << TOIE0
00044f 9300 006e                +sts TIMSK0 , rmp
                                +
000451 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AL3,PAL,"AL3."	; Get bit AL3
                                +
                                +gbitx2s :
000452 4c41
000453 2e34
000454 1700                     +		.db "AL4." , 0 , ctlW
000455 046e                     +		.dw gbitx2e
000456 0000                     +		.dw NORM
                                +gbitx2L :
000457 fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
000458 9100 006e                +lds rmp , TIMSK0
00045a 7f0e                     +cbr rmp , 1 << TOIE0
00045b 9300 006e                +sts TIMSK0 , rmp
                                +
00045d 9100 0356                +lds rmp , PAL
00045f fb04                     +bst rmp , AL4
000460 9408                     +sec
000461 f00e                     +brts gbitx21
000462 9488                     +clc
                                +gbitx21 :
000463 1c66                     +rol BSTK
000464 94e8                     +clt
000465 f904                     +bld rmp , AL4
000466 9300 0356                +sts PAL , rmp
                                +
000468 9100 006e                +lds rmp , TIMSK0
00046a 6001                     +sbr rmp , 1 << TOIE0
00046b 9300 006e                +sts TIMSK0 , rmp
                                +
00046d 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AL4,PAL,"AL4."	; Get bit AL4
                                +
                                +gbitx2s :
00046e 4c41
00046f 2e35
000470 1700                     +		.db "AL5." , 0 , ctlW
000471 048a                     +		.dw gbitx2e
000472 0000                     +		.dw NORM
                                +gbitx2L :
000473 fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
000474 9100 006e                +lds rmp , TIMSK0
000476 7f0e                     +cbr rmp , 1 << TOIE0
000477 9300 006e                +sts TIMSK0 , rmp
                                +
000479 9100 0356                +lds rmp , PAL
00047b fb05                     +bst rmp , AL5
00047c 9408                     +sec
00047d f00e                     +brts gbitx21
00047e 9488                     +clc
                                +gbitx21 :
00047f 1c66                     +rol BSTK
000480 94e8                     +clt
000481 f905                     +bld rmp , AL5
000482 9300 0356                +sts PAL , rmp
                                +
000484 9100 006e                +lds rmp , TIMSK0
000486 6001                     +sbr rmp , 1 << TOIE0
000487 9300 006e                +sts TIMSK0 , rmp
                                +
000489 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AL5,PAL,"AL5."	; Get bit AL5
                                +
                                +gbitx2s :
00048a 4c41
00048b 2e36
00048c 1700                     +		.db "AL6." , 0 , ctlW
00048d 04a6                     +		.dw gbitx2e
00048e 0000                     +		.dw NORM
                                +gbitx2L :
00048f fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
000490 9100 006e                +lds rmp , TIMSK0
000492 7f0e                     +cbr rmp , 1 << TOIE0
000493 9300 006e                +sts TIMSK0 , rmp
                                +
000495 9100 0356                +lds rmp , PAL
000497 fb06                     +bst rmp , AL6
000498 9408                     +sec
000499 f00e                     +brts gbitx21
00049a 9488                     +clc
                                +gbitx21 :
00049b 1c66                     +rol BSTK
00049c 94e8                     +clt
00049d f906                     +bld rmp , AL6
00049e 9300 0356                +sts PAL , rmp
                                +
0004a0 9100 006e                +lds rmp , TIMSK0
0004a2 6001                     +sbr rmp , 1 << TOIE0
0004a3 9300 006e                +sts TIMSK0 , rmp
                                +
0004a5 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AL6,PAL,"AL6."	; Get bit AL6
                                +
                                +gbitx2s :
0004a6 4c41
0004a7 2e37
0004a8 1700                     +		.db "AL7." , 0 , ctlW
0004a9 04c2                     +		.dw gbitx2e
0004aa 0000                     +		.dw NORM
                                +gbitx2L :
0004ab fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
0004ac 9100 006e                +lds rmp , TIMSK0
0004ae 7f0e                     +cbr rmp , 1 << TOIE0
0004af 9300 006e                +sts TIMSK0 , rmp
                                +
0004b1 9100 0356                +lds rmp , PAL
0004b3 fb07                     +bst rmp , AL7
0004b4 9408                     +sec
0004b5 f00e                     +brts gbitx21
0004b6 9488                     +clc
                                +gbitx21 :
0004b7 1c66                     +rol BSTK
0004b8 94e8                     +clt
0004b9 f907                     +bld rmp , AL7
0004ba 9300 0356                +sts PAL , rmp
                                +
0004bc 9100 006e                +lds rmp , TIMSK0
0004be 6001                     +sbr rmp , 1 << TOIE0
0004bf 9300 006e                +sts TIMSK0 , rmp
                                +
0004c1 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AL7,PAL,"AL7."	; Get bit AL7
                                 ;
                                 ; Port A -ve edge transition bits
                                 ;
                                +
                                +gbitx2s :
0004c2 5441
0004c3 2e30
0004c4 1700                     +		.db "AT0." , 0 , ctlW
0004c5 04de                     +		.dw gbitx2e
0004c6 0000                     +		.dw NORM
                                +gbitx2L :
0004c7 fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
0004c8 9100 006e                +lds rmp , TIMSK0
0004ca 7f0e                     +cbr rmp , 1 << TOIE0
0004cb 9300 006e                +sts TIMSK0 , rmp
                                +
0004cd 9100 0357                +lds rmp , PAT
0004cf fb00                     +bst rmp , AT0
0004d0 9408                     +sec
0004d1 f00e                     +brts gbitx21
0004d2 9488                     +clc
                                +gbitx21 :
0004d3 1c66                     +rol BSTK
0004d4 94e8                     +clt
0004d5 f900                     +bld rmp , AT0
0004d6 9300 0357                +sts PAT , rmp
                                +
0004d8 9100 006e                +lds rmp , TIMSK0
0004da 6001                     +sbr rmp , 1 << TOIE0
0004db 9300 006e                +sts TIMSK0 , rmp
                                +
0004dd 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AT0,PAT,"AT0."	; Get bit AT0
                                +
                                +gbitx2s :
0004de 5441
0004df 2e31
0004e0 1700                     +		.db "AT1." , 0 , ctlW
0004e1 04fa                     +		.dw gbitx2e
0004e2 0000                     +		.dw NORM
                                +gbitx2L :
0004e3 fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
0004e4 9100 006e                +lds rmp , TIMSK0
0004e6 7f0e                     +cbr rmp , 1 << TOIE0
0004e7 9300 006e                +sts TIMSK0 , rmp
                                +
0004e9 9100 0357                +lds rmp , PAT
0004eb fb01                     +bst rmp , AT1
0004ec 9408                     +sec
0004ed f00e                     +brts gbitx21
0004ee 9488                     +clc
                                +gbitx21 :
0004ef 1c66                     +rol BSTK
0004f0 94e8                     +clt
0004f1 f901                     +bld rmp , AT1
0004f2 9300 0357                +sts PAT , rmp
                                +
0004f4 9100 006e                +lds rmp , TIMSK0
0004f6 6001                     +sbr rmp , 1 << TOIE0
0004f7 9300 006e                +sts TIMSK0 , rmp
                                +
0004f9 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AT1,PAT,"AT1."	; Get bit AT1
                                +
                                +gbitx2s :
0004fa 5441
0004fb 2e32
0004fc 1700                     +		.db "AT2." , 0 , ctlW
0004fd 0516                     +		.dw gbitx2e
0004fe 0000                     +		.dw NORM
                                +gbitx2L :
0004ff fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
000500 9100 006e                +lds rmp , TIMSK0
000502 7f0e                     +cbr rmp , 1 << TOIE0
000503 9300 006e                +sts TIMSK0 , rmp
                                +
000505 9100 0357                +lds rmp , PAT
000507 fb02                     +bst rmp , AT2
000508 9408                     +sec
000509 f00e                     +brts gbitx21
00050a 9488                     +clc
                                +gbitx21 :
00050b 1c66                     +rol BSTK
00050c 94e8                     +clt
00050d f902                     +bld rmp , AT2
00050e 9300 0357                +sts PAT , rmp
                                +
000510 9100 006e                +lds rmp , TIMSK0
000512 6001                     +sbr rmp , 1 << TOIE0
000513 9300 006e                +sts TIMSK0 , rmp
                                +
000515 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AT2,PAT,"AT2."	; Get bit AT2
                                +
                                +gbitx2s :
000516 5441
000517 2e33
000518 1700                     +		.db "AT3." , 0 , ctlW
000519 0532                     +		.dw gbitx2e
00051a 0000                     +		.dw NORM
                                +gbitx2L :
00051b fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
00051c 9100 006e                +lds rmp , TIMSK0
00051e 7f0e                     +cbr rmp , 1 << TOIE0
00051f 9300 006e                +sts TIMSK0 , rmp
                                +
000521 9100 0357                +lds rmp , PAT
000523 fb03                     +bst rmp , AT3
000524 9408                     +sec
000525 f00e                     +brts gbitx21
000526 9488                     +clc
                                +gbitx21 :
000527 1c66                     +rol BSTK
000528 94e8                     +clt
000529 f903                     +bld rmp , AT3
00052a 9300 0357                +sts PAT , rmp
                                +
00052c 9100 006e                +lds rmp , TIMSK0
00052e 6001                     +sbr rmp , 1 << TOIE0
00052f 9300 006e                +sts TIMSK0 , rmp
                                +
000531 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AT3,PAT,"AT3."	; Get bit AT3
                                +
                                +gbitx2s :
000532 5441
000533 2e34
000534 1700                     +		.db "AT4." , 0 , ctlW
000535 054e                     +		.dw gbitx2e
000536 0000                     +		.dw NORM
                                +gbitx2L :
000537 fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
000538 9100 006e                +lds rmp , TIMSK0
00053a 7f0e                     +cbr rmp , 1 << TOIE0
00053b 9300 006e                +sts TIMSK0 , rmp
                                +
00053d 9100 0357                +lds rmp , PAT
00053f fb04                     +bst rmp , AT4
000540 9408                     +sec
000541 f00e                     +brts gbitx21
000542 9488                     +clc
                                +gbitx21 :
000543 1c66                     +rol BSTK
000544 94e8                     +clt
000545 f904                     +bld rmp , AT4
000546 9300 0357                +sts PAT , rmp
                                +
000548 9100 006e                +lds rmp , TIMSK0
00054a 6001                     +sbr rmp , 1 << TOIE0
00054b 9300 006e                +sts TIMSK0 , rmp
                                +
00054d 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AT4,PAT,"AT4."	; Get bit AT4
                                +
                                +gbitx2s :
00054e 5441
00054f 2e35
000550 1700                     +		.db "AT5." , 0 , ctlW
000551 056a                     +		.dw gbitx2e
000552 0000                     +		.dw NORM
                                +gbitx2L :
000553 fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
000554 9100 006e                +lds rmp , TIMSK0
000556 7f0e                     +cbr rmp , 1 << TOIE0
000557 9300 006e                +sts TIMSK0 , rmp
                                +
000559 9100 0357                +lds rmp , PAT
00055b fb05                     +bst rmp , AT5
00055c 9408                     +sec
00055d f00e                     +brts gbitx21
00055e 9488                     +clc
                                +gbitx21 :
00055f 1c66                     +rol BSTK
000560 94e8                     +clt
000561 f905                     +bld rmp , AT5
000562 9300 0357                +sts PAT , rmp
                                +
000564 9100 006e                +lds rmp , TIMSK0
000566 6001                     +sbr rmp , 1 << TOIE0
000567 9300 006e                +sts TIMSK0 , rmp
                                +
000569 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AT5,PAT,"AT5."	; Get bit AT5
                                +
                                +gbitx2s :
00056a 5441
00056b 2e36
00056c 1700                     +		.db "AT6." , 0 , ctlW
00056d 0586                     +		.dw gbitx2e
00056e 0000                     +		.dw NORM
                                +gbitx2L :
00056f fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
000570 9100 006e                +lds rmp , TIMSK0
000572 7f0e                     +cbr rmp , 1 << TOIE0
000573 9300 006e                +sts TIMSK0 , rmp
                                +
000575 9100 0357                +lds rmp , PAT
000577 fb06                     +bst rmp , AT6
000578 9408                     +sec
000579 f00e                     +brts gbitx21
00057a 9488                     +clc
                                +gbitx21 :
00057b 1c66                     +rol BSTK
00057c 94e8                     +clt
00057d f906                     +bld rmp , AT6
00057e 9300 0357                +sts PAT , rmp
                                +
000580 9100 006e                +lds rmp , TIMSK0
000582 6001                     +sbr rmp , 1 << TOIE0
000583 9300 006e                +sts TIMSK0 , rmp
                                +
000585 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AT6,PAT,"AT6."	; Get bit AT6
                                +
                                +gbitx2s :
000586 5441
000587 2e37
000588 1700                     +		.db "AT7." , 0 , ctlW
000589 05a2                     +		.dw gbitx2e
00058a 0000                     +		.dw NORM
                                +gbitx2L :
00058b fffb                     +		.dw ( gbitx2s - gbitx2L )
                                +
00058c 9100 006e                +lds rmp , TIMSK0
00058e 7f0e                     +cbr rmp , 1 << TOIE0
00058f 9300 006e                +sts TIMSK0 , rmp
                                +
000591 9100 0357                +lds rmp , PAT
000593 fb07                     +bst rmp , AT7
000594 9408                     +sec
000595 f00e                     +brts gbitx21
000596 9488                     +clc
                                +gbitx21 :
000597 1c66                     +rol BSTK
000598 94e8                     +clt
000599 f907                     +bld rmp , AT7
00059a 9300 0357                +sts PAT , rmp
                                +
00059c 9100 006e                +lds rmp , TIMSK0
00059e 6001                     +sbr rmp , 1 << TOIE0
00059f 9300 006e                +sts TIMSK0 , rmp
                                +
0005a1 9508                     +ret
                                +gbitx2e :
                                 		gbitx2	AT7,PAT,"AT7."	; Get bit AT7
                                 ;
                                 ; Port A double action bits
                                 ;
                                +
                                +gvbit2s :
0005a2 4441
0005a3 2e30
0005a4 1700                     +		.db "AD0." , 0 , ctlW
0005a5 05b0                     +		.dw gvbit2e
0005a6 0000                     +		.dw NORM
                                +gvbit2L :
0005a7 fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
0005a8 9100 0358                +lds rmp , PAD
0005aa fb00                     +bst rmp , AD0
0005ab 9408                     +sec
0005ac f00e                     +brts gvbit21
0005ad 9488                     +clc
                                +gvbit21 :
0005ae 1c66                     +rol BSTK
0005af 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	AD0,PAD,"AD0.",0	; Get bit AD0
                                +
                                +gvbit2s :
0005b0 4441
0005b1 2e31
0005b2 1700                     +		.db "AD1." , 0 , ctlW
0005b3 05be                     +		.dw gvbit2e
0005b4 0000                     +		.dw NORM
                                +gvbit2L :
0005b5 fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
0005b6 9100 0358                +lds rmp , PAD
0005b8 fb01                     +bst rmp , AD1
0005b9 9408                     +sec
0005ba f00e                     +brts gvbit21
0005bb 9488                     +clc
                                +gvbit21 :
0005bc 1c66                     +rol BSTK
0005bd 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	AD1,PAD,"AD1.",0	; Get bit AD1
                                +
                                +gvbit2s :
0005be 4441
0005bf 2e32
0005c0 1700                     +		.db "AD2." , 0 , ctlW
0005c1 05cc                     +		.dw gvbit2e
0005c2 0000                     +		.dw NORM
                                +gvbit2L :
0005c3 fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
0005c4 9100 0358                +lds rmp , PAD
0005c6 fb02                     +bst rmp , AD2
0005c7 9408                     +sec
0005c8 f00e                     +brts gvbit21
0005c9 9488                     +clc
                                +gvbit21 :
0005ca 1c66                     +rol BSTK
0005cb 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	AD2,PAD,"AD2.",0	; Get bit AD2
                                +
                                +gvbit2s :
0005cc 4441
0005cd 2e33
0005ce 1700                     +		.db "AD3." , 0 , ctlW
0005cf 05da                     +		.dw gvbit2e
0005d0 0000                     +		.dw NORM
                                +gvbit2L :
0005d1 fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
0005d2 9100 0358                +lds rmp , PAD
0005d4 fb03                     +bst rmp , AD3
0005d5 9408                     +sec
0005d6 f00e                     +brts gvbit21
0005d7 9488                     +clc
                                +gvbit21 :
0005d8 1c66                     +rol BSTK
0005d9 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	AD3,PAD,"AD3.",0	; Get bit AD3
                                +
                                +gvbit2s :
0005da 4441
0005db 2e34
0005dc 1700                     +		.db "AD4." , 0 , ctlW
0005dd 05e8                     +		.dw gvbit2e
0005de 0000                     +		.dw NORM
                                +gvbit2L :
0005df fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
0005e0 9100 0358                +lds rmp , PAD
0005e2 fb04                     +bst rmp , AD4
0005e3 9408                     +sec
0005e4 f00e                     +brts gvbit21
0005e5 9488                     +clc
                                +gvbit21 :
0005e6 1c66                     +rol BSTK
0005e7 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	AD4,PAD,"AD4.",0	; Get bit AD4
                                +
                                +gvbit2s :
0005e8 4441
0005e9 2e35
0005ea 1700                     +		.db "AD5." , 0 , ctlW
0005eb 05f6                     +		.dw gvbit2e
0005ec 0000                     +		.dw NORM
                                +gvbit2L :
0005ed fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
0005ee 9100 0358                +lds rmp , PAD
0005f0 fb05                     +bst rmp , AD5
0005f1 9408                     +sec
0005f2 f00e                     +brts gvbit21
0005f3 9488                     +clc
                                +gvbit21 :
0005f4 1c66                     +rol BSTK
0005f5 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	AD5,PAD,"AD5.",0	; Get bit AD5
                                +
                                +gvbit2s :
0005f6 4441
0005f7 2e36
0005f8 1700                     +		.db "AD6." , 0 , ctlW
0005f9 0604                     +		.dw gvbit2e
0005fa 0000                     +		.dw NORM
                                +gvbit2L :
0005fb fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
0005fc 9100 0358                +lds rmp , PAD
0005fe fb06                     +bst rmp , AD6
0005ff 9408                     +sec
000600 f00e                     +brts gvbit21
000601 9488                     +clc
                                +gvbit21 :
000602 1c66                     +rol BSTK
000603 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	AD6,PAD,"AD6.",0	; Get bit AD6
                                +
                                +gvbit2s :
000604 4441
000605 2e37
000606 1700                     +		.db "AD7." , 0 , ctlW
000607 0612                     +		.dw gvbit2e
000608 0000                     +		.dw NORM
                                +gvbit2L :
000609 fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
00060a 9100 0358                +lds rmp , PAD
00060c fb07                     +bst rmp , AD7
00060d 9408                     +sec
00060e f00e                     +brts gvbit21
00060f 9488                     +clc
                                +gvbit21 :
000610 1c66                     +rol BSTK
000611 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	AD7,PAD,"AD7.",0	; Get bit AD7
                                +
                                +gvbits :
000612 3055
000613 172e                     +		.db "U0." , ctlW
000614 061f                     +		.dw gvbite
000615 0000                     +		.dw NORM
                                +gvbitL :
000616 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000617 9100 0353                +lds rmp , PU
000619 fb00                     +bst rmp , U0
00061a 9408                     +sec
00061b f00e                     +brts gvbit1
00061c 9488                     +clc
                                +gvbit1 :
00061d 1c66                     +rol BSTK
00061e 9508                     +ret
                                +gvbite :
                                 		gvbit	U0,PU,"U0."		; Get bit U0
                                +
                                +gvbits :
00061f 3155
000620 172e                     +		.db "U1." , ctlW
000621 062c                     +		.dw gvbite
000622 0000                     +		.dw NORM
                                +gvbitL :
000623 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000624 9100 0353                +lds rmp , PU
000626 fb01                     +bst rmp , U1
000627 9408                     +sec
000628 f00e                     +brts gvbit1
000629 9488                     +clc
                                +gvbit1 :
00062a 1c66                     +rol BSTK
00062b 9508                     +ret
                                +gvbite :
                                 		gvbit	U1,PU,"U1."		; Get bit U1
                                +
                                +gvbits :
00062c 3255
00062d 172e                     +		.db "U2." , ctlW
00062e 0639                     +		.dw gvbite
00062f 0000                     +		.dw NORM
                                +gvbitL :
000630 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000631 9100 0353                +lds rmp , PU
000633 fb02                     +bst rmp , U2
000634 9408                     +sec
000635 f00e                     +brts gvbit1
000636 9488                     +clc
                                +gvbit1 :
000637 1c66                     +rol BSTK
000638 9508                     +ret
                                +gvbite :
                                 		gvbit	U2,PU,"U2."		; Get bit U2
                                +
                                +gvbits :
000639 3355
00063a 172e                     +		.db "U3." , ctlW
00063b 0646                     +		.dw gvbite
00063c 0000                     +		.dw NORM
                                +gvbitL :
00063d fffc                     +		.dw ( gvbits - gvbitL )
                                +
00063e 9100 0353                +lds rmp , PU
000640 fb03                     +bst rmp , U3
000641 9408                     +sec
000642 f00e                     +brts gvbit1
000643 9488                     +clc
                                +gvbit1 :
000644 1c66                     +rol BSTK
000645 9508                     +ret
                                +gvbite :
                                 		gvbit	U3,PU,"U3."		; Get bit U3
                                +
                                +gvbits :
000646 3455
000647 172e                     +		.db "U4." , ctlW
000648 0653                     +		.dw gvbite
000649 0000                     +		.dw NORM
                                +gvbitL :
00064a fffc                     +		.dw ( gvbits - gvbitL )
                                +
00064b 9100 0353                +lds rmp , PU
00064d fb04                     +bst rmp , U4
00064e 9408                     +sec
00064f f00e                     +brts gvbit1
000650 9488                     +clc
                                +gvbit1 :
000651 1c66                     +rol BSTK
000652 9508                     +ret
                                +gvbite :
                                 		gvbit	U4,PU,"U4."		; Get bit U4
                                +
                                +gvbits :
000653 3555
000654 172e                     +		.db "U5." , ctlW
000655 0660                     +		.dw gvbite
000656 0000                     +		.dw NORM
                                +gvbitL :
000657 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000658 9100 0353                +lds rmp , PU
00065a fb05                     +bst rmp , U5
00065b 9408                     +sec
00065c f00e                     +brts gvbit1
00065d 9488                     +clc
                                +gvbit1 :
00065e 1c66                     +rol BSTK
00065f 9508                     +ret
                                +gvbite :
                                 		gvbit	U5,PU,"U5."		; Get bit U5
                                +
                                +gvbits :
000660 3655
000661 172e                     +		.db "U6." , ctlW
000662 066d                     +		.dw gvbite
000663 0000                     +		.dw NORM
                                +gvbitL :
000664 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000665 9100 0353                +lds rmp , PU
000667 fb06                     +bst rmp , U6
000668 9408                     +sec
000669 f00e                     +brts gvbit1
00066a 9488                     +clc
                                +gvbit1 :
00066b 1c66                     +rol BSTK
00066c 9508                     +ret
                                +gvbite :
                                 		gvbit	U6,PU,"U6."		; Get bit U6
                                +
                                +gvbits :
00066d 3755
00066e 172e                     +		.db "U7." , ctlW
00066f 067a                     +		.dw gvbite
000670 0000                     +		.dw NORM
                                +gvbitL :
000671 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000672 9100 0353                +lds rmp , PU
000674 fb07                     +bst rmp , U7
000675 9408                     +sec
000676 f00e                     +brts gvbit1
000677 9488                     +clc
                                +gvbit1 :
000678 1c66                     +rol BSTK
000679 9508                     +ret
                                +gvbite :
                                 		gvbit	U7,PU,"U7."		; Get bit U7
                                 ;
                                +
                                +pvbits :
00067a 552e
00067b 1730                     +		.db ".U0" , ctlW
00067c 0689                     +		.dw pvbite
00067d 0000                     +		.dw NORM
                                +pvbitL :
00067e fffc                     +		.dw ( pvbits - pvbitL )
                                +
00067f 9466                     +lsr BSTK
000680 94e8                     +bclr 6
000681 f408                     +brcc pvbit1
000682 9468                     +bset 6
                                +pvbit1 :
000683 9100 0353                +lds rmp , PU
000685 f900                     +bld rmp , U0
000686 9300 0353                +sts PU , rmp
000688 9508                     +ret
                                +pvbite :
                                 		pvbit	U0,PU,".U0"		; Put bit U0
                                +
                                +pvbits :
000689 552e
00068a 1731                     +		.db ".U1" , ctlW
00068b 0698                     +		.dw pvbite
00068c 0000                     +		.dw NORM
                                +pvbitL :
00068d fffc                     +		.dw ( pvbits - pvbitL )
                                +
00068e 9466                     +lsr BSTK
00068f 94e8                     +bclr 6
000690 f408                     +brcc pvbit1
000691 9468                     +bset 6
                                +pvbit1 :
000692 9100 0353                +lds rmp , PU
000694 f901                     +bld rmp , U1
000695 9300 0353                +sts PU , rmp
000697 9508                     +ret
                                +pvbite :
                                 		pvbit	U1,PU,".U1"		; Put bit U1
                                +
                                +pvbits :
000698 552e
000699 1732                     +		.db ".U2" , ctlW
00069a 06a7                     +		.dw pvbite
00069b 0000                     +		.dw NORM
                                +pvbitL :
00069c fffc                     +		.dw ( pvbits - pvbitL )
                                +
00069d 9466                     +lsr BSTK
00069e 94e8                     +bclr 6
00069f f408                     +brcc pvbit1
0006a0 9468                     +bset 6
                                +pvbit1 :
0006a1 9100 0353                +lds rmp , PU
0006a3 f902                     +bld rmp , U2
0006a4 9300 0353                +sts PU , rmp
0006a6 9508                     +ret
                                +pvbite :
                                 		pvbit	U2,PU,".U2"		; Put bit U2
                                +
                                +pvbits :
0006a7 552e
0006a8 1733                     +		.db ".U3" , ctlW
0006a9 06b6                     +		.dw pvbite
0006aa 0000                     +		.dw NORM
                                +pvbitL :
0006ab fffc                     +		.dw ( pvbits - pvbitL )
                                +
0006ac 9466                     +lsr BSTK
0006ad 94e8                     +bclr 6
0006ae f408                     +brcc pvbit1
0006af 9468                     +bset 6
                                +pvbit1 :
0006b0 9100 0353                +lds rmp , PU
0006b2 f903                     +bld rmp , U3
0006b3 9300 0353                +sts PU , rmp
0006b5 9508                     +ret
                                +pvbite :
                                 		pvbit	U3,PU,".U3"		; Put bit U3
                                +
                                +pvbits :
0006b6 552e
0006b7 1734                     +		.db ".U4" , ctlW
0006b8 06c5                     +		.dw pvbite
0006b9 0000                     +		.dw NORM
                                +pvbitL :
0006ba fffc                     +		.dw ( pvbits - pvbitL )
                                +
0006bb 9466                     +lsr BSTK
0006bc 94e8                     +bclr 6
0006bd f408                     +brcc pvbit1
0006be 9468                     +bset 6
                                +pvbit1 :
0006bf 9100 0353                +lds rmp , PU
0006c1 f904                     +bld rmp , U4
0006c2 9300 0353                +sts PU , rmp
0006c4 9508                     +ret
                                +pvbite :
                                 		pvbit	U4,PU,".U4"		; Put bit U4
                                +
                                +pvbits :
0006c5 552e
0006c6 1735                     +		.db ".U5" , ctlW
0006c7 06d4                     +		.dw pvbite
0006c8 0000                     +		.dw NORM
                                +pvbitL :
0006c9 fffc                     +		.dw ( pvbits - pvbitL )
                                +
0006ca 9466                     +lsr BSTK
0006cb 94e8                     +bclr 6
0006cc f408                     +brcc pvbit1
0006cd 9468                     +bset 6
                                +pvbit1 :
0006ce 9100 0353                +lds rmp , PU
0006d0 f905                     +bld rmp , U5
0006d1 9300 0353                +sts PU , rmp
0006d3 9508                     +ret
                                +pvbite :
                                 		pvbit	U5,PU,".U5"		; Put bit U5
                                +
                                +pvbits :
0006d4 552e
0006d5 1736                     +		.db ".U6" , ctlW
0006d6 06e3                     +		.dw pvbite
0006d7 0000                     +		.dw NORM
                                +pvbitL :
0006d8 fffc                     +		.dw ( pvbits - pvbitL )
                                +
0006d9 9466                     +lsr BSTK
0006da 94e8                     +bclr 6
0006db f408                     +brcc pvbit1
0006dc 9468                     +bset 6
                                +pvbit1 :
0006dd 9100 0353                +lds rmp , PU
0006df f906                     +bld rmp , U6
0006e0 9300 0353                +sts PU , rmp
0006e2 9508                     +ret
                                +pvbite :
                                 		pvbit	U6,PU,".U6"		; Put bit U6
                                +
                                +pvbits :
0006e3 552e
0006e4 1737                     +		.db ".U7" , ctlW
0006e5 06f2                     +		.dw pvbite
0006e6 0000                     +		.dw NORM
                                +pvbitL :
0006e7 fffc                     +		.dw ( pvbits - pvbitL )
                                +
0006e8 9466                     +lsr BSTK
0006e9 94e8                     +bclr 6
0006ea f408                     +brcc pvbit1
0006eb 9468                     +bset 6
                                +pvbit1 :
0006ec 9100 0353                +lds rmp , PU
0006ee f907                     +bld rmp , U7
0006ef 9300 0353                +sts PU , rmp
0006f1 9508                     +ret
                                +pvbite :
                                 		pvbit	U7,PU,".U7"		; Put bit U7
                                 ;
                                 ; Port V internal storage bits
                                 ;
                                +
                                +gvbits :
0006f2 3056
0006f3 172e                     +		.db "V0." , ctlW
0006f4 06ff                     +		.dw gvbite
0006f5 0000                     +		.dw NORM
                                +gvbitL :
0006f6 fffc                     +		.dw ( gvbits - gvbitL )
                                +
0006f7 9100 0354                +lds rmp , PV
0006f9 fb00                     +bst rmp , V0
0006fa 9408                     +sec
0006fb f00e                     +brts gvbit1
0006fc 9488                     +clc
                                +gvbit1 :
0006fd 1c66                     +rol BSTK
0006fe 9508                     +ret
                                +gvbite :
                                 		gvbit	V0,PV,"V0."		; Get bit V0
                                +
                                +gvbits :
0006ff 3156
000700 172e                     +		.db "V1." , ctlW
000701 070c                     +		.dw gvbite
000702 0000                     +		.dw NORM
                                +gvbitL :
000703 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000704 9100 0354                +lds rmp , PV
000706 fb01                     +bst rmp , V1
000707 9408                     +sec
000708 f00e                     +brts gvbit1
000709 9488                     +clc
                                +gvbit1 :
00070a 1c66                     +rol BSTK
00070b 9508                     +ret
                                +gvbite :
                                 		gvbit	V1,PV,"V1."		; Get bit V1
                                +
                                +gvbits :
00070c 3256
00070d 172e                     +		.db "V2." , ctlW
00070e 0719                     +		.dw gvbite
00070f 0000                     +		.dw NORM
                                +gvbitL :
000710 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000711 9100 0354                +lds rmp , PV
000713 fb02                     +bst rmp , V2
000714 9408                     +sec
000715 f00e                     +brts gvbit1
000716 9488                     +clc
                                +gvbit1 :
000717 1c66                     +rol BSTK
000718 9508                     +ret
                                +gvbite :
                                 		gvbit	V2,PV,"V2."		; Get bit V2
                                +
                                +gvbits :
000719 3356
00071a 172e                     +		.db "V3." , ctlW
00071b 0726                     +		.dw gvbite
00071c 0000                     +		.dw NORM
                                +gvbitL :
00071d fffc                     +		.dw ( gvbits - gvbitL )
                                +
00071e 9100 0354                +lds rmp , PV
000720 fb03                     +bst rmp , V3
000721 9408                     +sec
000722 f00e                     +brts gvbit1
000723 9488                     +clc
                                +gvbit1 :
000724 1c66                     +rol BSTK
000725 9508                     +ret
                                +gvbite :
                                 		gvbit	V3,PV,"V3."		; Get bit V3
                                +
                                +gvbits :
000726 3456
000727 172e                     +		.db "V4." , ctlW
000728 0733                     +		.dw gvbite
000729 0000                     +		.dw NORM
                                +gvbitL :
00072a fffc                     +		.dw ( gvbits - gvbitL )
                                +
00072b 9100 0354                +lds rmp , PV
00072d fb04                     +bst rmp , V4
00072e 9408                     +sec
00072f f00e                     +brts gvbit1
000730 9488                     +clc
                                +gvbit1 :
000731 1c66                     +rol BSTK
000732 9508                     +ret
                                +gvbite :
                                 		gvbit	V4,PV,"V4."		; Get bit V4
                                +
                                +gvbits :
000733 3556
000734 172e                     +		.db "V5." , ctlW
000735 0740                     +		.dw gvbite
000736 0000                     +		.dw NORM
                                +gvbitL :
000737 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000738 9100 0354                +lds rmp , PV
00073a fb05                     +bst rmp , V5
00073b 9408                     +sec
00073c f00e                     +brts gvbit1
00073d 9488                     +clc
                                +gvbit1 :
00073e 1c66                     +rol BSTK
00073f 9508                     +ret
                                +gvbite :
                                 		gvbit	V5,PV,"V5."		; Get bit V5
                                +
                                +gvbits :
000740 3656
000741 172e                     +		.db "V6." , ctlW
000742 074d                     +		.dw gvbite
000743 0000                     +		.dw NORM
                                +gvbitL :
000744 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000745 9100 0354                +lds rmp , PV
000747 fb06                     +bst rmp , V6
000748 9408                     +sec
000749 f00e                     +brts gvbit1
00074a 9488                     +clc
                                +gvbit1 :
00074b 1c66                     +rol BSTK
00074c 9508                     +ret
                                +gvbite :
                                 		gvbit	V6,PV,"V6."		; Get bit V6
                                +
                                +gvbits :
00074d 3756
00074e 172e                     +		.db "V7." , ctlW
00074f 075a                     +		.dw gvbite
000750 0000                     +		.dw NORM
                                +gvbitL :
000751 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000752 9100 0354                +lds rmp , PV
000754 fb07                     +bst rmp , V7
000755 9408                     +sec
000756 f00e                     +brts gvbit1
000757 9488                     +clc
                                +gvbit1 :
000758 1c66                     +rol BSTK
000759 9508                     +ret
                                +gvbite :
                                 		gvbit	V7,PV,"V7."		; Get bit V7
                                 ;
                                +
                                +pvbits :
00075a 562e
00075b 1730                     +		.db ".V0" , ctlW
00075c 0769                     +		.dw pvbite
00075d 0000                     +		.dw NORM
                                +pvbitL :
00075e fffc                     +		.dw ( pvbits - pvbitL )
                                +
00075f 9466                     +lsr BSTK
000760 94e8                     +bclr 6
000761 f408                     +brcc pvbit1
000762 9468                     +bset 6
                                +pvbit1 :
000763 9100 0354                +lds rmp , PV
000765 f900                     +bld rmp , V0
000766 9300 0354                +sts PV , rmp
000768 9508                     +ret
                                +pvbite :
                                 		pvbit	V0,PV,".V0"		; Put bit V0
                                +
                                +pvbits :
000769 562e
00076a 1731                     +		.db ".V1" , ctlW
00076b 0778                     +		.dw pvbite
00076c 0000                     +		.dw NORM
                                +pvbitL :
00076d fffc                     +		.dw ( pvbits - pvbitL )
                                +
00076e 9466                     +lsr BSTK
00076f 94e8                     +bclr 6
000770 f408                     +brcc pvbit1
000771 9468                     +bset 6
                                +pvbit1 :
000772 9100 0354                +lds rmp , PV
000774 f901                     +bld rmp , V1
000775 9300 0354                +sts PV , rmp
000777 9508                     +ret
                                +pvbite :
                                 		pvbit	V1,PV,".V1"		; Put bit V1
                                +
                                +pvbits :
000778 562e
000779 1732                     +		.db ".V2" , ctlW
00077a 0787                     +		.dw pvbite
00077b 0000                     +		.dw NORM
                                +pvbitL :
00077c fffc                     +		.dw ( pvbits - pvbitL )
                                +
00077d 9466                     +lsr BSTK
00077e 94e8                     +bclr 6
00077f f408                     +brcc pvbit1
000780 9468                     +bset 6
                                +pvbit1 :
000781 9100 0354                +lds rmp , PV
000783 f902                     +bld rmp , V2
000784 9300 0354                +sts PV , rmp
000786 9508                     +ret
                                +pvbite :
                                 		pvbit	V2,PV,".V2"		; Put bit V2
                                +
                                +pvbits :
000787 562e
000788 1733                     +		.db ".V3" , ctlW
000789 0796                     +		.dw pvbite
00078a 0000                     +		.dw NORM
                                +pvbitL :
00078b fffc                     +		.dw ( pvbits - pvbitL )
                                +
00078c 9466                     +lsr BSTK
00078d 94e8                     +bclr 6
00078e f408                     +brcc pvbit1
00078f 9468                     +bset 6
                                +pvbit1 :
000790 9100 0354                +lds rmp , PV
000792 f903                     +bld rmp , V3
000793 9300 0354                +sts PV , rmp
000795 9508                     +ret
                                +pvbite :
                                 		pvbit	V3,PV,".V3"		; Put bit V3
                                +
                                +pvbits :
000796 562e
000797 1734                     +		.db ".V4" , ctlW
000798 07a5                     +		.dw pvbite
000799 0000                     +		.dw NORM
                                +pvbitL :
00079a fffc                     +		.dw ( pvbits - pvbitL )
                                +
00079b 9466                     +lsr BSTK
00079c 94e8                     +bclr 6
00079d f408                     +brcc pvbit1
00079e 9468                     +bset 6
                                +pvbit1 :
00079f 9100 0354                +lds rmp , PV
0007a1 f904                     +bld rmp , V4
0007a2 9300 0354                +sts PV , rmp
0007a4 9508                     +ret
                                +pvbite :
                                 		pvbit	V4,PV,".V4"		; Put bit V4
                                +
                                +pvbits :
0007a5 562e
0007a6 1735                     +		.db ".V5" , ctlW
0007a7 07b4                     +		.dw pvbite
0007a8 0000                     +		.dw NORM
                                +pvbitL :
0007a9 fffc                     +		.dw ( pvbits - pvbitL )
                                +
0007aa 9466                     +lsr BSTK
0007ab 94e8                     +bclr 6
0007ac f408                     +brcc pvbit1
0007ad 9468                     +bset 6
                                +pvbit1 :
0007ae 9100 0354                +lds rmp , PV
0007b0 f905                     +bld rmp , V5
0007b1 9300 0354                +sts PV , rmp
0007b3 9508                     +ret
                                +pvbite :
                                 		pvbit	V5,PV,".V5"		; Put bit V5
                                +
                                +pvbits :
0007b4 562e
0007b5 1736                     +		.db ".V6" , ctlW
0007b6 07c3                     +		.dw pvbite
0007b7 0000                     +		.dw NORM
                                +pvbitL :
0007b8 fffc                     +		.dw ( pvbits - pvbitL )
                                +
0007b9 9466                     +lsr BSTK
0007ba 94e8                     +bclr 6
0007bb f408                     +brcc pvbit1
0007bc 9468                     +bset 6
                                +pvbit1 :
0007bd 9100 0354                +lds rmp , PV
0007bf f906                     +bld rmp , V6
0007c0 9300 0354                +sts PV , rmp
0007c2 9508                     +ret
                                +pvbite :
                                 		pvbit	V6,PV,".V6"		; Put bit V6
                                +
                                +pvbits :
0007c3 562e
0007c4 1737                     +		.db ".V7" , ctlW
0007c5 07d2                     +		.dw pvbite
0007c6 0000                     +		.dw NORM
                                +pvbitL :
0007c7 fffc                     +		.dw ( pvbits - pvbitL )
                                +
0007c8 9466                     +lsr BSTK
0007c9 94e8                     +bclr 6
0007ca f408                     +brcc pvbit1
0007cb 9468                     +bset 6
                                +pvbit1 :
0007cc 9100 0354                +lds rmp , PV
0007ce f907                     +bld rmp , V7
0007cf 9300 0354                +sts PV , rmp
0007d1 9508                     +ret
                                +pvbite :
                                 		pvbit	V7,PV,".V7"		; Put bit V7
                                 ;
                                 ; Port Y output bits
                                 ;
                                +
                                +pvbits :
0007d2 592e
0007d3 1730                     +		.db ".Y0" , ctlW
0007d4 07e1                     +		.dw pvbite
0007d5 0000                     +		.dw NORM
                                +pvbitL :
0007d6 fffc                     +		.dw ( pvbits - pvbitL )
                                +
0007d7 9466                     +lsr BSTK
0007d8 94e8                     +bclr 6
0007d9 f408                     +brcc pvbit1
0007da 9468                     +bset 6
                                +pvbit1 :
0007db 9100 0351                +lds rmp , PY
0007dd f900                     +bld rmp , Y0
0007de 9300 0351                +sts PY , rmp
0007e0 9508                     +ret
                                +pvbite :
                                 		pvbit	Y0,PY,".Y0"		; Put bit Y0
                                +
                                +pvbits :
0007e1 592e
0007e2 1731                     +		.db ".Y1" , ctlW
0007e3 07f0                     +		.dw pvbite
0007e4 0000                     +		.dw NORM
                                +pvbitL :
0007e5 fffc                     +		.dw ( pvbits - pvbitL )
                                +
0007e6 9466                     +lsr BSTK
0007e7 94e8                     +bclr 6
0007e8 f408                     +brcc pvbit1
0007e9 9468                     +bset 6
                                +pvbit1 :
0007ea 9100 0351                +lds rmp , PY
0007ec f901                     +bld rmp , Y1
0007ed 9300 0351                +sts PY , rmp
0007ef 9508                     +ret
                                +pvbite :
                                 		pvbit	Y1,PY,".Y1"		; Put bit Y1
                                +
                                +pvbits :
0007f0 592e
0007f1 1732                     +		.db ".Y2" , ctlW
0007f2 07ff                     +		.dw pvbite
0007f3 0000                     +		.dw NORM
                                +pvbitL :
0007f4 fffc                     +		.dw ( pvbits - pvbitL )
                                +
0007f5 9466                     +lsr BSTK
0007f6 94e8                     +bclr 6
0007f7 f408                     +brcc pvbit1
0007f8 9468                     +bset 6
                                +pvbit1 :
0007f9 9100 0351                +lds rmp , PY
0007fb f902                     +bld rmp , Y2
0007fc 9300 0351                +sts PY , rmp
0007fe 9508                     +ret
                                +pvbite :
                                 		pvbit	Y2,PY,".Y2"		; Put bit Y2
                                +
                                +pvbits :
0007ff 592e
000800 1733                     +		.db ".Y3" , ctlW
000801 080e                     +		.dw pvbite
000802 0000                     +		.dw NORM
                                +pvbitL :
000803 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000804 9466                     +lsr BSTK
000805 94e8                     +bclr 6
000806 f408                     +brcc pvbit1
000807 9468                     +bset 6
                                +pvbit1 :
000808 9100 0351                +lds rmp , PY
00080a f903                     +bld rmp , Y3
00080b 9300 0351                +sts PY , rmp
00080d 9508                     +ret
                                +pvbite :
                                 		pvbit	Y3,PY,".Y3"		; Put bit Y3
                                +
                                +pvbits :
00080e 592e
00080f 1734                     +		.db ".Y4" , ctlW
000810 081d                     +		.dw pvbite
000811 0000                     +		.dw NORM
                                +pvbitL :
000812 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000813 9466                     +lsr BSTK
000814 94e8                     +bclr 6
000815 f408                     +brcc pvbit1
000816 9468                     +bset 6
                                +pvbit1 :
000817 9100 0351                +lds rmp , PY
000819 f904                     +bld rmp , Y4
00081a 9300 0351                +sts PY , rmp
00081c 9508                     +ret
                                +pvbite :
                                 		pvbit	Y4,PY,".Y4"		; Put bit Y4
                                +
                                +pvbits :
00081d 592e
00081e 1735                     +		.db ".Y5" , ctlW
00081f 082c                     +		.dw pvbite
000820 0000                     +		.dw NORM
                                +pvbitL :
000821 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000822 9466                     +lsr BSTK
000823 94e8                     +bclr 6
000824 f408                     +brcc pvbit1
000825 9468                     +bset 6
                                +pvbit1 :
000826 9100 0351                +lds rmp , PY
000828 f905                     +bld rmp , Y5
000829 9300 0351                +sts PY , rmp
00082b 9508                     +ret
                                +pvbite :
                                 		pvbit	Y5,PY,".Y5"		; Put bit Y5
                                +
                                +pvbits :
00082c 592e
00082d 1736                     +		.db ".Y6" , ctlW
00082e 083b                     +		.dw pvbite
00082f 0000                     +		.dw NORM
                                +pvbitL :
000830 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000831 9466                     +lsr BSTK
000832 94e8                     +bclr 6
000833 f408                     +brcc pvbit1
000834 9468                     +bset 6
                                +pvbit1 :
000835 9100 0351                +lds rmp , PY
000837 f906                     +bld rmp , Y6
000838 9300 0351                +sts PY , rmp
00083a 9508                     +ret
                                +pvbite :
                                 		pvbit	Y6,PY,".Y6"		; Put bit Y6
                                +
                                +pvbits :
00083b 592e
00083c 1737                     +		.db ".Y7" , ctlW
00083d 084a                     +		.dw pvbite
00083e 0000                     +		.dw NORM
                                +pvbitL :
00083f fffc                     +		.dw ( pvbits - pvbitL )
                                +
000840 9466                     +lsr BSTK
000841 94e8                     +bclr 6
000842 f408                     +brcc pvbit1
000843 9468                     +bset 6
                                +pvbit1 :
000844 9100 0351                +lds rmp , PY
000846 f907                     +bld rmp , Y7
000847 9300 0351                +sts PY , rmp
000849 9508                     +ret
                                +pvbite :
                                 		pvbit	Y7,PY,".Y7"		; Put bit Y7
                                 ;
                                 ; Flip/Flip control bits
                                 ;
                                +
                                +gvbits :
00084a 3051
00084b 172e                     +		.db "Q0." , ctlW
00084c 0857                     +		.dw gvbite
00084d 0000                     +		.dw NORM
                                +gvbitL :
00084e fffc                     +		.dw ( gvbits - gvbitL )
                                +
00084f 9100 035e                +lds rmp , VQFF_0
000851 fb00                     +bst rmp , QF0
000852 9408                     +sec
000853 f00e                     +brts gvbit1
000854 9488                     +clc
                                +gvbit1 :
000855 1c66                     +rol BSTK
000856 9508                     +ret
                                +gvbite :
                                 		gvbit	QF0,VQFF_0,"Q0."	; Get bit QF0
                                +
                                +gvbits :
000857 3151
000858 172e                     +		.db "Q1." , ctlW
000859 0864                     +		.dw gvbite
00085a 0000                     +		.dw NORM
                                +gvbitL :
00085b fffc                     +		.dw ( gvbits - gvbitL )
                                +
00085c 9100 035e                +lds rmp , VQFF_0
00085e fb01                     +bst rmp , QF1
00085f 9408                     +sec
000860 f00e                     +brts gvbit1
000861 9488                     +clc
                                +gvbit1 :
000862 1c66                     +rol BSTK
000863 9508                     +ret
                                +gvbite :
                                 		gvbit	QF1,VQFF_0,"Q1."	; Get bit QF1
                                +
                                +gvbits :
000864 3251
000865 172e                     +		.db "Q2." , ctlW
000866 0871                     +		.dw gvbite
000867 0000                     +		.dw NORM
                                +gvbitL :
000868 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000869 9100 035e                +lds rmp , VQFF_0
00086b fb02                     +bst rmp , QF2
00086c 9408                     +sec
00086d f00e                     +brts gvbit1
00086e 9488                     +clc
                                +gvbit1 :
00086f 1c66                     +rol BSTK
000870 9508                     +ret
                                +gvbite :
                                 		gvbit	QF2,VQFF_0,"Q2."	; Get bit QF2
                                +
                                +gvbits :
000871 3351
000872 172e                     +		.db "Q3." , ctlW
000873 087e                     +		.dw gvbite
000874 0000                     +		.dw NORM
                                +gvbitL :
000875 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000876 9100 035e                +lds rmp , VQFF_0
000878 fb03                     +bst rmp , QF3
000879 9408                     +sec
00087a f00e                     +brts gvbit1
00087b 9488                     +clc
                                +gvbit1 :
00087c 1c66                     +rol BSTK
00087d 9508                     +ret
                                +gvbite :
                                 		gvbit	QF3,VQFF_0,"Q3."	; Get bit QF3
                                +
                                +gvbits :
00087e 3451
00087f 172e                     +		.db "Q4." , ctlW
000880 088b                     +		.dw gvbite
000881 0000                     +		.dw NORM
                                +gvbitL :
000882 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000883 9100 035e                +lds rmp , VQFF_0
000885 fb04                     +bst rmp , QF4
000886 9408                     +sec
000887 f00e                     +brts gvbit1
000888 9488                     +clc
                                +gvbit1 :
000889 1c66                     +rol BSTK
00088a 9508                     +ret
                                +gvbite :
                                 		gvbit	QF4,VQFF_0,"Q4."	; Get bit QF4
                                +
                                +gvbits :
00088b 3551
00088c 172e                     +		.db "Q5." , ctlW
00088d 0898                     +		.dw gvbite
00088e 0000                     +		.dw NORM
                                +gvbitL :
00088f fffc                     +		.dw ( gvbits - gvbitL )
                                +
000890 9100 035e                +lds rmp , VQFF_0
000892 fb05                     +bst rmp , QF5
000893 9408                     +sec
000894 f00e                     +brts gvbit1
000895 9488                     +clc
                                +gvbit1 :
000896 1c66                     +rol BSTK
000897 9508                     +ret
                                +gvbite :
                                 		gvbit	QF5,VQFF_0,"Q5."	; Get bit QF5
                                +
                                +gvbits :
000898 3651
000899 172e                     +		.db "Q6." , ctlW
00089a 08a5                     +		.dw gvbite
00089b 0000                     +		.dw NORM
                                +gvbitL :
00089c fffc                     +		.dw ( gvbits - gvbitL )
                                +
00089d 9100 035e                +lds rmp , VQFF_0
00089f fb06                     +bst rmp , QF6
0008a0 9408                     +sec
0008a1 f00e                     +brts gvbit1
0008a2 9488                     +clc
                                +gvbit1 :
0008a3 1c66                     +rol BSTK
0008a4 9508                     +ret
                                +gvbite :
                                 		gvbit	QF6,VQFF_0,"Q6."	; Get bit QF6
                                +
                                +gvbits :
0008a5 3751
0008a6 172e                     +		.db "Q7." , ctlW
0008a7 08b2                     +		.dw gvbite
0008a8 0000                     +		.dw NORM
                                +gvbitL :
0008a9 fffc                     +		.dw ( gvbits - gvbitL )
                                +
0008aa 9100 035e                +lds rmp , VQFF_0
0008ac fb07                     +bst rmp , QF7
0008ad 9408                     +sec
0008ae f00e                     +brts gvbit1
0008af 9488                     +clc
                                +gvbit1 :
0008b0 1c66                     +rol BSTK
0008b1 9508                     +ret
                                +gvbite :
                                 		gvbit	QF7,VQFF_0,"Q7."	; Get bit QF7
                                 ;
                                +
                                +pvbits :
0008b2 532e
0008b3 1730                     +		.db ".S0" , ctlW
0008b4 08c1                     +		.dw pvbite
0008b5 0000                     +		.dw NORM
                                +pvbitL :
0008b6 fffc                     +		.dw ( pvbits - pvbitL )
                                +
0008b7 9466                     +lsr BSTK
0008b8 94e8                     +bclr 6
0008b9 f408                     +brcc pvbit1
0008ba 9468                     +bset 6
                                +pvbit1 :
0008bb 9100 035c                +lds rmp , VSFF_0
0008bd f900                     +bld rmp , SF0
0008be 9300 035c                +sts VSFF_0 , rmp
0008c0 9508                     +ret
                                +pvbite :
                                 		pvbit	SF0,VSFF_0,".S0"	; Put bit SF0
                                +
                                +pvbits :
0008c1 532e
0008c2 1731                     +		.db ".S1" , ctlW
0008c3 08d0                     +		.dw pvbite
0008c4 0000                     +		.dw NORM
                                +pvbitL :
0008c5 fffc                     +		.dw ( pvbits - pvbitL )
                                +
0008c6 9466                     +lsr BSTK
0008c7 94e8                     +bclr 6
0008c8 f408                     +brcc pvbit1
0008c9 9468                     +bset 6
                                +pvbit1 :
0008ca 9100 035c                +lds rmp , VSFF_0
0008cc f901                     +bld rmp , SF1
0008cd 9300 035c                +sts VSFF_0 , rmp
0008cf 9508                     +ret
                                +pvbite :
                                 		pvbit	SF1,VSFF_0,".S1"	; Put bit SF1
                                +
                                +pvbits :
0008d0 532e
0008d1 1732                     +		.db ".S2" , ctlW
0008d2 08df                     +		.dw pvbite
0008d3 0000                     +		.dw NORM
                                +pvbitL :
0008d4 fffc                     +		.dw ( pvbits - pvbitL )
                                +
0008d5 9466                     +lsr BSTK
0008d6 94e8                     +bclr 6
0008d7 f408                     +brcc pvbit1
0008d8 9468                     +bset 6
                                +pvbit1 :
0008d9 9100 035c                +lds rmp , VSFF_0
0008db f902                     +bld rmp , SF2
0008dc 9300 035c                +sts VSFF_0 , rmp
0008de 9508                     +ret
                                +pvbite :
                                 		pvbit	SF2,VSFF_0,".S2"	; Put bit SF2
                                +
                                +pvbits :
0008df 532e
0008e0 1733                     +		.db ".S3" , ctlW
0008e1 08ee                     +		.dw pvbite
0008e2 0000                     +		.dw NORM
                                +pvbitL :
0008e3 fffc                     +		.dw ( pvbits - pvbitL )
                                +
0008e4 9466                     +lsr BSTK
0008e5 94e8                     +bclr 6
0008e6 f408                     +brcc pvbit1
0008e7 9468                     +bset 6
                                +pvbit1 :
0008e8 9100 035c                +lds rmp , VSFF_0
0008ea f903                     +bld rmp , SF3
0008eb 9300 035c                +sts VSFF_0 , rmp
0008ed 9508                     +ret
                                +pvbite :
                                 		pvbit	SF3,VSFF_0,".S3"	; Put bit SF3
                                +
                                +pvbits :
0008ee 532e
0008ef 1734                     +		.db ".S4" , ctlW
0008f0 08fd                     +		.dw pvbite
0008f1 0000                     +		.dw NORM
                                +pvbitL :
0008f2 fffc                     +		.dw ( pvbits - pvbitL )
                                +
0008f3 9466                     +lsr BSTK
0008f4 94e8                     +bclr 6
0008f5 f408                     +brcc pvbit1
0008f6 9468                     +bset 6
                                +pvbit1 :
0008f7 9100 035c                +lds rmp , VSFF_0
0008f9 f904                     +bld rmp , SF4
0008fa 9300 035c                +sts VSFF_0 , rmp
0008fc 9508                     +ret
                                +pvbite :
                                 		pvbit	SF4,VSFF_0,".S4"	; Put bit SF4
                                +
                                +pvbits :
0008fd 532e
0008fe 1735                     +		.db ".S5" , ctlW
0008ff 090c                     +		.dw pvbite
000900 0000                     +		.dw NORM
                                +pvbitL :
000901 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000902 9466                     +lsr BSTK
000903 94e8                     +bclr 6
000904 f408                     +brcc pvbit1
000905 9468                     +bset 6
                                +pvbit1 :
000906 9100 035c                +lds rmp , VSFF_0
000908 f905                     +bld rmp , SF5
000909 9300 035c                +sts VSFF_0 , rmp
00090b 9508                     +ret
                                +pvbite :
                                 		pvbit	SF5,VSFF_0,".S5"	; Put bit SF5
                                +
                                +pvbits :
00090c 532e
00090d 1736                     +		.db ".S6" , ctlW
00090e 091b                     +		.dw pvbite
00090f 0000                     +		.dw NORM
                                +pvbitL :
000910 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000911 9466                     +lsr BSTK
000912 94e8                     +bclr 6
000913 f408                     +brcc pvbit1
000914 9468                     +bset 6
                                +pvbit1 :
000915 9100 035c                +lds rmp , VSFF_0
000917 f906                     +bld rmp , SF6
000918 9300 035c                +sts VSFF_0 , rmp
00091a 9508                     +ret
                                +pvbite :
                                 		pvbit	SF6,VSFF_0,".S6"	; Put bit SF6
                                +
                                +pvbits :
00091b 532e
00091c 1737                     +		.db ".S7" , ctlW
00091d 092a                     +		.dw pvbite
00091e 0000                     +		.dw NORM
                                +pvbitL :
00091f fffc                     +		.dw ( pvbits - pvbitL )
                                +
000920 9466                     +lsr BSTK
000921 94e8                     +bclr 6
000922 f408                     +brcc pvbit1
000923 9468                     +bset 6
                                +pvbit1 :
000924 9100 035c                +lds rmp , VSFF_0
000926 f907                     +bld rmp , SF7
000927 9300 035c                +sts VSFF_0 , rmp
000929 9508                     +ret
                                +pvbite :
                                 		pvbit	SF7,VSFF_0,".S7"	; Put bit SF7
                                 ;
                                +
                                +pvbits :
00092a 522e
00092b 1730                     +		.db ".R0" , ctlW
00092c 0939                     +		.dw pvbite
00092d 0000                     +		.dw NORM
                                +pvbitL :
00092e fffc                     +		.dw ( pvbits - pvbitL )
                                +
00092f 9466                     +lsr BSTK
000930 94e8                     +bclr 6
000931 f408                     +brcc pvbit1
000932 9468                     +bset 6
                                +pvbit1 :
000933 9100 035d                +lds rmp , VRFF_0
000935 f900                     +bld rmp , RF0
000936 9300 035d                +sts VRFF_0 , rmp
000938 9508                     +ret
                                +pvbite :
                                 		pvbit	RF0,VRFF_0,".R0"	; Put bit RF0
                                +
                                +pvbits :
000939 522e
00093a 1731                     +		.db ".R1" , ctlW
00093b 0948                     +		.dw pvbite
00093c 0000                     +		.dw NORM
                                +pvbitL :
00093d fffc                     +		.dw ( pvbits - pvbitL )
                                +
00093e 9466                     +lsr BSTK
00093f 94e8                     +bclr 6
000940 f408                     +brcc pvbit1
000941 9468                     +bset 6
                                +pvbit1 :
000942 9100 035d                +lds rmp , VRFF_0
000944 f901                     +bld rmp , RF1
000945 9300 035d                +sts VRFF_0 , rmp
000947 9508                     +ret
                                +pvbite :
                                 		pvbit	RF1,VRFF_0,".R1"	; Put bit RF1
                                +
                                +pvbits :
000948 522e
000949 1732                     +		.db ".R2" , ctlW
00094a 0957                     +		.dw pvbite
00094b 0000                     +		.dw NORM
                                +pvbitL :
00094c fffc                     +		.dw ( pvbits - pvbitL )
                                +
00094d 9466                     +lsr BSTK
00094e 94e8                     +bclr 6
00094f f408                     +brcc pvbit1
000950 9468                     +bset 6
                                +pvbit1 :
000951 9100 035d                +lds rmp , VRFF_0
000953 f902                     +bld rmp , RF2
000954 9300 035d                +sts VRFF_0 , rmp
000956 9508                     +ret
                                +pvbite :
                                 		pvbit	RF2,VRFF_0,".R2"	; Put bit RF2
                                +
                                +pvbits :
000957 522e
000958 1733                     +		.db ".R3" , ctlW
000959 0966                     +		.dw pvbite
00095a 0000                     +		.dw NORM
                                +pvbitL :
00095b fffc                     +		.dw ( pvbits - pvbitL )
                                +
00095c 9466                     +lsr BSTK
00095d 94e8                     +bclr 6
00095e f408                     +brcc pvbit1
00095f 9468                     +bset 6
                                +pvbit1 :
000960 9100 035d                +lds rmp , VRFF_0
000962 f903                     +bld rmp , RF3
000963 9300 035d                +sts VRFF_0 , rmp
000965 9508                     +ret
                                +pvbite :
                                 		pvbit	RF3,VRFF_0,".R3"	; Put bit RF3
                                +
                                +pvbits :
000966 522e
000967 1734                     +		.db ".R4" , ctlW
000968 0975                     +		.dw pvbite
000969 0000                     +		.dw NORM
                                +pvbitL :
00096a fffc                     +		.dw ( pvbits - pvbitL )
                                +
00096b 9466                     +lsr BSTK
00096c 94e8                     +bclr 6
00096d f408                     +brcc pvbit1
00096e 9468                     +bset 6
                                +pvbit1 :
00096f 9100 035d                +lds rmp , VRFF_0
000971 f904                     +bld rmp , RF4
000972 9300 035d                +sts VRFF_0 , rmp
000974 9508                     +ret
                                +pvbite :
                                 		pvbit	RF4,VRFF_0,".R4"	; Put bit RF4
                                +
                                +pvbits :
000975 522e
000976 1735                     +		.db ".R5" , ctlW
000977 0984                     +		.dw pvbite
000978 0000                     +		.dw NORM
                                +pvbitL :
000979 fffc                     +		.dw ( pvbits - pvbitL )
                                +
00097a 9466                     +lsr BSTK
00097b 94e8                     +bclr 6
00097c f408                     +brcc pvbit1
00097d 9468                     +bset 6
                                +pvbit1 :
00097e 9100 035d                +lds rmp , VRFF_0
000980 f905                     +bld rmp , RF5
000981 9300 035d                +sts VRFF_0 , rmp
000983 9508                     +ret
                                +pvbite :
                                 		pvbit	RF5,VRFF_0,".R5"	; Put bit RF5
                                +
                                +pvbits :
000984 522e
000985 1736                     +		.db ".R6" , ctlW
000986 0993                     +		.dw pvbite
000987 0000                     +		.dw NORM
                                +pvbitL :
000988 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000989 9466                     +lsr BSTK
00098a 94e8                     +bclr 6
00098b f408                     +brcc pvbit1
00098c 9468                     +bset 6
                                +pvbit1 :
00098d 9100 035d                +lds rmp , VRFF_0
00098f f906                     +bld rmp , RF6
000990 9300 035d                +sts VRFF_0 , rmp
000992 9508                     +ret
                                +pvbite :
                                 		pvbit	RF6,VRFF_0,".R6"	; Put bit RF6
                                +
                                +pvbits :
000993 522e
000994 1737                     +		.db ".R7" , ctlW
000995 09a2                     +		.dw pvbite
000996 0000                     +		.dw NORM
                                +pvbitL :
000997 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000998 9466                     +lsr BSTK
000999 94e8                     +bclr 6
00099a f408                     +brcc pvbit1
00099b 9468                     +bset 6
                                +pvbit1 :
00099c 9100 035d                +lds rmp , VRFF_0
00099e f907                     +bld rmp , RF7
00099f 9300 035d                +sts VRFF_0 , rmp
0009a1 9508                     +ret
                                +pvbite :
                                 		pvbit	RF7,VRFF_0,".R7"	; Put bit RF7
                                 ;
                                +
                                +gvbits :
0009a2 3851
0009a3 172e                     +		.db "Q8." , ctlW
0009a4 09af                     +		.dw gvbite
0009a5 0000                     +		.dw NORM
                                +gvbitL :
0009a6 fffc                     +		.dw ( gvbits - gvbitL )
                                +
0009a7 9100 0361                +lds rmp , VQFF_1
0009a9 fb00                     +bst rmp , QF8
0009aa 9408                     +sec
0009ab f00e                     +brts gvbit1
0009ac 9488                     +clc
                                +gvbit1 :
0009ad 1c66                     +rol BSTK
0009ae 9508                     +ret
                                +gvbite :
                                 		gvbit	QF8,VQFF_1,"Q8."	; Get bit QF8
                                +
                                +gvbits :
0009af 3951
0009b0 172e                     +		.db "Q9." , ctlW
0009b1 09bc                     +		.dw gvbite
0009b2 0000                     +		.dw NORM
                                +gvbitL :
0009b3 fffc                     +		.dw ( gvbits - gvbitL )
                                +
0009b4 9100 0361                +lds rmp , VQFF_1
0009b6 fb01                     +bst rmp , QF9
0009b7 9408                     +sec
0009b8 f00e                     +brts gvbit1
0009b9 9488                     +clc
                                +gvbit1 :
0009ba 1c66                     +rol BSTK
0009bb 9508                     +ret
                                +gvbite :
                                 		gvbit	QF9,VQFF_1,"Q9."	; Get bit QF9
                                +
                                +gvbits :
0009bc 4151
0009bd 172e                     +		.db "QA." , ctlW
0009be 09c9                     +		.dw gvbite
0009bf 0000                     +		.dw NORM
                                +gvbitL :
0009c0 fffc                     +		.dw ( gvbits - gvbitL )
                                +
0009c1 9100 0361                +lds rmp , VQFF_1
0009c3 fb02                     +bst rmp , QFA
0009c4 9408                     +sec
0009c5 f00e                     +brts gvbit1
0009c6 9488                     +clc
                                +gvbit1 :
0009c7 1c66                     +rol BSTK
0009c8 9508                     +ret
                                +gvbite :
                                 		gvbit	QFA,VQFF_1,"QA."	; Get bit QFA
                                +
                                +gvbits :
0009c9 4251
0009ca 172e                     +		.db "QB." , ctlW
0009cb 09d6                     +		.dw gvbite
0009cc 0000                     +		.dw NORM
                                +gvbitL :
0009cd fffc                     +		.dw ( gvbits - gvbitL )
                                +
0009ce 9100 0361                +lds rmp , VQFF_1
0009d0 fb03                     +bst rmp , QFB
0009d1 9408                     +sec
0009d2 f00e                     +brts gvbit1
0009d3 9488                     +clc
                                +gvbit1 :
0009d4 1c66                     +rol BSTK
0009d5 9508                     +ret
                                +gvbite :
                                 		gvbit	QFB,VQFF_1,"QB."	; Get bit QFB
                                +
                                +gvbits :
0009d6 4351
0009d7 172e                     +		.db "QC." , ctlW
0009d8 09e3                     +		.dw gvbite
0009d9 0000                     +		.dw NORM
                                +gvbitL :
0009da fffc                     +		.dw ( gvbits - gvbitL )
                                +
0009db 9100 0361                +lds rmp , VQFF_1
0009dd fb04                     +bst rmp , QFC
0009de 9408                     +sec
0009df f00e                     +brts gvbit1
0009e0 9488                     +clc
                                +gvbit1 :
0009e1 1c66                     +rol BSTK
0009e2 9508                     +ret
                                +gvbite :
                                 		gvbit	QFC,VQFF_1,"QC."	; Get bit QFC
                                +
                                +gvbits :
0009e3 4451
0009e4 172e                     +		.db "QD." , ctlW
0009e5 09f0                     +		.dw gvbite
0009e6 0000                     +		.dw NORM
                                +gvbitL :
0009e7 fffc                     +		.dw ( gvbits - gvbitL )
                                +
0009e8 9100 0361                +lds rmp , VQFF_1
0009ea fb05                     +bst rmp , QFD
0009eb 9408                     +sec
0009ec f00e                     +brts gvbit1
0009ed 9488                     +clc
                                +gvbit1 :
0009ee 1c66                     +rol BSTK
0009ef 9508                     +ret
                                +gvbite :
                                 		gvbit	QFD,VQFF_1,"QD."	; Get bit QFD
                                +
                                +gvbits :
0009f0 4551
0009f1 172e                     +		.db "QE." , ctlW
0009f2 09fd                     +		.dw gvbite
0009f3 0000                     +		.dw NORM
                                +gvbitL :
0009f4 fffc                     +		.dw ( gvbits - gvbitL )
                                +
0009f5 9100 0361                +lds rmp , VQFF_1
0009f7 fb06                     +bst rmp , QFE
0009f8 9408                     +sec
0009f9 f00e                     +brts gvbit1
0009fa 9488                     +clc
                                +gvbit1 :
0009fb 1c66                     +rol BSTK
0009fc 9508                     +ret
                                +gvbite :
                                 		gvbit	QFE,VQFF_1,"QE."	; Get bit QFE
                                +
                                +gvbits :
0009fd 4651
0009fe 172e                     +		.db "QF." , ctlW
0009ff 0a0a                     +		.dw gvbite
000a00 0000                     +		.dw NORM
                                +gvbitL :
000a01 fffc                     +		.dw ( gvbits - gvbitL )
                                +
000a02 9100 0361                +lds rmp , VQFF_1
000a04 fb07                     +bst rmp , QFF
000a05 9408                     +sec
000a06 f00e                     +brts gvbit1
000a07 9488                     +clc
                                +gvbit1 :
000a08 1c66                     +rol BSTK
000a09 9508                     +ret
                                +gvbite :
                                 		gvbit	QFF,VQFF_1,"QF."	; Get bit QFF
                                 ;
                                +
                                +pvbits :
000a0a 532e
000a0b 1738                     +		.db ".S8" , ctlW
000a0c 0a19                     +		.dw pvbite
000a0d 0000                     +		.dw NORM
                                +pvbitL :
000a0e fffc                     +		.dw ( pvbits - pvbitL )
                                +
000a0f 9466                     +lsr BSTK
000a10 94e8                     +bclr 6
000a11 f408                     +brcc pvbit1
000a12 9468                     +bset 6
                                +pvbit1 :
000a13 9100 035f                +lds rmp , VSFF_1
000a15 f900                     +bld rmp , SF8
000a16 9300 035f                +sts VSFF_1 , rmp
000a18 9508                     +ret
                                +pvbite :
                                 		pvbit	SF8,VSFF_1,".S8"	; Put bit SF8
                                +
                                +pvbits :
000a19 532e
000a1a 1739                     +		.db ".S9" , ctlW
000a1b 0a28                     +		.dw pvbite
000a1c 0000                     +		.dw NORM
                                +pvbitL :
000a1d fffc                     +		.dw ( pvbits - pvbitL )
                                +
000a1e 9466                     +lsr BSTK
000a1f 94e8                     +bclr 6
000a20 f408                     +brcc pvbit1
000a21 9468                     +bset 6
                                +pvbit1 :
000a22 9100 035f                +lds rmp , VSFF_1
000a24 f901                     +bld rmp , SF9
000a25 9300 035f                +sts VSFF_1 , rmp
000a27 9508                     +ret
                                +pvbite :
                                 		pvbit	SF9,VSFF_1,".S9"	; Put bit SF9
                                +
                                +pvbits :
000a28 532e
000a29 1741                     +		.db ".SA" , ctlW
000a2a 0a37                     +		.dw pvbite
000a2b 0000                     +		.dw NORM
                                +pvbitL :
000a2c fffc                     +		.dw ( pvbits - pvbitL )
                                +
000a2d 9466                     +lsr BSTK
000a2e 94e8                     +bclr 6
000a2f f408                     +brcc pvbit1
000a30 9468                     +bset 6
                                +pvbit1 :
000a31 9100 035f                +lds rmp , VSFF_1
000a33 f902                     +bld rmp , SFA
000a34 9300 035f                +sts VSFF_1 , rmp
000a36 9508                     +ret
                                +pvbite :
                                 		pvbit	SFA,VSFF_1,".SA"	; Put bit SFA
                                +
                                +pvbits :
000a37 532e
000a38 1742                     +		.db ".SB" , ctlW
000a39 0a46                     +		.dw pvbite
000a3a 0000                     +		.dw NORM
                                +pvbitL :
000a3b fffc                     +		.dw ( pvbits - pvbitL )
                                +
000a3c 9466                     +lsr BSTK
000a3d 94e8                     +bclr 6
000a3e f408                     +brcc pvbit1
000a3f 9468                     +bset 6
                                +pvbit1 :
000a40 9100 035f                +lds rmp , VSFF_1
000a42 f903                     +bld rmp , SFB
000a43 9300 035f                +sts VSFF_1 , rmp
000a45 9508                     +ret
                                +pvbite :
                                 		pvbit	SFB,VSFF_1,".SB"	; Put bit SFB
                                +
                                +pvbits :
000a46 532e
000a47 1743                     +		.db ".SC" , ctlW
000a48 0a55                     +		.dw pvbite
000a49 0000                     +		.dw NORM
                                +pvbitL :
000a4a fffc                     +		.dw ( pvbits - pvbitL )
                                +
000a4b 9466                     +lsr BSTK
000a4c 94e8                     +bclr 6
000a4d f408                     +brcc pvbit1
000a4e 9468                     +bset 6
                                +pvbit1 :
000a4f 9100 035f                +lds rmp , VSFF_1
000a51 f904                     +bld rmp , SFC
000a52 9300 035f                +sts VSFF_1 , rmp
000a54 9508                     +ret
                                +pvbite :
                                 		pvbit	SFC,VSFF_1,".SC"	; Put bit SFC
                                +
                                +pvbits :
000a55 532e
000a56 1744                     +		.db ".SD" , ctlW
000a57 0a64                     +		.dw pvbite
000a58 0000                     +		.dw NORM
                                +pvbitL :
000a59 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000a5a 9466                     +lsr BSTK
000a5b 94e8                     +bclr 6
000a5c f408                     +brcc pvbit1
000a5d 9468                     +bset 6
                                +pvbit1 :
000a5e 9100 035f                +lds rmp , VSFF_1
000a60 f905                     +bld rmp , SFD
000a61 9300 035f                +sts VSFF_1 , rmp
000a63 9508                     +ret
                                +pvbite :
                                 		pvbit	SFD,VSFF_1,".SD"	; Put bit SFD
                                +
                                +pvbits :
000a64 532e
000a65 1745                     +		.db ".SE" , ctlW
000a66 0a73                     +		.dw pvbite
000a67 0000                     +		.dw NORM
                                +pvbitL :
000a68 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000a69 9466                     +lsr BSTK
000a6a 94e8                     +bclr 6
000a6b f408                     +brcc pvbit1
000a6c 9468                     +bset 6
                                +pvbit1 :
000a6d 9100 035f                +lds rmp , VSFF_1
000a6f f906                     +bld rmp , SFE
000a70 9300 035f                +sts VSFF_1 , rmp
000a72 9508                     +ret
                                +pvbite :
                                 		pvbit	SFE,VSFF_1,".SE"	; Put bit SFE
                                +
                                +pvbits :
000a73 532e
000a74 1746                     +		.db ".SF" , ctlW
000a75 0a82                     +		.dw pvbite
000a76 0000                     +		.dw NORM
                                +pvbitL :
000a77 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000a78 9466                     +lsr BSTK
000a79 94e8                     +bclr 6
000a7a f408                     +brcc pvbit1
000a7b 9468                     +bset 6
                                +pvbit1 :
000a7c 9100 035f                +lds rmp , VSFF_1
000a7e f907                     +bld rmp , SFF
000a7f 9300 035f                +sts VSFF_1 , rmp
000a81 9508                     +ret
                                +pvbite :
                                 		pvbit	SFF,VSFF_1,".SF"	; Put bit SFF
                                 ;
                                +
                                +pvbits :
000a82 522e
000a83 1738                     +		.db ".R8" , ctlW
000a84 0a91                     +		.dw pvbite
000a85 0000                     +		.dw NORM
                                +pvbitL :
000a86 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000a87 9466                     +lsr BSTK
000a88 94e8                     +bclr 6
000a89 f408                     +brcc pvbit1
000a8a 9468                     +bset 6
                                +pvbit1 :
000a8b 9100 0360                +lds rmp , VRFF_1
000a8d f900                     +bld rmp , RF8
000a8e 9300 0360                +sts VRFF_1 , rmp
000a90 9508                     +ret
                                +pvbite :
                                 		pvbit	RF8,VRFF_1,".R8"	; Put bit RF8
                                +
                                +pvbits :
000a91 522e
000a92 1739                     +		.db ".R9" , ctlW
000a93 0aa0                     +		.dw pvbite
000a94 0000                     +		.dw NORM
                                +pvbitL :
000a95 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000a96 9466                     +lsr BSTK
000a97 94e8                     +bclr 6
000a98 f408                     +brcc pvbit1
000a99 9468                     +bset 6
                                +pvbit1 :
000a9a 9100 0360                +lds rmp , VRFF_1
000a9c f901                     +bld rmp , RF9
000a9d 9300 0360                +sts VRFF_1 , rmp
000a9f 9508                     +ret
                                +pvbite :
                                 		pvbit	RF9,VRFF_1,".R9"	; Put bit RF9
                                +
                                +pvbits :
000aa0 522e
000aa1 1741                     +		.db ".RA" , ctlW
000aa2 0aaf                     +		.dw pvbite
000aa3 0000                     +		.dw NORM
                                +pvbitL :
000aa4 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000aa5 9466                     +lsr BSTK
000aa6 94e8                     +bclr 6
000aa7 f408                     +brcc pvbit1
000aa8 9468                     +bset 6
                                +pvbit1 :
000aa9 9100 0360                +lds rmp , VRFF_1
000aab f902                     +bld rmp , RFA
000aac 9300 0360                +sts VRFF_1 , rmp
000aae 9508                     +ret
                                +pvbite :
                                 		pvbit	RFA,VRFF_1,".RA"	; Put bit RFA
                                +
                                +pvbits :
000aaf 522e
000ab0 1742                     +		.db ".RB" , ctlW
000ab1 0abe                     +		.dw pvbite
000ab2 0000                     +		.dw NORM
                                +pvbitL :
000ab3 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000ab4 9466                     +lsr BSTK
000ab5 94e8                     +bclr 6
000ab6 f408                     +brcc pvbit1
000ab7 9468                     +bset 6
                                +pvbit1 :
000ab8 9100 0360                +lds rmp , VRFF_1
000aba f903                     +bld rmp , RFB
000abb 9300 0360                +sts VRFF_1 , rmp
000abd 9508                     +ret
                                +pvbite :
                                 		pvbit	RFB,VRFF_1,".RB"	; Put bit RFB
                                +
                                +pvbits :
000abe 522e
000abf 1743                     +		.db ".RC" , ctlW
000ac0 0acd                     +		.dw pvbite
000ac1 0000                     +		.dw NORM
                                +pvbitL :
000ac2 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000ac3 9466                     +lsr BSTK
000ac4 94e8                     +bclr 6
000ac5 f408                     +brcc pvbit1
000ac6 9468                     +bset 6
                                +pvbit1 :
000ac7 9100 0360                +lds rmp , VRFF_1
000ac9 f904                     +bld rmp , RFC
000aca 9300 0360                +sts VRFF_1 , rmp
000acc 9508                     +ret
                                +pvbite :
                                 		pvbit	RFC,VRFF_1,".RC"	; Put bit RFC
                                +
                                +pvbits :
000acd 522e
000ace 1744                     +		.db ".RD" , ctlW
000acf 0adc                     +		.dw pvbite
000ad0 0000                     +		.dw NORM
                                +pvbitL :
000ad1 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000ad2 9466                     +lsr BSTK
000ad3 94e8                     +bclr 6
000ad4 f408                     +brcc pvbit1
000ad5 9468                     +bset 6
                                +pvbit1 :
000ad6 9100 0360                +lds rmp , VRFF_1
000ad8 f905                     +bld rmp , RFD
000ad9 9300 0360                +sts VRFF_1 , rmp
000adb 9508                     +ret
                                +pvbite :
                                 		pvbit	RFD,VRFF_1,".RD"	; Put bit RFD
                                +
                                +pvbits :
000adc 522e
000add 1745                     +		.db ".RE" , ctlW
000ade 0aeb                     +		.dw pvbite
000adf 0000                     +		.dw NORM
                                +pvbitL :
000ae0 fffc                     +		.dw ( pvbits - pvbitL )
                                +
000ae1 9466                     +lsr BSTK
000ae2 94e8                     +bclr 6
000ae3 f408                     +brcc pvbit1
000ae4 9468                     +bset 6
                                +pvbit1 :
000ae5 9100 0360                +lds rmp , VRFF_1
000ae7 f906                     +bld rmp , RFE
000ae8 9300 0360                +sts VRFF_1 , rmp
000aea 9508                     +ret
                                +pvbite :
                                 		pvbit	RFE,VRFF_1,".RE"	; Put bit RFE
                                +
                                +pvbits :
000aeb 522e
000aec 1746                     +		.db ".RF" , ctlW
000aed 0afa                     +		.dw pvbite
000aee 0000                     +		.dw NORM
                                +pvbitL :
000aef fffc                     +		.dw ( pvbits - pvbitL )
                                +
000af0 9466                     +lsr BSTK
000af1 94e8                     +bclr 6
000af2 f408                     +brcc pvbit1
000af3 9468                     +bset 6
                                +pvbit1 :
000af4 9100 0360                +lds rmp , VRFF_1
000af6 f907                     +bld rmp , RFF
000af7 9300 0360                +sts VRFF_1 , rmp
000af9 9508                     +ret
                                +pvbite :
                                 		pvbit	RFF,VRFF_1,".RF"	; Put bit RFF
                                 ;
                                 ; --- One-shot timer flags ---
                                 ;
                                +
                                +gvbit2s :
000afa 5154
000afb 2e30
000afc 1700                     +		.db "TQ0." , 0 , ctlW
000afd 0b08                     +		.dw gvbit2e
000afe 0000                     +		.dw NORM
                                +gvbit2L :
000aff fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000b00 9100 0330                +lds rmp , tmf01
000b02 fb00                     +bst rmp , TQ0
000b03 9408                     +sec
000b04 f00e                     +brts gvbit21
000b05 9488                     +clc
                                +gvbit21 :
000b06 1c66                     +rol BSTK
000b07 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQ0,tmf01,"TQ0."	; Timer0 output
                                +
                                +gvbit2s :
000b08 5154
000b09 2e31
000b0a 1700                     +		.db "TQ1." , 0 , ctlW
000b0b 0b16                     +		.dw gvbit2e
000b0c 0000                     +		.dw NORM
                                +gvbit2L :
000b0d fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000b0e 9100 0330                +lds rmp , tmf01
000b10 fb04                     +bst rmp , TQ1
000b11 9408                     +sec
000b12 f00e                     +brts gvbit21
000b13 9488                     +clc
                                +gvbit21 :
000b14 1c66                     +rol BSTK
000b15 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQ1,tmf01,"TQ1."	; Timer1 output
                                +
                                +gvbit2s :
000b16 5154
000b17 2e32
000b18 1700                     +		.db "TQ2." , 0 , ctlW
000b19 0b24                     +		.dw gvbit2e
000b1a 0000                     +		.dw NORM
                                +gvbit2L :
000b1b fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000b1c 9100 0331                +lds rmp , tmf23
000b1e fb00                     +bst rmp , TQ2
000b1f 9408                     +sec
000b20 f00e                     +brts gvbit21
000b21 9488                     +clc
                                +gvbit21 :
000b22 1c66                     +rol BSTK
000b23 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQ2,tmf23,"TQ2."	; Timer2 output
                                +
                                +gvbit2s :
000b24 5154
000b25 2e33
000b26 1700                     +		.db "TQ3." , 0 , ctlW
000b27 0b32                     +		.dw gvbit2e
000b28 0000                     +		.dw NORM
                                +gvbit2L :
000b29 fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000b2a 9100 0331                +lds rmp , tmf23
000b2c fb04                     +bst rmp , TQ3
000b2d 9408                     +sec
000b2e f00e                     +brts gvbit21
000b2f 9488                     +clc
                                +gvbit21 :
000b30 1c66                     +rol BSTK
000b31 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQ3,tmf23,"TQ3."	; Timer3 output
                                +
                                +gvbit2s :
000b32 5154
000b33 2e34
000b34 1700                     +		.db "TQ4." , 0 , ctlW
000b35 0b40                     +		.dw gvbit2e
000b36 0000                     +		.dw NORM
                                +gvbit2L :
000b37 fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000b38 9100 0332                +lds rmp , tmf45
000b3a fb00                     +bst rmp , TQ4
000b3b 9408                     +sec
000b3c f00e                     +brts gvbit21
000b3d 9488                     +clc
                                +gvbit21 :
000b3e 1c66                     +rol BSTK
000b3f 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQ4,tmf45,"TQ4."	; Timer4 output
                                +
                                +gvbit2s :
000b40 5154
000b41 2e35
000b42 1700                     +		.db "TQ5." , 0 , ctlW
000b43 0b4e                     +		.dw gvbit2e
000b44 0000                     +		.dw NORM
                                +gvbit2L :
000b45 fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000b46 9100 0332                +lds rmp , tmf45
000b48 fb04                     +bst rmp , TQ5
000b49 9408                     +sec
000b4a f00e                     +brts gvbit21
000b4b 9488                     +clc
                                +gvbit21 :
000b4c 1c66                     +rol BSTK
000b4d 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQ5,tmf45,"TQ5."	; Timer5 output
                                +
                                +gvbit2s :
000b4e 5154
000b4f 2e36
000b50 1700                     +		.db "TQ6." , 0 , ctlW
000b51 0b5c                     +		.dw gvbit2e
000b52 0000                     +		.dw NORM
                                +gvbit2L :
000b53 fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000b54 9100 0333                +lds rmp , tmf67
000b56 fb00                     +bst rmp , TQ6
000b57 9408                     +sec
000b58 f00e                     +brts gvbit21
000b59 9488                     +clc
                                +gvbit21 :
000b5a 1c66                     +rol BSTK
000b5b 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQ6,tmf67,"TQ6."	; Timer6 output
                                +
                                +gvbit2s :
000b5c 5154
000b5d 2e37
000b5e 1700                     +		.db "TQ7." , 0 , ctlW
000b5f 0b6a                     +		.dw gvbit2e
000b60 0000                     +		.dw NORM
                                +gvbit2L :
000b61 fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000b62 9100 0333                +lds rmp , tmf67
000b64 fb04                     +bst rmp , TQ7
000b65 9408                     +sec
000b66 f00e                     +brts gvbit21
000b67 9488                     +clc
                                +gvbit21 :
000b68 1c66                     +rol BSTK
000b69 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQ7,tmf67,"TQ7."	; Timer7 output
                                 ;
                                +
                                +gvbit2s :
000b6a 5154
000b6b 2e38
000b6c 1700                     +		.db "TQ8." , 0 , ctlW
000b6d 0b78                     +		.dw gvbit2e
000b6e 0000                     +		.dw NORM
                                +gvbit2L :
000b6f fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000b70 9100 0334                +lds rmp , tmf89
000b72 fb00                     +bst rmp , TQ8
000b73 9408                     +sec
000b74 f00e                     +brts gvbit21
000b75 9488                     +clc
                                +gvbit21 :
000b76 1c66                     +rol BSTK
000b77 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQ8,tmf89,"TQ8."	; Timer_8 output
                                +
                                +gvbit2s :
000b78 5154
000b79 2e39
000b7a 1700                     +		.db "TQ9." , 0 , ctlW
000b7b 0b86                     +		.dw gvbit2e
000b7c 0000                     +		.dw NORM
                                +gvbit2L :
000b7d fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000b7e 9100 0334                +lds rmp , tmf89
000b80 fb04                     +bst rmp , TQ9
000b81 9408                     +sec
000b82 f00e                     +brts gvbit21
000b83 9488                     +clc
                                +gvbit21 :
000b84 1c66                     +rol BSTK
000b85 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQ9,tmf89,"TQ9."	; Timer_9 output
                                +
                                +gvbit2s :
000b86 5154
000b87 2e41
000b88 1700                     +		.db "TQA." , 0 , ctlW
000b89 0b94                     +		.dw gvbit2e
000b8a 0000                     +		.dw NORM
                                +gvbit2L :
000b8b fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000b8c 9100 0335                +lds rmp , tmfab
000b8e fb00                     +bst rmp , TQA
000b8f 9408                     +sec
000b90 f00e                     +brts gvbit21
000b91 9488                     +clc
                                +gvbit21 :
000b92 1c66                     +rol BSTK
000b93 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQA,tmfab,"TQA."	; Timer_A output
                                +
                                +gvbit2s :
000b94 5154
000b95 2e42
000b96 1700                     +		.db "TQB." , 0 , ctlW
000b97 0ba2                     +		.dw gvbit2e
000b98 0000                     +		.dw NORM
                                +gvbit2L :
000b99 fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000b9a 9100 0335                +lds rmp , tmfab
000b9c fb04                     +bst rmp , TQB
000b9d 9408                     +sec
000b9e f00e                     +brts gvbit21
000b9f 9488                     +clc
                                +gvbit21 :
000ba0 1c66                     +rol BSTK
000ba1 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQB,tmfab,"TQB."	; Timer_B output
                                +
                                +gvbit2s :
000ba2 5154
000ba3 2e43
000ba4 1700                     +		.db "TQC." , 0 , ctlW
000ba5 0bb0                     +		.dw gvbit2e
000ba6 0000                     +		.dw NORM
                                +gvbit2L :
000ba7 fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000ba8 9100 0336                +lds rmp , tmfcd
000baa fb00                     +bst rmp , TQC
000bab 9408                     +sec
000bac f00e                     +brts gvbit21
000bad 9488                     +clc
                                +gvbit21 :
000bae 1c66                     +rol BSTK
000baf 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQC,tmfcd,"TQC."	; Timer_C output
                                +
                                +gvbit2s :
000bb0 5154
000bb1 2e44
000bb2 1700                     +		.db "TQD." , 0 , ctlW
000bb3 0bbe                     +		.dw gvbit2e
000bb4 0000                     +		.dw NORM
                                +gvbit2L :
000bb5 fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000bb6 9100 0336                +lds rmp , tmfcd
000bb8 fb04                     +bst rmp , TQD
000bb9 9408                     +sec
000bba f00e                     +brts gvbit21
000bbb 9488                     +clc
                                +gvbit21 :
000bbc 1c66                     +rol BSTK
000bbd 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQD,tmfcd,"TQD."	; Timer_D output
                                +
                                +gvbit2s :
000bbe 5154
000bbf 2e45
000bc0 1700                     +		.db "TQE." , 0 , ctlW
000bc1 0bcc                     +		.dw gvbit2e
000bc2 0000                     +		.dw NORM
                                +gvbit2L :
000bc3 fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000bc4 9100 0337                +lds rmp , tmfef
000bc6 fb00                     +bst rmp , TQE
000bc7 9408                     +sec
000bc8 f00e                     +brts gvbit21
000bc9 9488                     +clc
                                +gvbit21 :
000bca 1c66                     +rol BSTK
000bcb 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQE,tmfef,"TQE."	; Timer_E output
                                +
                                +gvbit2s :
000bcc 5154
000bcd 2e46
000bce 1700                     +		.db "TQF." , 0 , ctlW
000bcf 0bda                     +		.dw gvbit2e
000bd0 0000                     +		.dw NORM
                                +gvbit2L :
000bd1 fffb                     +		.dw ( gvbit2s - gvbit2L )
                                +
000bd2 9100 0337                +lds rmp , tmfef
000bd4 fb04                     +bst rmp , TQF
000bd5 9408                     +sec
000bd6 f00e                     +brts gvbit21
000bd7 9488                     +clc
                                +gvbit21 :
000bd8 1c66                     +rol BSTK
000bd9 9508                     +ret
                                +gvbit2e :
                                 		gvbit2	TQF,tmfef,"TQF."	; Timer_F output
                                 ;
                                +
                                +
                                +
                                +
                                +rstds :
000bda 542e
000bdb 3052
000bdc 1700                     +		.db ".TR0" , 0 , ctlW
000bdd 0beb                     +		.dw rstde
000bde 0000                     +		.dw NORM
                                +rstdL :
000bdf fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000be0 9466                     +lsr BSTK
000be1 f008                     +brcs rstd1
000be2 9508                     +ret
                                +
                                +rstd1 :
000be3 9100 0330                +lds rmp , tmf01
000be5 94e8                     +clt
000be6 f900                     +bld rmp , TQ0
000be7 f902                     +bld rmp , TM0
000be8 9300 0330                +sts tmf01 , rmp
000bea 9508                     +ret
                                +rstde :
                                 		rstd	TQ0,TM0,tmf01,".TR0"	; Timer0 reset
                                +
                                +
                                +
                                +
                                +rstds :
000beb 542e
000bec 3152
000bed 1700                     +		.db ".TR1" , 0 , ctlW
000bee 0bfc                     +		.dw rstde
000bef 0000                     +		.dw NORM
                                +rstdL :
000bf0 fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000bf1 9466                     +lsr BSTK
000bf2 f008                     +brcs rstd1
000bf3 9508                     +ret
                                +
                                +rstd1 :
000bf4 9100 0330                +lds rmp , tmf01
000bf6 94e8                     +clt
000bf7 f904                     +bld rmp , TQ1
000bf8 f906                     +bld rmp , TM1
000bf9 9300 0330                +sts tmf01 , rmp
000bfb 9508                     +ret
                                +rstde :
                                 		rstd	TQ1,TM1,tmf01,".TR1"	; Timer1 reset
                                +
                                +
                                +
                                +
                                +rstds :
000bfc 542e
000bfd 3252
000bfe 1700                     +		.db ".TR2" , 0 , ctlW
000bff 0c0d                     +		.dw rstde
000c00 0000                     +		.dw NORM
                                +rstdL :
000c01 fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000c02 9466                     +lsr BSTK
000c03 f008                     +brcs rstd1
000c04 9508                     +ret
                                +
                                +rstd1 :
000c05 9100 0331                +lds rmp , tmf23
000c07 94e8                     +clt
000c08 f900                     +bld rmp , TQ2
000c09 f902                     +bld rmp , TM2
000c0a 9300 0331                +sts tmf23 , rmp
000c0c 9508                     +ret
                                +rstde :
                                 		rstd	TQ2,TM2,tmf23,".TR2"	; Timer2 reset
                                +
                                +
                                +
                                +
                                +rstds :
000c0d 542e
000c0e 3352
000c0f 1700                     +		.db ".TR3" , 0 , ctlW
000c10 0c1e                     +		.dw rstde
000c11 0000                     +		.dw NORM
                                +rstdL :
000c12 fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000c13 9466                     +lsr BSTK
000c14 f008                     +brcs rstd1
000c15 9508                     +ret
                                +
                                +rstd1 :
000c16 9100 0331                +lds rmp , tmf23
000c18 94e8                     +clt
000c19 f904                     +bld rmp , TQ3
000c1a f906                     +bld rmp , TM3
000c1b 9300 0331                +sts tmf23 , rmp
000c1d 9508                     +ret
                                +rstde :
                                 		rstd	TQ3,TM3,tmf23,".TR3"	; Timer3 reset
                                +
                                +
                                +
                                +
                                +rstds :
000c1e 542e
000c1f 3452
000c20 1700                     +		.db ".TR4" , 0 , ctlW
000c21 0c2f                     +		.dw rstde
000c22 0000                     +		.dw NORM
                                +rstdL :
000c23 fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000c24 9466                     +lsr BSTK
000c25 f008                     +brcs rstd1
000c26 9508                     +ret
                                +
                                +rstd1 :
000c27 9100 0332                +lds rmp , tmf45
000c29 94e8                     +clt
000c2a f900                     +bld rmp , TQ4
000c2b f902                     +bld rmp , TM4
000c2c 9300 0332                +sts tmf45 , rmp
000c2e 9508                     +ret
                                +rstde :
                                 		rstd	TQ4,TM4,tmf45,".TR4"	; Timer4 reset
                                +
                                +
                                +
                                +
                                +rstds :
000c2f 542e
000c30 3552
000c31 1700                     +		.db ".TR5" , 0 , ctlW
000c32 0c40                     +		.dw rstde
000c33 0000                     +		.dw NORM
                                +rstdL :
000c34 fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000c35 9466                     +lsr BSTK
000c36 f008                     +brcs rstd1
000c37 9508                     +ret
                                +
                                +rstd1 :
000c38 9100 0332                +lds rmp , tmf45
000c3a 94e8                     +clt
000c3b f904                     +bld rmp , TQ5
000c3c f906                     +bld rmp , TM5
000c3d 9300 0332                +sts tmf45 , rmp
000c3f 9508                     +ret
                                +rstde :
                                 		rstd	TQ5,TM5,tmf45,".TR5"	; Timer5 reset
                                +
                                +
                                +
                                +
                                +rstds :
000c40 542e
000c41 3652
000c42 1700                     +		.db ".TR6" , 0 , ctlW
000c43 0c51                     +		.dw rstde
000c44 0000                     +		.dw NORM
                                +rstdL :
000c45 fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000c46 9466                     +lsr BSTK
000c47 f008                     +brcs rstd1
000c48 9508                     +ret
                                +
                                +rstd1 :
000c49 9100 0333                +lds rmp , tmf67
000c4b 94e8                     +clt
000c4c f900                     +bld rmp , TQ6
000c4d f902                     +bld rmp , TM6
000c4e 9300 0333                +sts tmf67 , rmp
000c50 9508                     +ret
                                +rstde :
                                 		rstd	TQ6,TM6,tmf67,".TR6"	; Timer6 reset
                                +
                                +
                                +
                                +
                                +rstds :
000c51 542e
000c52 3752
000c53 1700                     +		.db ".TR7" , 0 , ctlW
000c54 0c62                     +		.dw rstde
000c55 0000                     +		.dw NORM
                                +rstdL :
000c56 fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000c57 9466                     +lsr BSTK
000c58 f008                     +brcs rstd1
000c59 9508                     +ret
                                +
                                +rstd1 :
000c5a 9100 0333                +lds rmp , tmf67
000c5c 94e8                     +clt
000c5d f904                     +bld rmp , TQ7
000c5e f906                     +bld rmp , TM7
000c5f 9300 0333                +sts tmf67 , rmp
000c61 9508                     +ret
                                +rstde :
                                 		rstd	TQ7,TM7,tmf67,".TR7"	; Timer7 reset
                                 ;
                                +
                                +
                                +
                                +
                                +rstds :
000c62 542e
000c63 3852
000c64 1700                     +		.db ".TR8" , 0 , ctlW
000c65 0c73                     +		.dw rstde
000c66 0000                     +		.dw NORM
                                +rstdL :
000c67 fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000c68 9466                     +lsr BSTK
000c69 f008                     +brcs rstd1
000c6a 9508                     +ret
                                +
                                +rstd1 :
000c6b 9100 0334                +lds rmp , tmf89
000c6d 94e8                     +clt
000c6e f900                     +bld rmp , TQ8
000c6f f902                     +bld rmp , TM8
000c70 9300 0334                +sts tmf89 , rmp
000c72 9508                     +ret
                                +rstde :
                                 		rstd	TQ8,TM8,tmf89,".TR8"	; Timer_8 reset
                                +
                                +
                                +
                                +
                                +rstds :
000c73 542e
000c74 3952
000c75 1700                     +		.db ".TR9" , 0 , ctlW
000c76 0c84                     +		.dw rstde
000c77 0000                     +		.dw NORM
                                +rstdL :
000c78 fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000c79 9466                     +lsr BSTK
000c7a f008                     +brcs rstd1
000c7b 9508                     +ret
                                +
                                +rstd1 :
000c7c 9100 0334                +lds rmp , tmf89
000c7e 94e8                     +clt
000c7f f904                     +bld rmp , TQ9
000c80 f906                     +bld rmp , TM9
000c81 9300 0334                +sts tmf89 , rmp
000c83 9508                     +ret
                                +rstde :
                                 		rstd	TQ9,TM9,tmf89,".TR9"	; Timer_9 reset
                                +
                                +
                                +
                                +
                                +rstds :
000c84 542e
000c85 4152
000c86 1700                     +		.db ".TRA" , 0 , ctlW
000c87 0c95                     +		.dw rstde
000c88 0000                     +		.dw NORM
                                +rstdL :
000c89 fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000c8a 9466                     +lsr BSTK
000c8b f008                     +brcs rstd1
000c8c 9508                     +ret
                                +
                                +rstd1 :
000c8d 9100 0335                +lds rmp , tmfab
000c8f 94e8                     +clt
000c90 f900                     +bld rmp , TQA
000c91 f902                     +bld rmp , TMA
000c92 9300 0335                +sts tmfab , rmp
000c94 9508                     +ret
                                +rstde :
                                 		rstd	TQA,TMA,tmfab,".TRA"	; Timer_A reset
                                +
                                +
                                +
                                +
                                +rstds :
000c95 542e
000c96 4252
000c97 1700                     +		.db ".TRB" , 0 , ctlW
000c98 0ca6                     +		.dw rstde
000c99 0000                     +		.dw NORM
                                +rstdL :
000c9a fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000c9b 9466                     +lsr BSTK
000c9c f008                     +brcs rstd1
000c9d 9508                     +ret
                                +
                                +rstd1 :
000c9e 9100 0335                +lds rmp , tmfab
000ca0 94e8                     +clt
000ca1 f904                     +bld rmp , TQB
000ca2 f906                     +bld rmp , TMB
000ca3 9300 0335                +sts tmfab , rmp
000ca5 9508                     +ret
                                +rstde :
                                 		rstd	TQB,TMB,tmfab,".TRB"	; Timer_B reset
                                +
                                +
                                +
                                +
                                +rstds :
000ca6 542e
000ca7 4352
000ca8 1700                     +		.db ".TRC" , 0 , ctlW
000ca9 0cb7                     +		.dw rstde
000caa 0000                     +		.dw NORM
                                +rstdL :
000cab fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000cac 9466                     +lsr BSTK
000cad f008                     +brcs rstd1
000cae 9508                     +ret
                                +
                                +rstd1 :
000caf 9100 0336                +lds rmp , tmfcd
000cb1 94e8                     +clt
000cb2 f900                     +bld rmp , TQC
000cb3 f902                     +bld rmp , TMC
000cb4 9300 0336                +sts tmfcd , rmp
000cb6 9508                     +ret
                                +rstde :
                                 		rstd	TQC,TMC,tmfcd,".TRC"	; Timer_C reset
                                +
                                +
                                +
                                +
                                +rstds :
000cb7 542e
000cb8 4452
000cb9 1700                     +		.db ".TRD" , 0 , ctlW
000cba 0cc8                     +		.dw rstde
000cbb 0000                     +		.dw NORM
                                +rstdL :
000cbc fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000cbd 9466                     +lsr BSTK
000cbe f008                     +brcs rstd1
000cbf 9508                     +ret
                                +
                                +rstd1 :
000cc0 9100 0336                +lds rmp , tmfcd
000cc2 94e8                     +clt
000cc3 f904                     +bld rmp , TQD
000cc4 f906                     +bld rmp , TMD
000cc5 9300 0336                +sts tmfcd , rmp
000cc7 9508                     +ret
                                +rstde :
                                 		rstd	TQD,TMD,tmfcd,".TRD"	; Timer_D reset
                                +
                                +
                                +
                                +
                                +rstds :
000cc8 542e
000cc9 4552
000cca 1700                     +		.db ".TRE" , 0 , ctlW
000ccb 0cd9                     +		.dw rstde
000ccc 0000                     +		.dw NORM
                                +rstdL :
000ccd fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000cce 9466                     +lsr BSTK
000ccf f008                     +brcs rstd1
000cd0 9508                     +ret
                                +
                                +rstd1 :
000cd1 9100 0337                +lds rmp , tmfef
000cd3 94e8                     +clt
000cd4 f900                     +bld rmp , TQE
000cd5 f902                     +bld rmp , TME
000cd6 9300 0337                +sts tmfef , rmp
000cd8 9508                     +ret
                                +rstde :
                                 		rstd	TQE,TME,tmfef,".TRE"	; Timer_E reset
                                +
                                +
                                +
                                +
                                +rstds :
000cd9 542e
000cda 4652
000cdb 1700                     +		.db ".TRF" , 0 , ctlW
000cdc 0cea                     +		.dw rstde
000cdd 0000                     +		.dw NORM
                                +rstdL :
000cde fffb                     +		.dw ( rstds - rstdL )
                                +
                                +irstd :
000cdf 9466                     +lsr BSTK
000ce0 f008                     +brcs rstd1
000ce1 9508                     +ret
                                +
                                +rstd1 :
000ce2 9100 0337                +lds rmp , tmfef
000ce4 94e8                     +clt
000ce5 f904                     +bld rmp , TQF
000ce6 f906                     +bld rmp , TMF
000ce7 9300 0337                +sts tmfef , rmp
000ce9 9508                     +ret
                                +rstde :
                                 		rstd	TQF,TMF,tmfef,".TRF"	; Timer_F reset
                                 ;
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000cea 542e
000ceb 304b
000cec 1700                     +		.db ".TK0" , 0 , ctlW
000ced 0d05                     +		.dw tkte
000cee 0000                     +		.dw NORM
                                +tktL :
000cef fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000cf0 9466                     +lsr BSTK
000cf1 f490                     +brcc tktx
000cf2 9100 0300                +lds rmp , TRB0
000cf4 2300                     +tst rmp
000cf5 f071                     +breq tktx
000cf6 e109                     +ldi rmp , PRVms
000cf7 9300 0320                +sts PRB0 , rmp
000cf9 9100 0300                +lds rmp , TRB0
000cfb 9300 0310                +sts TCB0 , rmp
000cfd 9100 0330                +lds rmp , tmf01
000cff 9468                     +set
000d00 f900                     +bld rmp , TQ0
000d01 f902                     +bld rmp , TM0
000d02 9300 0330                +sts tmf01 , rmp
                                +tktx :
000d04 9508                     +ret
                                +tkte :
                                 		tktr	TCB0,PRB0,TQ0,TM0,PRVms,TRB0,tmf01,".TK0"	; Timer0 trigger
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000d05 542e
000d06 314b
000d07 1700                     +		.db ".TK1" , 0 , ctlW
000d08 0d20                     +		.dw tkte
000d09 0000                     +		.dw NORM
                                +tktL :
000d0a fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000d0b 9466                     +lsr BSTK
000d0c f490                     +brcc tktx
000d0d 9100 0301                +lds rmp , TRB1
000d0f 2300                     +tst rmp
000d10 f071                     +breq tktx
000d11 e109                     +ldi rmp , PRVms
000d12 9300 0321                +sts PRB1 , rmp
000d14 9100 0301                +lds rmp , TRB1
000d16 9300 0311                +sts TCB1 , rmp
000d18 9100 0330                +lds rmp , tmf01
000d1a 9468                     +set
000d1b f904                     +bld rmp , TQ1
000d1c f906                     +bld rmp , TM1
000d1d 9300 0330                +sts tmf01 , rmp
                                +tktx :
000d1f 9508                     +ret
                                +tkte :
                                 		tktr	TCB1,PRB1,TQ1,TM1,PRVms,TRB1,tmf01,".TK1"	; Timer1 trigger
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000d20 542e
000d21 324b
000d22 1700                     +		.db ".TK2" , 0 , ctlW
000d23 0d3b                     +		.dw tkte
000d24 0000                     +		.dw NORM
                                +tktL :
000d25 fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000d26 9466                     +lsr BSTK
000d27 f490                     +brcc tktx
000d28 9100 0302                +lds rmp , TRB2
000d2a 2300                     +tst rmp
000d2b f071                     +breq tktx
000d2c e109                     +ldi rmp , PRVms
000d2d 9300 0322                +sts PRB2 , rmp
000d2f 9100 0302                +lds rmp , TRB2
000d31 9300 0312                +sts TCB2 , rmp
000d33 9100 0331                +lds rmp , tmf23
000d35 9468                     +set
000d36 f900                     +bld rmp , TQ2
000d37 f902                     +bld rmp , TM2
000d38 9300 0331                +sts tmf23 , rmp
                                +tktx :
000d3a 9508                     +ret
                                +tkte :
                                 		tktr	TCB2,PRB2,TQ2,TM2,PRVms,TRB2,tmf23,".TK2"	; Timer2 trigger
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000d3b 542e
000d3c 334b
000d3d 1700                     +		.db ".TK3" , 0 , ctlW
000d3e 0d56                     +		.dw tkte
000d3f 0000                     +		.dw NORM
                                +tktL :
000d40 fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000d41 9466                     +lsr BSTK
000d42 f490                     +brcc tktx
000d43 9100 0303                +lds rmp , TRB3
000d45 2300                     +tst rmp
000d46 f071                     +breq tktx
000d47 e109                     +ldi rmp , PRVms
000d48 9300 0323                +sts PRB3 , rmp
000d4a 9100 0303                +lds rmp , TRB3
000d4c 9300 0313                +sts TCB3 , rmp
000d4e 9100 0331                +lds rmp , tmf23
000d50 9468                     +set
000d51 f904                     +bld rmp , TQ3
000d52 f906                     +bld rmp , TM3
000d53 9300 0331                +sts tmf23 , rmp
                                +tktx :
000d55 9508                     +ret
                                +tkte :
                                 		tktr	TCB3,PRB3,TQ3,TM3,PRVms,TRB3,tmf23,".TK3"	; Timer3 trigger
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000d56 542e
000d57 344b
000d58 1700                     +		.db ".TK4" , 0 , ctlW
000d59 0d71                     +		.dw tkte
000d5a 0000                     +		.dw NORM
                                +tktL :
000d5b fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000d5c 9466                     +lsr BSTK
000d5d f490                     +brcc tktx
000d5e 9100 0304                +lds rmp , TRB4
000d60 2300                     +tst rmp
000d61 f071                     +breq tktx
000d62 e00a                     +ldi rmp , PRVs
000d63 9300 0324                +sts PRB4 , rmp
000d65 9100 0304                +lds rmp , TRB4
000d67 9300 0314                +sts TCB4 , rmp
000d69 9100 0332                +lds rmp , tmf45
000d6b 9468                     +set
000d6c f900                     +bld rmp , TQ4
000d6d f902                     +bld rmp , TM4
000d6e 9300 0332                +sts tmf45 , rmp
                                +tktx :
000d70 9508                     +ret
                                +tkte :
                                 		tktr	TCB4,PRB4,TQ4,TM4,PRVs,TRB4,tmf45,".TK4"	; Timer4 trigger
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000d71 542e
000d72 354b
000d73 1700                     +		.db ".TK5" , 0 , ctlW
000d74 0d8c                     +		.dw tkte
000d75 0000                     +		.dw NORM
                                +tktL :
000d76 fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000d77 9466                     +lsr BSTK
000d78 f490                     +brcc tktx
000d79 9100 0305                +lds rmp , TRB5
000d7b 2300                     +tst rmp
000d7c f071                     +breq tktx
000d7d e00a                     +ldi rmp , PRVs
000d7e 9300 0325                +sts PRB5 , rmp
000d80 9100 0305                +lds rmp , TRB5
000d82 9300 0315                +sts TCB5 , rmp
000d84 9100 0332                +lds rmp , tmf45
000d86 9468                     +set
000d87 f904                     +bld rmp , TQ5
000d88 f906                     +bld rmp , TM5
000d89 9300 0332                +sts tmf45 , rmp
                                +tktx :
000d8b 9508                     +ret
                                +tkte :
                                 		tktr	TCB5,PRB5,TQ5,TM5,PRVs,TRB5,tmf45,".TK5"	; Timer5 trigger
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000d8c 542e
000d8d 364b
000d8e 1700                     +		.db ".TK6" , 0 , ctlW
000d8f 0da7                     +		.dw tkte
000d90 0000                     +		.dw NORM
                                +tktL :
000d91 fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000d92 9466                     +lsr BSTK
000d93 f490                     +brcc tktx
000d94 9100 0306                +lds rmp , TRB6
000d96 2300                     +tst rmp
000d97 f071                     +breq tktx
000d98 e00a                     +ldi rmp , PRVs
000d99 9300 0326                +sts PRB6 , rmp
000d9b 9100 0306                +lds rmp , TRB6
000d9d 9300 0316                +sts TCB6 , rmp
000d9f 9100 0333                +lds rmp , tmf67
000da1 9468                     +set
000da2 f900                     +bld rmp , TQ6
000da3 f902                     +bld rmp , TM6
000da4 9300 0333                +sts tmf67 , rmp
                                +tktx :
000da6 9508                     +ret
                                +tkte :
                                 		tktr	TCB6,PRB6,TQ6,TM6,PRVs,TRB6,tmf67,".TK6"	; Timer6 trigger
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000da7 542e
000da8 374b
000da9 1700                     +		.db ".TK7" , 0 , ctlW
000daa 0dc2                     +		.dw tkte
000dab 0000                     +		.dw NORM
                                +tktL :
000dac fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000dad 9466                     +lsr BSTK
000dae f490                     +brcc tktx
000daf 9100 0307                +lds rmp , TRB7
000db1 2300                     +tst rmp
000db2 f071                     +breq tktx
000db3 e00a                     +ldi rmp , PRVs
000db4 9300 0327                +sts PRB7 , rmp
000db6 9100 0307                +lds rmp , TRB7
000db8 9300 0317                +sts TCB7 , rmp
000dba 9100 0333                +lds rmp , tmf67
000dbc 9468                     +set
000dbd f904                     +bld rmp , TQ7
000dbe f906                     +bld rmp , TM7
000dbf 9300 0333                +sts tmf67 , rmp
                                +tktx :
000dc1 9508                     +ret
                                +tkte :
                                 		tktr	TCB7,PRB7,TQ7,TM7,PRVs,TRB7,tmf67,".TK7"	; Timer7 trigger
                                 ;
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000dc2 542e
000dc3 384b
000dc4 1700                     +		.db ".TK8" , 0 , ctlW
000dc5 0ddd                     +		.dw tkte
000dc6 0000                     +		.dw NORM
                                +tktL :
000dc7 fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000dc8 9466                     +lsr BSTK
000dc9 f490                     +brcc tktx
000dca 9100 0308                +lds rmp , TRB8
000dcc 2300                     +tst rmp
000dcd f071                     +breq tktx
000dce e00a                     +ldi rmp , PRVs
000dcf 9300 0328                +sts PRB8 , rmp
000dd1 9100 0308                +lds rmp , TRB8
000dd3 9300 0318                +sts TCB8 , rmp
000dd5 9100 0334                +lds rmp , tmf89
000dd7 9468                     +set
000dd8 f900                     +bld rmp , TQ8
000dd9 f902                     +bld rmp , TM8
000dda 9300 0334                +sts tmf89 , rmp
                                +tktx :
000ddc 9508                     +ret
                                +tkte :
                                 		tktr	TCB8,PRB8,TQ8,TM8,PRVs,TRB8,tmf89,".TK8"	; Timer_8 trigger
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000ddd 542e
000dde 394b
000ddf 1700                     +		.db ".TK9" , 0 , ctlW
000de0 0df8                     +		.dw tkte
000de1 0000                     +		.dw NORM
                                +tktL :
000de2 fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000de3 9466                     +lsr BSTK
000de4 f490                     +brcc tktx
000de5 9100 0309                +lds rmp , TRB9
000de7 2300                     +tst rmp
000de8 f071                     +breq tktx
000de9 e00a                     +ldi rmp , PRVs
000dea 9300 0329                +sts PRB9 , rmp
000dec 9100 0309                +lds rmp , TRB9
000dee 9300 0319                +sts TCB9 , rmp
000df0 9100 0334                +lds rmp , tmf89
000df2 9468                     +set
000df3 f904                     +bld rmp , TQ9
000df4 f906                     +bld rmp , TM9
000df5 9300 0334                +sts tmf89 , rmp
                                +tktx :
000df7 9508                     +ret
                                +tkte :
                                 		tktr	TCB9,PRB9,TQ9,TM9,PRVs,TRB9,tmf89,".TK9"	; Timer_9 trigger
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000df8 542e
000df9 414b
000dfa 1700                     +		.db ".TKA" , 0 , ctlW
000dfb 0e13                     +		.dw tkte
000dfc 0000                     +		.dw NORM
                                +tktL :
000dfd fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000dfe 9466                     +lsr BSTK
000dff f490                     +brcc tktx
000e00 9100 030a                +lds rmp , TRBA
000e02 2300                     +tst rmp
000e03 f071                     +breq tktx
000e04 e00a                     +ldi rmp , PRVs
000e05 9300 032a                +sts PRBA , rmp
000e07 9100 030a                +lds rmp , TRBA
000e09 9300 031a                +sts TCBA , rmp
000e0b 9100 0335                +lds rmp , tmfab
000e0d 9468                     +set
000e0e f900                     +bld rmp , TQA
000e0f f902                     +bld rmp , TMA
000e10 9300 0335                +sts tmfab , rmp
                                +tktx :
000e12 9508                     +ret
                                +tkte :
                                 		tktr	TCBA,PRBA,TQA,TMA,PRVs,TRBA,tmfab,".TKA"	; Timer_A trigger
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000e13 542e
000e14 424b
000e15 1700                     +		.db ".TKB" , 0 , ctlW
000e16 0e2e                     +		.dw tkte
000e17 0000                     +		.dw NORM
                                +tktL :
000e18 fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000e19 9466                     +lsr BSTK
000e1a f490                     +brcc tktx
000e1b 9100 030b                +lds rmp , TRBB
000e1d 2300                     +tst rmp
000e1e f071                     +breq tktx
000e1f e00a                     +ldi rmp , PRVs
000e20 9300 032b                +sts PRBB , rmp
000e22 9100 030b                +lds rmp , TRBB
000e24 9300 031b                +sts TCBB , rmp
000e26 9100 0335                +lds rmp , tmfab
000e28 9468                     +set
000e29 f904                     +bld rmp , TQB
000e2a f906                     +bld rmp , TMB
000e2b 9300 0335                +sts tmfab , rmp
                                +tktx :
000e2d 9508                     +ret
                                +tkte :
                                 		tktr	TCBB,PRBB,TQB,TMB,PRVs,TRBB,tmfab,".TKB"	; Timer_B trigger
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000e2e 542e
000e2f 434b
000e30 1700                     +		.db ".TKC" , 0 , ctlW
000e31 0e49                     +		.dw tkte
000e32 0000                     +		.dw NORM
                                +tktL :
000e33 fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000e34 9466                     +lsr BSTK
000e35 f490                     +brcc tktx
000e36 9100 030c                +lds rmp , TRBC
000e38 2300                     +tst rmp
000e39 f071                     +breq tktx
000e3a e604                     +ldi rmp , PRVm
000e3b 9300 032c                +sts PRBC , rmp
000e3d 9100 030c                +lds rmp , TRBC
000e3f 9300 031c                +sts TCBC , rmp
000e41 9100 0336                +lds rmp , tmfcd
000e43 9468                     +set
000e44 f900                     +bld rmp , TQC
000e45 f902                     +bld rmp , TMC
000e46 9300 0336                +sts tmfcd , rmp
                                +tktx :
000e48 9508                     +ret
                                +tkte :
                                 		tktr	TCBC,PRBC,TQC,TMC,PRVm,TRBC,tmfcd,".TKC"	; Timer_C trigger
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000e49 542e
000e4a 444b
000e4b 1700                     +		.db ".TKD" , 0 , ctlW
000e4c 0e64                     +		.dw tkte
000e4d 0000                     +		.dw NORM
                                +tktL :
000e4e fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000e4f 9466                     +lsr BSTK
000e50 f490                     +brcc tktx
000e51 9100 030d                +lds rmp , TRBD
000e53 2300                     +tst rmp
000e54 f071                     +breq tktx
000e55 e604                     +ldi rmp , PRVm
000e56 9300 032d                +sts PRBD , rmp
000e58 9100 030d                +lds rmp , TRBD
000e5a 9300 031d                +sts TCBD , rmp
000e5c 9100 0336                +lds rmp , tmfcd
000e5e 9468                     +set
000e5f f904                     +bld rmp , TQD
000e60 f906                     +bld rmp , TMD
000e61 9300 0336                +sts tmfcd , rmp
                                +tktx :
000e63 9508                     +ret
                                +tkte :
                                 		tktr	TCBD,PRBD,TQD,TMD,PRVm,TRBD,tmfcd,".TKD"	; Timer_D trigger
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000e64 542e
000e65 454b
000e66 1700                     +		.db ".TKE" , 0 , ctlW
000e67 0e7f                     +		.dw tkte
000e68 0000                     +		.dw NORM
                                +tktL :
000e69 fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000e6a 9466                     +lsr BSTK
000e6b f490                     +brcc tktx
000e6c 9100 030e                +lds rmp , TRBE
000e6e 2300                     +tst rmp
000e6f f071                     +breq tktx
000e70 e604                     +ldi rmp , PRVm
000e71 9300 032e                +sts PRBE , rmp
000e73 9100 030e                +lds rmp , TRBE
000e75 9300 031e                +sts TCBE , rmp
000e77 9100 0337                +lds rmp , tmfef
000e79 9468                     +set
000e7a f900                     +bld rmp , TQE
000e7b f902                     +bld rmp , TME
000e7c 9300 0337                +sts tmfef , rmp
                                +tktx :
000e7e 9508                     +ret
                                +tkte :
                                 		tktr	TCBE,PRBE,TQE,TME,PRVm,TRBE,tmfef,".TKE"	; Timer_E trigger
                                 ;
                                +
                                +
                                +
                                +
                                +
                                +tkts :
000e7f 542e
000e80 464b
000e81 1700                     +		.db ".TKF" , 0 , ctlW
000e82 0e9a                     +		.dw tkte
000e83 0000                     +		.dw NORM
                                +tktL :
000e84 fffb                     +		.dw ( tkts - tktL )
                                +
                                +itkt :
000e85 9466                     +lsr BSTK
000e86 f490                     +brcc tktx
000e87 9100 030f                +lds rmp , TRBF
000e89 2300                     +tst rmp
000e8a f071                     +breq tktx
000e8b ed0e                     +ldi rmp , PRVh
000e8c 9300 032f                +sts PRBF , rmp
000e8e 9100 030f                +lds rmp , TRBF
000e90 9300 031f                +sts TCBF , rmp
000e92 9100 0337                +lds rmp , tmfef
000e94 9468                     +set
000e95 f904                     +bld rmp , TQF
000e96 f906                     +bld rmp , TMF
000e97 9300 0337                +sts tmfef , rmp
                                +tktx :
000e99 9508                     +ret
                                +tkte :
                                 		tktr	TCBF,PRBF,TQF,TMF,PRVh,TRBF,tmfef,".TKF"	; Timer_F trigger
                                 ;
                                 ;
                                 ; --- Fill and clear the bit stack ---		(OK)
                                 ;
                                 fbs:
000e9a 2e46
000e9b 1700                      		.db		"F.",0,ctlW		; Fill bit stack
000e9c 0ea2                      		.dw		fbse			; Link address to next word
000e9d 0000                      		.dw		NORM			; Editor mode only
                                 fbsL:
000e9e fffc                      		.dw		(fbs - fbsL)	; Offset to namestring start
                                 ;
000e9f ef0f                      		ldi		rmp,0xff
000ea0 2e60                      		mov		BSTK,rmp
000ea1 9508                      		ret
                                 fbse:
                                 ;
                                 zbs:
000ea2 2e5a
000ea3 1700                      		.db		"Z.",0,ctlW		; Zero the bit stack
000ea4 0ea9                      		.dw		zbse			; Link address to next word
000ea5 0000                      		.dw		NORM			; Interpreter and runtime
                                 zbsL:
000ea6 fffc                      		.dw		(zbs-zbsL)		; Offset to namestring start
                                 ;
000ea7 2466                      		clr		BSTK
000ea8 9508                      		ret
                                 zbse:
                                 ;
                                 ; --- Print PA byte ---		(OK)
                                 ;
                                 ppa:
000ea9 5050
000eaa 1741                      		.db		"PPA",ctlW
000eab 0eb7                      		.dw		ppae
000eac 0000                      		.dw		NORM
                                 ppaL:
000ead fffc                      		.dw		(ppa-ppaL)
                                 ;
                                 ippa:
000eae ff93                      		sbrs	flagb,paceb			; Display every 100 ms
000eaf 9508                      		ret
000eb0 7f97                      		cbr		flagb,(1<<paceb)	; Clear paceb flag
000eb1 d7b8                      		rcall	pxy
000eb2 3906                      		.db		6,57
000eb3 9120 034f                 		lds		rgb,pa
000eb5 d051                      		rcall	prbyt				; Show 8 bits
000eb6 9508                      		ret
                                 ppae:
                                 ;
                                 ; --- Print PU byte ---		(OK)
                                 ;
                                 ppu:
000eb7 5050
000eb8 1755                      		.db		"PPU",ctlW
000eb9 0ec5                      		.dw		ppue
000eba 0000                      		.dw		NORM
                                 ppuL:
000ebb fffc                      		.dw		(ppu-ppuL)
                                 ;
                                 ippu:
000ebc ff93                      		sbrs	flagb,paceb			; Display every 100 ms
000ebd 9508                      		ret
000ebe 7f97                      		cbr		flagb,(1<<paceb)	; Clear paceb flag
000ebf d7aa                      		rcall	pxy
000ec0 3906                      		.db		6,57
000ec1 9120 0353                 		lds		rgb,pu
000ec3 d043                      		rcall	prbyt				; Show 8 bits
000ec4 9508                      		ret
                                 ppue:
                                 ;
                                 ; --- Print PV byte ---		(OK)
                                 ;
                                 ppv:
000ec5 5050
000ec6 1756                      		.db		"PPV",ctlW
000ec7 0ed3                      		.dw		ppve
000ec8 0000                      		.dw		NORM
                                 ppvL:
000ec9 fffc                      		.dw		(ppv-ppvL)
                                 ;
                                 ippv:
000eca ff93                      		sbrs	flagb,paceb			; Display every 100 ms
000ecb 9508                      		ret
000ecc 7f97                      		cbr		flagb,(1<<paceb)	; Clear paceb flag
000ecd d79c                      		rcall	pxy
000ece 3906                      		.db		6,57
000ecf 9120 0354                 		lds		rgb,pv
000ed1 d035                      		rcall	prbyt				; Show 8 bits
000ed2 9508                      		ret
                                 ppve:
                                 ;
                                 ; --- Print PY byte ---		(OK)
                                 ;
                                 ppy:
000ed3 5050
000ed4 1759                      		.db		"PPY",ctlW
000ed5 0ee1                      		.dw		ppye
000ed6 0000                      		.dw		NORM
                                 ppyL:
000ed7 fffc                      		.dw		(ppy-ppyL)
                                 ;
                                 ippy:
000ed8 ff93                      		sbrs	flagb,paceb			; Display every 100 ms
000ed9 9508                      		ret
000eda 7f97                      		cbr		flagb,(1<<paceb)	; Clear paceb flag
000edb d78e                      		rcall	pxy
000edc 3906                      		.db		6,57
000edd 9120 0351                 		lds		rgb,py
000edf d027                      		rcall	prbyt				; Show 8 bits
000ee0 9508                      		ret
                                 ppye:
                                 ;
                                 ; --- No Operation ---		(OK)
                                 ;
000ee1 4f4e
000ee2 1750                      nopw:	.db		"NOP",ctlW		; No operation
000ee3 0ee7                      		.dw		nope			; Link address to next word
000ee4 0000                      		.dw		NORM			; Interpreter and runtime
                                 nopL:
000ee5 fffc                      		.dw		(nopw - nopL)	; Offset to namestring start
                                 ;
                                 inop:
000ee6 9508                      		ret
                                 nope:
                                 ;
                                 ; --- Fill UFx space with NOPs ---		(OK)
                                 ;
                                 fill:
000ee7 4946
000ee8 4c4c
000ee9 1700                      		.db		"FILL",0,ctlW
000eea 0eff                      		.dw		fille
000eeb 0001                      		.dw		EDIT			; Editor mode only
                                 fillL:
000eec fffb                      		.dw		(fill-fillL)	; Offset to namestring start
                                 ;
                                 ifill:
000eed e070                      		ldi		rgv,0x0			; UF0 is (0x100) 256 words
000eee e0d1                      		ldi		YH,high(uf0st)
000eef e0c0                      		ldi		YL,low(uf0st)	; Y <-- UF0ST
000ef0 93d0 0342                 		sts		pointr,YH
000ef2 93c0 0343                 		sts		pointr+1,YL		; (POINTR) <-- Y
                                +
000ef4 e0b1                     +ldi XH , high ( uf0st )
000ef5 e0a0                     +ldi XL , low ( uf0st )
                                 		ldxptr	uf0st			; UF0 buffer start
000ef6 e0fe                      		ldi		ZH,high(inop)	; NOP's IWRD address
000ef7 eee6                      		ldi		ZL,low(inop)
                                 fill1:
000ef8 d51b                      		rcall	putwd			; Load NOP to UF0 @(PONITR)
000ef9 957a                      		dec		rgv
000efa f7e9                      		brne	fill1
000efb 940e 02a6                 		call	inzuf0			; Restart editor at line 0
000efd d461                      		rcall	dpage
000efe 9508                      		ret
                                 fille:
                                 ;
                                 ; --- Print out Bit Stack contents ---		(OK)
                                 ;
000eff 4250
000f00 1753                      bss:	.db		"PBS",ctlW		; Non-destructive BSTK print
000f01 0f11                      		.dw		bse				; Link address to next word
000f02 0000                      		.dw		NORM			; Interpreter and runtime
000f03 fffc                      bssL:	.dw		(bss - bssL)	; Offset to namestring start
                                 ;
                                 ibs:
000f04 d765                      		rcall	pxy
000f05 0806                      		.db		6,8
000f06 2d26                      		mov		rgb,BSTK		; Get bit stack
                                 prbyt:
000f07 e078                      		ldi		rgv,8			; Load counter, 8 bits/byte
                                 bs2:
000f08 1f22                      		rol		rgb				; Pop TOS
000f09 d6fd                      		rcall	space
000f0a e311                      		ldi		rga,'1'
000f0b f008                      		brcs	bs3				; C = 1
000f0c e310                      		ldi		rga,'0'
                                 bs3:
000f0d d6e7                      		rcall	co
000f0e 957a                      		dec		rgv				; Count the bits
000f0f f7c1                      		brne	bs2				; Repeat
000f10 9508                      		ret
                                 bse:
                                 ;
                                 ; --- Breakout key ---		(OK)
                                 ;
                                 key:
000f11 454b
000f12 1759                      		.db		"KEY",ctlW
000f13 0f25                      		.dw		keye
000f14 0000                      		.dw		NORM
                                 keyl:
000f15 fffc                      		.dw		(key-keyL)
                                 ;
                                 ikey:
000f16 d6ce                      		rcall	getc			; Check for keyboard input
000f17 2311                      		tst		rga
000f18 f409                      		brne	key1
000f19 9508                      		ret
                                 ;
                                 key1:
000f1a 321f                      		cpi		rga,'/'
000f1b f009                      		breq	key2
000f1c 9508                      		ret
                                 ;
                                 key2:
000f1d d658                      		rcall	sak
000f1e 94f8                      		cli							; Disable GI
000f1f e008                      		ldi		rmp, HIGH(RAMEND)	; Init MSB stack
000f20 bf0e                      		out		SPH, rmp
000f21 ef0f                      		ldi		rmp, LOW(RAMEND)	; Init LSB stack
000f22 bf0d                      		out		SPL, rmp
000f23 9478                      		sei							; Enable GI
000f24 c365                      		rjmp	cml					; Restart command processor
                                 keye:
                                 ;
                                 ; --- Run user file ---		(OK)
                                 ;
                                 ; The main interpreter's command to run the subroutines stored in
                                 ; the User File area in RAM. An iend vector is automatically loaded
                                 ; at the cursor position where the run command is entered. Run then
                                 ; enters a tight execution loop and begins executing IWRD vectors
                                 ; in UF0 space, beginning at the first vector at (ufpcH:ufpclo) = UF0ST.
                                 ; (ufpcH:ufpclo) is incremented to point to the next IWRD vector.
                                 ; Execution continues until the iend vewctor is encountered. The iend
                                 ; routine resets (ufpcH:ufpclo) = UF0ST, which causes execution to
                                 ; begin again at the first IWRD vector stored in UF0.
                                 ;
000f25 5552
000f26 174e                      		.db		"RUN",ctlW
000f27 0f42                      		.dw		rune
000f28 0001                      		.dw		EDIT			; Editor mode only
000f29 0000                      		.dw		0
                                 ;
                                 irun:
000f2a d3b8                      		rcall	ufcsr			; (POINTR) <--- @(CURSOR)
                                +
000f2b e2f3                     +ldi ZH , high ( iend * 2 )
000f2c e9e4                     +ldi ZL , low ( iend * 2 )
                                 		ldzptr	iend			; iend <-- Z
000f2d 95f6                      		lsr		ZH
000f2e 95e7                      		ror		ZL				; Z/2 for vector address
000f2f d4e4                      		rcall	putwd			; Insert end command
                                 irun1:
000f30 d5fe                      		rcall	slinb			; Cursor to status line
                                +
000f31 e3f3                     +ldi ZH , high ( runm * 2 )
000f32 e6ee                     +ldi ZL , low ( runm * 2 )
                                 		ldzptr	runm			; Show running message
000f33 d6e9                      		rcall	pptr
                                 ;
000f34 94f8                      		cli							; Disable GI
000f35 e008                      		ldi		rmp, HIGH(RAMEND)	; Init MSB stack
000f36 bf0e                      		out		SPH, rmp
000f37 ef0f                      		ldi		rmp, LOW(RAMEND)	; Init LSB stack
000f38 bf0d                      		out		SPL, rmp
000f39 9478                      		sei							; Enable GI
                                 ;
                                 ; The execution loop is written as tight as possible for maximum
                                 ; speed when running UF program. ufpch:ufpcl is the UF program counter,
                                 ; incremented each pass through loop. ufpch:ufpcl can be modified by an
                                 ; IWRD. For example, the iend command, which is mandatory at the end
                                 ; of a user's program, reloads ufpch;ufpcl with UF0ST address. This causes
                                 ; the program to loop back to the start and repeat again.
                                 ;
                                 irun2:
000f3a 2db4                      		mov		XH,ufpch	; Pointer to UF0 vector
000f3b 2da5                      		mov		XL,ufpcl
000f3c 91fd                      		ld		ZH,X+		; Vector to Z
000f3d 91ed                      		ld		ZL,X+
                                 ;
000f3e 2e4b                      		mov		ufpch,XH	; Update to next vector
000f3f 2e5a                      		mov		ufpcl,XL
                                 ;
000f40 9509                      		icall				; Execute IWRD @(ufpch:ufpcl)
000f41 cff8                      		rjmp	irun2		; Loop again
                                 ;
                                 rune:
                                 ;
                                 ; --- Execute UF0 program ---		(OK)
                                 ;
                                 exec:
000f42 5845
000f43 1730                      		.db		"EX0",ctlW
000f44 0f49                      		.dw		ex0x
000f45 0001                      		.dw		EDIT			; Editor mode only
000f46 0000                      		.dw		0
                                 ;
                                 iex0:
000f47 d01d                      		rcall	iuf0			; Initialize UF0 buffers
000f48 cfe7                      		rjmp	irun1
                                 ex0x:
                                 ;
                                 ; --- Show Help Screen ---		(OK)
                                 ;
                                 help:
000f49 173f                      		.db		"?",ctlW
000f4a 0f55                      		.dw		helpe
000f4b 0001                      		.dw		EDIT			; Editor mode only
000f4c 0000                      		.dw		0
                                 ;
                                 ihelp:
000f4d d5e7                      		rcall	clean
                                +
000f4e e2ff                     +ldi ZH , high ( hlpm * 2 )
000f4f e6ee                     +ldi ZL , low ( hlpm * 2 )
                                 		ldzptr	hlpm		; Print help screen
000f50 d6cc                      		rcall	pptr
000f51 d624                      		rcall	sak
000f52 d5e2                      		rcall	clean
000f53 d40b                      		rcall	dpage
000f54 9508                      		ret
                                 helpe:
                                 
                                 ;
                                 ; --- Restart in Edit mode ---
                                 ;
                                 restr:
000f55 172f                      		.db		"/",ctlW
000f56 0f60                      		.dw		restre
000f57 0001                      		.dw		EDIT			; Editor mode only
000f58 0000                      		.dw		0
                                 ;
                                 irestr:
000f59 94f8                      		cli							; Disable GI
000f5a e008                      		ldi		rmp, HIGH(RAMEND)	; Init MSB stack
000f5b bf0e                      		out		SPH, rmp
000f5c ef0f                      		ldi		rmp, LOW(RAMEND)	; Init LSB stack
000f5d bf0d                      		out		SPL, rmp
000f5e 9478                      		sei							; Enable GI
000f5f c32a                      		rjmp	cml
                                 restre:
                                 ;
                                 ; --- Setup User File 0 ---
                                 ;
                                 uf0:
000f60 4655
000f61 1730                      		.db		"UF0",ctlW		; Setup User File 0 for execution
000f62 0f6e                      		.dw		uf0e
000f63 0001                      		.dw		EDIT			; Editor mode only
000f64 0000                      		.dw		0
                                 ;
                                 iuf0:
000f65 940e 02a6                 		call	inzuf0
000f67 d702                      		rcall	pxy
000f68 0218                      		.db		24,2
000f69 d6cb                      		rcall	ceol
                                +
000f6a e3f3                     +ldi ZH , high ( uf0m * 2 )
000f6b eae6                     +ldi ZL , low ( uf0m * 2 )
                                 		ldzptr	uf0m
000f6c d6b0                      		rcall	pptr
000f6d 9508                      		ret
                                 uf0e:
                                 ;
                                 ; Insert a NOP at the current cursor position. Move all instructions	(OK)
                                 ; in the User File down 1 location from the current cursor position.
                                 ; The last instruction in file is lost.
                                 ;
                                 ; Registers: X, Y, Z, DE (YH:YL), count
                                 ;
                                 ; Source/Destination (S, S+1) <-- X
                                 ; (Z) = S+1 image, (Y) = S image
                                 ; count = words to move, (POINTR - UF0EN)
                                 ;
                                 ins:
000f6e 4e49
000f6f 1753                      		.db		"INS",ctlW
000f70 0f92                      		.dw		inse
000f71 0001                      		.dw		EDIT
000f72 0000                      		.dw		0
                                 ;
                                 iins:
000f73 d36f                      		rcall	ufcsr			; (POINTR) <-- UF0 @(cursor line), address in UF0
000f74 91b0 0342                 		lds		XH,pointr
000f76 91a0 0343                 		lds		XL,pointr+1		; Current Source location, S <-- X
                                 ;
000f78 e0d2                      		ldi		YH,high(uf0en)
000f79 e5cf                      		ldi		YL,low(uf0en)
000f7a 1bca                      		sub		YL,XL
000f7b 0bdb                      		sbc		YH,XH
000f7c 95d6                      		lsr		YH
000f7d 95c7                      		ror		YL				; Y/2 for word count
000f7e 2e2c                      		mov		count,YL		; Counter for words to move
                                 ;
                                 ; Preload Y buffer with IWRD at cursor, i.e. S location in UF0
                                 ;
000f7f 91dd                      		ld		YH,X+			; Preload (Y) <-- @(S)
000f80 91cd                      		ld		YL,X+			; S+1 <-- X
                                 ;
                                 ins1:
000f81 91fd                      		ld		ZH,X+			; Z <-- @(S+1)
000f82 91ec                      		ld		ZL,X			; Z = Z+1
                                 ;
000f83 ef0f                      		ldi		rmp,-1
000f84 0fa0                      		add		XL,rmp
000f85 ef0f                      		ldi		rmp,0xff
000f86 1fb0                      		adc		XH,rmp			; S+1 <-- X
                                 ;
000f87 93dd                      		st		X+,YH			; S+1 <-- (Y)
000f88 93cd                      		st		X+,YL			; Next word <-- X
                                 ;
000f89 2fdf                      		mov		YH,ZH
000f8a 2fce                      		mov		YL,ZL			; Copy Z to Y
                                 ;
000f8b 942a                      		dec		count
000f8c f7a1                      		brne	ins1
                                 ;
000f8d e0fe                      		ldi		ZH,high(inop)	; NOP's IWRD address
000f8e eee6                      		ldi		ZL,low(inop)
000f8f d484                      		rcall	putwd			; @(cursor) <-- inop
000f90 d3ce                      		rcall	dpage
000f91 9508                      		ret
                                 inse:
                                 ;
                                 ; Delete the instruction at the current cursor position. Move all		(OK)
                                 ; instructions in the User File up 1 location to the current cursor
                                 ; position @POINTR. A NOP instruction is inserted in the last
                                 ; location of the current User File.
                                 ;
                                 delet:
                                 dele:
000f92 4544
000f93 174c                      		.db		"DEL",ctlW
000f94 0fb2                      		.dw		delee
000f95 0001                      		.dw		EDIT
000f96 0000                      		.dw		0
                                 idele:
000f97 d34b                      		rcall	ufcsr			; (POINTR) <-- UF0 @(cursor line), address in UF0
000f98 91b0 0342                 		lds		XH,pointr
000f9a 91a0 0343                 		lds		XL,pointr+1		; Current Source location, S <-- X
                                 ;
000f9c e0d2                      		ldi		YH,high(uf0en)
000f9d e5cf                      		ldi		YL,low(uf0en)
000f9e 1bca                      		sub		YL,XL
000f9f 0bdb                      		sbc		YH,XH
000fa0 95d6                      		lsr		YH
000fa1 95c7                      		ror		YL				; Y/2 for word count
000fa2 2e2c                      		mov		count,YL		; Counter for words to move
                                 ;
000fa3 2fdb                      		mov		YH,XH			; Copy X to Y
000fa4 2fca                      		mov		YL,XL			; S <-- X
000fa5 9622                      		adiw	Y,2				; S+1 <-- Y
                                 ;
                                 dele1:
000fa6 91f9                      		ld		ZH,Y+			; Z <-- @(S+1)
000fa7 91e9                      		ld		ZL,Y+			; Z = Z+1
000fa8 93fd                      		st		X+,ZH
000fa9 93ed                      		st		X+,ZL
000faa 942a                      		dec		count
000fab f7d1                      		brne	dele1
                                 ;
                                 ; Place a NOP at X
                                 ;
000fac e0fe                      		ldi		ZH,high(inop)	; NOP's IWRD address
000fad eee6                      		ldi		ZL,low(inop)
000fae 93fd                      		st		X+,ZH			; UFx <-- Y
000faf 93ed                      		st		X+,ZL
000fb0 d3ae                      		rcall	dpage
000fb1 9508                      		ret
                                 delee:
                                 ;
                                 ; Print current program version
                                 ;
                                 pver:
000fb2 4556
000fb3 1752                      		.db		"VER",ctlW
000fb4 0fbf                      		.dw		pverx
000fb5 0001                      		.dw		EDIT
                                 pverL:
000fb6 fffc                      		.dw		(pver-pverL)
                                 ;
                                 ipver:
000fb7 940e 152f                 		call	slinb
                                +
000fb9 e0f0                     +ldi ZH , high ( verm * 2 )
000fba e6e8                     +ldi ZL , low ( verm * 2 )
                                 		ldzptr	verm
000fbb 940e 161d                 		call	pptr
000fbd 6880                      		sbr		flaga,(1<<xclinf)	; Delayed line clear ###
000fbe 9508                      		ret
                                 pverx:
                                 ;
                                 ;************************************************
                                 ;
                                 ; Store and load UF and Timer settings to EEPROM
                                 ;
                                 ;************************************************
                                 ;
                                 ; Registers: rmp, rga, Y, X, Z
                                 ;
                                 stp:
000fbf 5453
000fc0 524f
000fc1 1745                      		.db		"STORE",ctlW
000fc2 0fde                      		.dw		stpx
000fc3 0001                      		.dw		EDIT
                                 stpL:
000fc4 fffb                      		.dw		(stp-stpL)
                                 istp:
000fc5 d569                      		rcall	slinb						; Show storing message
                                +
000fc6 e3f3                     +ldi ZH , high ( storem * 2 )
000fc7 efe4                     +ldi ZL , low ( storem * 2 )
                                 		ldzptr	storem
000fc8 d654                      		rcall	pptr
                                 ;
000fc9 ef0f                      		ldi		rmp,0xff
000fca bd01                      		out		EEARL,rmp					; EEPROM start address = -1 as
000fcb bd02                      		out		EEARH,rmp					;  EEAR is pre-decremented
000fcc e002                      		ldi		rmp,high(filend-uf0st)		; Buffer size byte counter
000fcd 2fb0                      		mov		XH,rmp
000fce e100                      		ldi		rmp,low(filend-uf0st)		; Buffer size byte counter
000fcf 2fa0                      		mov		XL,rmp						; X = bytes to move
                                 ;
000fd0 e0f1                      		ldi		ZH,high(uf0st)				; UF0 <-- Z, source
000fd1 e0e0                      		ldi		ZL,low(uf0st)
                                 ;
                                 stp1:
000fd2 9101                      		ld		rmp,Z+			; Get source byte from UF0
000fd3 d6eb                      		rcall	EEWrSeq			; Write to EEPROM
                                 ;
000fd4 e011                      		ldi		rga,1			; X = X-1
000fd5 1ba1                      		sub		XL,rga
000fd6 2711                      		clr		rga
000fd7 0bb1                      		sbc		XH,rga
                                 ;
000fd8 23bb                      		tst		XH				; High counts 0?
000fd9 f7c1                      		brne	stp1			;	No, loop
000fda 23aa                      		tst		XL				; Low counts 0?
000fdb f7b1                      		brne	stp1			;	No, loop
                                 ;
000fdc d599                      		rcall	sak
000fdd 9508                      		ret
                                 stpx:
                                 ;
                                 ; Load EEPROM UF0 image to UF0 space
                                 ;
                                 ldp:
000fde 4f4c
000fdf 4441
000fe0 1700                      		.db		"LOAD",0,ctlW
000fe1 0ffb                      		.dw		ldpx
000fe2 0001                      		.dw		EDIT
                                 ldpL:
000fe3 fffb                      		.dw		(ldp-ldpL)
                                 ildp:
000fe4 ef0f                      		ldi		rmp,0xff
000fe5 bd01                      		out		EEARL,rmp					; EEPROM start address = -1
000fe6 bd02                      		out		EEARH,rmp
000fe7 e002                      		ldi		rmp,high(filend-uf0st)		; Buffer size byte counter
000fe8 2fb0                      		mov		XH,rmp
000fe9 e100                      		ldi		rmp,low(filend-uf0st)		; Buffer size byte counter
000fea 2fa0                      		mov		XL,rmp						; X = bytes to move
                                 ;
000feb e0f1                      		ldi		ZH,high(uf0st)				; UF0 <-- Z, destination
000fec e0e0                      		ldi		ZL,low(uf0st)
                                 ;
                                 ldp1:
000fed d6de                      		rcall	EERdSeq			; Get source byte from EEPROM
000fee 9301                      		st		Z+,rmp			; Write to UF0 buffer
                                 ;
000fef e011                      		ldi		rga,1			; X = X-1
000ff0 1ba1                      		sub		XL,rga
000ff1 2711                      		clr		rga
000ff2 0bb1                      		sbc		XH,rga
                                 ;
000ff3 23bb                      		tst		XH				; High counts 0?
000ff4 f7c1                      		brne	ldp1			;	No, loop
000ff5 23aa                      		tst		XL				; Low counts 0?
000ff6 f7b1                      		brne	ldp1			;	No, loop
                                 ;
000ff7 940e 02a6                 		call	inzuf0			; Restart editor at line 0
000ff9 d365                      		rcall	dpage
000ffa 9508                      		ret
                                 ldpx:
                                 ;
                                 ;###########################################################################
                                 ;
                                 ;
                                 ; Load one-shot timer re-load buffers TRB0..7 & TRB8..F
                                 ;
                                 ldt:
000ffb 444c
000ffc 1754                      		.db		"LDT",ctlW
000ffd 106e                      		.dw		ldtx
000ffe 0001                      		.dw		EDIT
                                 ldtL:
000fff fffc                      		.dw		(ldt-ldtL)
                                 ;
                                 ildt:
001000 d52e                      		rcall	slinb			; Position on status line
                                +
001001 e3f4                     +ldi ZH , high ( ldtmm * 2 )
001002 e1e6                     +ldi ZL , low ( ldtmm * 2 )
                                 		ldzptr	ldtmm			; Show LDT command message
001003 d619                      		rcall	pptr
                                 ;
001004 9100 0348                 		lds		rmp,offs		; Get editor's cursor
001006 930f                      		push	rmp				; Save offs
001007 2700                      		clr		rmp				; Start at timer 0
001008 9300 0348                 		sts		offs,rmp		; offs for timer settings
00100a 940e 1535                 		call	clean			; Clean up display area
00100c 940e 1250                 		call	prthdr			; Print headers
00100e 940e 126d                 		call	prldt			; Print LDT command message, ceol
001010 2700                      		clr		rmp
001011 9300 0348                 		sts		offs,rmp		; (offs) <-- TON0 buffer
001013 940e 120c                 		call	prtbs			; Display timer re-load buffer settings
001015 d223                      		rcall	prthi			; Hilight the first buffer
                                 ldt0:
001016 940e 1551                 		call	enter			; Enter prompt
                                 ldt1:
001018 940e 141f                 		call	glin			; Get timer value
00101a ff85                      		sbrs	flaga,escf
00101b c01a                      		rjmp	ldt1a			; Skip arrow commands if not ESC
                                 ;
                                 ; Process Left/Right cursor keys
                                 ;
                                 ;       Left arrow        ESC [ D   -->   Previous timer
                                 ;       Right arrow       ESC [ C   -->   Next timer
                                 ;
                                 ldtrt:
00101c 940e 15ee                 		call	ci				; Else get '[' character after the ESC
00101e 351b                      		cpi		rga,'['			; '['?
00101f f7b1                      		brne	ldt0			; No, redo enter line
001020 940e 15ee                 		call	ci				; Process cursor keys
001022 3413                      		cpi		rga,'C'			; -> key?
001023 f421                      		brne	ldtlf
001024 d21b                      		rcall	prtlo			; Hilight off
001025 d1d4                      		rcall	nxbuf			; Next timer
001026 d212                      		rcall	prthi			; Hilight on
001027 cfee                      		rjmp	ldt0
                                 ldtlf:
001028 3414                      		cpi		rga,'D'			; <- key?
001029 f421                      		brne	ldt1b
00102a d215                      		rcall	prtlo			; Hilight off
00102b d1d7                      		rcall	pvbuf			; Previous timer
00102c d20c                      		rcall	prthi			; Hilight on
00102d cfe8                      		rjmp	ldt0
                                 ;
                                 ldt1b:
00102e 3411                      		cpi		rga,'A'
00102f f409                      		brne	ldt1c
001030 cfe5                      		rjmp	ldt0
                                 ;
                                 ldt1c:
001031 3412                      		cpi		rga,'B'
001032 f409                      		brne	ldt1d
001033 cfe2                      		rjmp	ldt0
                                 ;
                                 ldt1d:
001034 d5b9                      		rcall	ci				; eat the '~' on INS and DEL
001035 cfe0                      		rjmp	ldt0
                                 ;
                                 ; Non-cursor entry, check for Z key by checking linbuf(0) character
                                 ;
                                 ldt1a:
                                +
001036 e0b3                     +ldi XH , high ( linbuf )
001037 e3a8                     +ldi XL , low ( linbuf )
                                 		ldxptr	linbuf				; Point to linbuf
001038 911c                      		ld		rga,X				; Get a linbuf(0) character
001039 940e 14bd                 		call	case				; Fold to UC
00103b 351a                      		cpi		rga,'Z'				; Z key?
00103c f421                      		brne	ldt2				;	No, continue
00103d d238                      		rcall	zdt					;	Yes, clear timer buffers
                                 ;
                                 ; Update buffer display
                                 ;
00103e d1cd                      		rcall	prtbs				; Show timer buffers
00103f d1f9                      		rcall	prthi				; Hilight buffer
001040 cfd5                      		rjmp	ldt0				; Next entry
                                 ;
                                 ; Ready to check for new timer setting entry.
                                 ; Check for valid HH:MM input and load new timer setting if found
                                 ;
                                 ldt2:
001041 940e 145c                 		call	gchr				; Process line input character, X+
001043 2311                      		tst		rga					; Line empty?
001044 f0d1                      		breq	ldte				;	Yes, exit
                                 ldt3:
001045 940e 14c4                 		call	gnum				; Get possible number, set numfl if good
001047 ff83                      		sbrs	flaga,numfl			; numfl set?
001048 c00d                      		rjmp	ldterr				;	No, input error, get new input
001049 7f87                      		cbr		flaga,(1<<numfl)	;	Yes, clear numfl, valid entry
                                 ;
                                 ldt4:
00104a ff87                      		sbrs	flaga,xclinf		; Keep status line?
00104b c003                      		rjmp	ldt5				; Yes, leave status line
00104c 778f                      		cbr		flaga,(1<<xclinf)
00104d 940e 126d                 		call	prldt				; Show LDT command message, erase rest of line
                                 ;
                                 ; Got good entry, load timer and show new entry
                                 ;
                                 ldt5:
00104f 940e 1497                 		call	pdbuf				; Show new timer reload setting
001051 d1f1                      		rcall	ldtb				; load timer buffer @(offs) <-- DBA
001052 d1c7                      		rcall	prbuf				; Show new buffer entry
001053 d1a6                      		rcall	nxbuf				; Move to next buffer
001054 d1e4                      		rcall	prthi				; Show buffer highlight
001055 cfc0                      		rjmp	ldt0				; Get next buffer entry
                                 ;
                                 ; Input error handler
                                 ;
                                 ldterr:
001056 940e 166a                 		call	pxy					; Position cursor on status line
001058 2d18                      		.db		24,45
                                +
001059 e3f3                     +ldi ZH , high ( err1 * 2 )
00105a ece8                     +ldi ZL , low ( err1 * 2 )
                                 		ldzptr	err1				; Input error message
00105b 940e 161d                 		call	pptr
00105d 6880                      		sbr		flaga,(1<<xclinf)	; Delayed line clear
00105e cfb7                      		rjmp	ldt0				; Redo input
                                 ;
                                 ; Exit back to editor
                                 ;
                                 ldte:
00105f 940e 166a                 		call	pxy					; Blank line found, exit
001061 0616                      		.db		22,6
001062 940e 1635                 		call	ceol				; Clear enter prompt line
001064 910f                      		pop		rmp
001065 9300 0348                 		sts		offs,rmp			; Restore editor's offs
001067 940e 1535                 		call	clean				; Clean up display area
001069 940e 135f                 		call	dpage				; Refresh program page
00106b 940e 155b                 		call	pruf0				;	UF1 selected, switch to UF1
00106d 9508                      		ret
                                 ;
                                 ldtx:
                                 ;
                                 ;
                                 ;###########################################################################
                                 ;
                                 ; File Transfer Commands
                                 ;
                                 ;
                                 .include		"file-transfer.asm"
                                 
                                 ;
                                 ; file-transfer.asm - Dictionary Commands
                                 ;
                                 ;  Version 0
                                 ;
                                 ;###########################################################################
                                 ; MIT License
                                 ;
                                 ; Copyright (c) 2019 Francis Lyn
                                 ;
                                 ; Permission is hereby granted, free of charge, to any person obtaining a copy
                                 ; of this software and associated documentation files (the "Software"), to deal
                                 ; in the Software without restriction, including without limitation the rights
                                 ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                                 ; copies of the Software, and to permit persons to whom the Software is
                                 ; furnished to do so, subject to the following conditions:
                                 ;
                                 ; The above copyright notice and this permission notice shall be included in all
                                 ; copies or substantial portions of the Software.
                                 ;
                                 ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                                 ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                                 ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                                 ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                                 ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                                 ; SOFTWARE.
                                 ;###########################################################################
                                 ;
                                 ; INCLUDE this module in main code
                                 ; 
                                 ;
                                 ; Routines to read and write Intel hex file format data files between
                                 ; host PC and uTile. Hex file format:
                                 ;
                                 ;	:llaaaatt[dd...]	ascii characters
                                 ;	':' is start-of-record preamble
                                 ;	ll is length or record
                                 ;	aaaa is word length load address
                                 ;	tt is record type, 00 for data record used here
                                 ;	dd is data bytes in the record.
                                 ;
                                 ; --- File Transfer Words ---
                                 ;
                                 ;  read - File read routine.
                                 ;
                                 ;  read downloads a uTile User File Application from host that was previously
                                 ;  stored with the write command word.
                                 ;
                                 ;  A '/' key aborts download at start. Overrun error exits routine.
                                 ;
                                 ; Registers:
                                 ;  rga, rmp, general purpose	rgv = counter
                                 ;  rgc = checksum				rgd = counter for record read
                                 ;  XHL = RAM pointer			YHL = 16 bit buffer, YL has byte from <rdbyt>
                                 ; paceb flag used in <nochrs>
                                 ;
                                 ;  Since the <rdchr> routine occurs at several levels of subroutines,
                                 ;  error exits from <rdchr> back to the editor screen must restore the
                                 ;  SP to the initial state.
                                 ;
                                 read:
00106e 4552
00106f 4441
001070 1700                      		.db		"READ",0,ctlW
001071 10eb                      		.dw		readx
001072 0001                      		.dw		EDIT					; Interpreter only
                                 readL:
001073 fffb                      		.dw		(read-readL)
                                 ;
                                 iread:
001074 940e 1535                 		call	clean					; Clear screen
001076 940e 166a                 		call	pxy						; Print file read message
001078 1909                      		.db		9,25
                                +
001079 e2f3                     +ldi ZH , high ( rdmsg * 2 )
00107a e3e0                     +ldi ZL , low ( rdmsg * 2 )
                                 		ldzptr	rdmsg					; Read file header message
00107b 940e 161d                 		call	pptr
00107d 940e 152b                 		call	slina					; Status line
                                 ;
                                 ;  Read a line of hex format data from serial port
                                 ;
                                 read1:
00107f 940e 10bf                 		call	rdchr					; Wait for serial character input
001081 321f                      		cpi		rga,'/'					; Abort character?
001082 f419                      		brne	read2
001083 940e 10e0                 		call	nochrs					;  Eat possible junk
001085 c034                      		rjmp	rdabt					;  Yes, exit
                                 read2:
001086 331a                      		cpi		rga,':'					; Start of record?
001087 f7b9                      		brne	read1					; No, wait for start character
001088 940e 10c6                 		call	rdbyt					; Yes, get count byte, binary value returned in YL
00108a f4e0                      		brcc	rderr					; Error exit
00108b 23cc                      		tst		YL						; Count = 0?
00108c f0f9                      		breq	rdend					; Yes, exit
                                 ;
00108d 2f4c                      		mov		rgd,YL					; Load bytes counter
00108e 2f3c                      		mov		rgc,YL					; Load initial checksum value to rgc
                                 ;
00108f 940e 10c4                 		call	rdwrd					; YHL <--load address
001091 f4a8                      		brcc	rderr					; Error exit
001092 01de                      		movw	XH:XL,YH:YL				; XHL <-- YHL
001093 0f3d                      		add		rgc,YH					; Add address hi to checksum
001094 0f3c                      		add		rgc,YL					; Add address lo to checksum
                                 ;
001095 940e 10c6                 		call	rdbyt					; Get record type
001097 f478                      		brcc	rderr					; Error exit
001098 23cc                      		tst		YL						; Type = 0?
001099 f491                      		brne	rdend					; No, read end
                                 ;
                                 read3:
00109a 940e 10c6                 		call	rdbyt					; Get data byte
00109c f450                      		brcc	rderr					; Error exit
00109d 93cd                      		st		X+,YL					; Store in RAM
00109e 0f3c                      		add		rgc,YL					; Update checksum
00109f 954a                      		dec		rgd
0010a0 f7c9                      		brne	read3					; Continue till record done
                                 ;
0010a1 940e 10c6                 		call	rdbyt					; Get sender's 2's compl checksum
0010a3 f418                      		brcc	rderr					; Error exit
0010a4 0f3c                      		add		rgc,YL					; Add to receiver's checksum
0010a5 2333                      		tst		rgc
0010a6 f2c1                      		breq	read1					; Continue reading if match
                                 ;
                                 ;  Return routines
                                 ;
                                 rderr:
0010a7 940e 10e0                 		call	nochrs					; Gobble input till pause
                                +
0010a9 e2f3                     +ldi ZH , high ( errd * 2 )
0010aa e6e8                     +ldi ZL , low ( errd * 2 )
                                 		ldzptr	errd					; Print error message
0010ab c004                      		rjmp	rdend1
                                 ;
                                 ;  Arrive here at end of successful file read
                                 ;
                                 rdend:
0010ac 940e 10e0                 		call	nochrs				; Gobble input till pause
                                +
0010ae e2f3                     +ldi ZH , high ( rendm * 2 )
0010af e5e2                     +ldi ZL , low ( rendm * 2 )
                                 		ldzptr	rendm				; Print end message
                                 rdend1:
0010b0 940e 161d                 		call	pptr
                                 ;
                                 mmnu:
                                +
0010b2 e2f3                     +ldi ZH , high ( mmsg * 2 )
0010b3 e7e8                     +ldi ZL , low ( mmsg * 2 )
                                 		ldzptr	mmsg				; Print menu message
0010b4 940e 161d                 		call	pptr
                                 mmnu1:
0010b6 940e 15ee                 		call	ci					; Enter '/' for editor screen
0010b8 321f                      		cpi		rga,'/'
0010b9 f7e1                      		brne	mmnu1				; Drop all other characters
                                 ;
                                 rdabt:
0010ba d4aa                      		rcall	prscn				; Print command screen
0010bb d49f                      		rcall	pruf0				; UF0 selected
0010bc dea8                      		rcall	iuf0				; Setup control buffers for User File 0
0010bd d2a1                      		rcall	dpage				; Display page 0
0010be 9508                      		ret
                                 ;
                                 ;
                                 ;  Data read routines - <rdchr> uses the normal console serial port.
                                 ;  Scan for character, return with character in rga else rga = 0.
                                 ;
                                 ;	Exit:	Character in rga
                                 ;			If no character, rga = 0
                                 ;
0010bf 940e 15e5                 rdchr:	call	getc				; Check for incoming character
0010c1 2311                      		tst		rga
0010c2 f3e1                      		breq	rdchr				; Wait for received character
0010c3 9508                      		ret
                                 ;
                                 ;  Read 4 ASCII hex characters, convert to binary, YHL <-- word
                                 ;
                                 rdwrd:
0010c4 e074                      		ldi		rgv,4				; 4 char/word
0010c5 c001                      		rjmp	nxchr
                                 ;
                                 ;  Read 2 ASCII hex characters, and leave binary byte in YHL
                                 ;
                                 rdbyt:	
0010c6 e072                      		ldi		rgv,2				; 2 char/byte
                                 ;
                                 ; Read in ASCII characters, convert to valid hex digit, and
                                 ; shift result into YHL. On error, exit to rderr. On exit
                                 ; YHL has binary data, byte or word.
                                 ;
                                 nxchr:
0010c7 27dd                      		clr		YH					; Clear result regs
0010c8 27cc                      		clr		YL
                                 nxch1:
0010c9 940e 10bf                 		call	rdchr				; Get a serial char, rga = ascii char
0010cb 940e 151c                 		call	hexdg				; Convert to hex digit, result in rga
0010cd f440                      		brcc	nxchex				; Not a hex digit, error exit
                                 ;
0010ce 931f                      		push	rga
0010cf 940e 10d7                 		call	sl4y				; Shift YHL 4 left
0010d1 911f                      		pop		rga
0010d2 2bc1                      		or		YL,rga				; Merge in new nibble in rga to YL
0010d3 957a                      		dec		rgv
0010d4 f7a1                      		brne	nxch1				; Loop till done
0010d5 9408                      		sec							; Routine successful, C = 1
                                 nxchex:
0010d6 9508                      		ret
                                 ;
                                 ; Shift YHL left 4 bits. YL low nibble = 0b0000
                                 ;
                                 sl4y:
0010d7 934f                      		push	rgd
0010d8 e044                      		ldi		rgd,4				; Shift counter
0010d9 9488                      		clc
                                 sl4y1:
0010da 1fcc                      		rol		YL
0010db 1fdd                      		rol		YH
0010dc 954a                      		dec		rgd
0010dd f7e1                      		brne	sl4y1
0010de 914f                      		pop		rgd
0010df 9508                      		ret
                                 ;
                                 ; Gobbles input stream until there is a quiet period. 
                                 ; Used to get rid of wrong file type transfers.
                                 ;
                                 nochrs:
0010e0 7f97                      		cbr		flagb,(1<<paceb)	; Use 100 ms paceb flag
0010e1 ff93                      		sbrs	flagb,paceb			; Wait for paceb set
0010e2 cffd                      		rjmp	nochrs
0010e3 7f97                      		cbr		flagb,(1<<paceb)	; Use 100 ms paceb flag
                                 ;
                                 nochr1:
0010e4 940e 15e5                 		call	getc				; Scan input buffer
0010e6 2311                      		tst		rga
0010e7 f011                      		breq	nochrx				; Quiet, exit
                                 nochr2:
0010e8 ff93                      		sbrs	flagb,paceb			; Wait for paceb set
0010e9 cffa                      		rjmp	nochr1				; Until timeout ends
                                 nochrx:
0010ea 9508                      		ret	
                                 ;
                                 ;
                                 readx:
                                 ;
                                 ;
                                 ;  write - User File write routine.
                                 ;
                                 ;  Upload uTile User File Application to host for later retrieval
                                 ;  with the read command word.
                                 ;
                                 ;  Registers:
                                 ;		XHL = RAM buffer pointer, 16b
                                 ;		YHL = Filesize counter, 16b
                                 ;		rga, rmp general purpose registers
                                 ;		rgb = partial record counter
                                 ;		rgc = checksum
                                 ;		rgd = counter
                                 ;		count = character counter
                                 ;
                                 ;
                                 ; The following addresses define the RAM buffer area for the UF0 space
                                 ; as well as the one-shot timers reload buffers
                                 ;
                                 ;	 filbeg = uf0st:
                                 ;	 filend = TCB0:, next byte after TRBf
                                 ;
                                 ;
                                 write:
0010eb 5257
0010ec 5449
0010ed 1745                      		.db		"WRITE",ctlW
0010ee 11c5                      		.dw		writex
0010ef 0001                      		.dw		EDIT					; Interpreter only
                                 writeL:
0010f0 fffb                      		.dw		(write-writeL)
                                 ;
                                 Iwrite:
0010f1 940e 1535                 		call	clean
0010f3 940e 166a                 		call	pxy						; Position to status line
0010f5 1109                      		.db		9,17
                                +
0010f6 e2f2                     +ldi ZH , high ( wrmsg * 2 )
0010f7 ede6                     +ldi ZL , low ( wrmsg * 2 )
                                 		ldzptr	wrmsg					; File reader header message
0010f8 940e 161d                 		call	pptr
0010fa 940e 152b                 		call	slina
                                +
0010fc e2f3                     +ldi ZH , high ( xfrm * 2 )
0010fd e0e6                     +ldi ZL , low ( xfrm * 2 )
                                 		ldzptr	xfrm					; Transfer message
0010fe 940e 161d                 		call	pptr
001100 940e 166a                 		call	pxy
001102 010b                      		.db		11,1
                                 ;
                                 ;  Wait for console start or abort command '/'
                                 ;
                                 write1:
001103 940e 15ee                 		call	ci						; Scan for input 'CR' or '/'
001105 301d                      		cpi		rga,cr					; Start upload?
001106 f019                      		breq	write3					;   Start upload on'CR'
                                 ;
                                 write2:
001107 321f                      		cpi		rga,'/'					; '/' for editor screen?
001108 f7d1                      		brne	write1					;	No, keep looking
001109 c034                      		rjmp	wrex					; Exit
                                 ;
                                 ; Set up pointer XHL to source buffers
                                 ;
                                 write3:	
                                +
00110a e0b1                     +ldi XH , high ( filbeg )
00110b e0a0                     +ldi XL , low ( filbeg )
                                 		ldxptr	filbeg					; Start of buffer area to save
                                 ;
                                 write4:
00110c e0d2                      		ldi		YH,high(filend-filbeg)	; Filesize counter
00110d e1c0                      		ldi		YL,low(filend-filbeg)	; Filesize counter
                                 ;
                                 ; Shift YHL right 4 times, LS nibble into rgb. This converts file size
                                 ; number in YHL into number ofrecords of 0x10 data bytes long, partial
                                 ; record remainder is left in rgb (after swapping nibbles).
                                 ; At the end of the right shift, YHL has number of full records count.
                                 ;
                                 sr4y:
00110e 9488                      		clc
00110f e044                      		ldi		rgd,4				; Shift counter
001110 2722                      		clr		rgb					; Clear result rgb
                                 sr4y1:
001111 95d7                      		ror		YH
001112 95c7                      		ror		YL
001113 9527                      		ror		rgb
001114 954a                      		dec		rgd
001115 f7d9                      		brne	sr4y1
001116 9522                      		swap	rgb					; Partial record count in rgb
                                 ;
001117 23dd                      		tst		YH
001118 f411                      		brne	sdfil
001119 23cc                      		tst		YL					; Full records?
00111a f031                      		breq	sdfil3				;	No, check for a partial record
                                 ;
                                 ;  Arrive here if whole record (rgc = 10) to be sent
                                 ;
                                 sdfil:
00111b 940e 1143                 		call	slhdr				; Send line header
                                 sdfil1:
00111d 940e 1154                 		call	sline				; Send a line of 16 characters
                                 sdfil2:
00111f 9721                      		sbiw	YH:YL,1				; Decrement whole records counter
001120 f7d1                      		brne	sdfil				; Keep sending data
                                 ;
                                 ; Arrive here to send a partial record if any. Number of data bytes
                                 ; in partial record is in rgb
                                 ;
                                 sdfil3:
001121 2322                      		tst		rgb					; Any data bytes in partial record?
001122 f041                      		breq	seof				;	No, no data bytes left
                                 ;
001123 e31a                      		ldi		rga,':'				;	Yes, send start of record ':'
001124 940e 15f5                 		call	co
001126 2f42                      		mov		rgd,rgb				; Load bytes counter with partial counts
001127 940e 1147                 		call	slhdr1				; Send line header
001129 940e 1154                 		call	sline				; Send the characters
                                 seof:
00112b e31a                      		ldi		rga,':'				; Send EOF line
00112c 940e 15f5                 		call	co					; ':00000001FF'
00112e e043                      		ldi		rgd,3				; Bytes to send
                                 seof1:
00112f 2711                      		clr		rga
001130 940e 15bf                 		call	pahex				; Send rga as ASCII hex digits
001132 954a                      		dec		rgd
001133 f7d9                      		brne	seof1
                                 ;
001134 e011                      		ldi		rga,0x01			; Record type 01
001135 940e 15bf                 		call	pahex
001137 e031                      		ldi		rgc,0x01			; Checksum byte
001138 940e 115c                 		call	sline1
                                 ;
                                 ;  Arrive here at the end of the upload operation
                                 ;
                                 wrend:
00113a 940e 15ee                 		call	ci					; Eat everything till '/'
00113c 321f                      		cpi		rga,'/'
00113d f7e1                      		brne	wrend				; Drop all other characters
                                 wrex:
00113e d426                      		rcall	prscn				; Print command screen
00113f 940e 155b                 		call	pruf0				; UF0 selected
001141 d21d                      		rcall	dpage				; Display page 0
001142 9508                      		ret							; Exit to main editor screen
                                 ;
                                 ;  Send line header
                                 ;
                                 slhdr:
001143 e31a                      		ldi		rga,':'				; Start of record character
001144 940e 15f5                 		call	co
001146 e140                      		ldi		rgd,0x10			; Send 10H characters per line
                                 slhdr1:
001147 2f14                      		mov		rga,rgd				; Get partial counts
001148 940e 15bf                 		call	pahex				; Send count as ASCII hexadecimal
00114a 2733                      		clr		rgc					; Clear checksum
00114b 0f34                      		add		rgc,rgd				; Add count to checksum
00114c 0f3a                      		add		rgc,XL				; Add load address low to checksum
00114d 0f3b                      		add		rgc,XH				; Add load address hi to checksum
00114e 940e 1164                 		call	padr				; Send load adress as ASCII hexadecimal
001150 2711                      		clr		rga					; Record type = 0
001151 940e 15bf                 		call	pahex				; Send record type 0, data
001153 9508                      		ret
                                 ;
                                 ;  Send a data bytes in record as ASCII hexadecimal
                                 ;
                                 sline:
001154 911d                      		ld		rga,X+				; Get byte to send
001155 931f                      		push	rga
001156 940e 15bf                 		call	pahex				; Send byte as ASCII hexadecimal
001158 911f                      		pop		rga					; Restore byte
001159 0f31                      		add		rgc,rga				; Add data to checksum
00115a 954a                      		dec		rgd					; Loop until all data in record sent
00115b f7c1                      		brne	sline
                                 ;
                                 sline1:
00115c 9530                      		com		rgc					; Complement checksum
00115d 9533                      		inc		rgc					; Form two's complement
00115e 2f13                      		mov		rga,rgc
00115f 940e 15bf                 		call	pahex				; Send 2's complement checksum
001161 940e 15fd                 		call	crlf				; Send 'CR'/'LF'
001163 9508                      		ret
                                 ;
                                 ;  Send pointer XHL contents (target address) as hexadecimal word
                                 ;
                                 ; Entry:
                                 ;		XHL points to RAM buffer address
                                 ; Exit:
                                 ;		XHL+
                                 ;
                                 padr:
001164 2f1b                      		mov		rga,XH				; Show high byte
001165 940e 15bf                 		call	pahex
001167 2f1a                      		mov		rga,XL				; Then low byte
001168 940e 15bf                 		call	pahex
00116a 9508                      		ret
                                 ;
                                 ;
                                 wrmsg:
00116b 6946
00116c 656c
00116d 7720
00116e 6972
00116f 6574
001170 2e20
001171 2e2e
001172 202e
001173 4327
001174 2752
001175 7420
001176 206f
001177 6573
001178 646e
001179 2e20
00117a 2e2e
00117b 202e
00117c 2f27
00117d 2027
00117e 6f74
00117f 6120
001180 6f62
001181 7472
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\file-transfer.asm(420): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(2535): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\file-transfer.asm' included form here
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
001182 001a                      	.db		"File write .... 'CR' to send .... '/' to abort",ctlZ
                                 ;
                                 xfrm:
001183 2a2a
001184 202a
001185 7453
001186 7261
001187 2f74
001188 6e65
001189 2064
00118a 6f68
00118b 7473
00118c 7420
00118d 6172
00118e 736e
00118f 6566
001190 2072
001191 7270
001192 636f
001193 6465
001194 7275
001195 2065
001196 2a2a
001197 1a2a                      	.db		"*** Start/end host transfer procedure ***",ctlZ
                                 ;
                                 rdmsg:
001198 6552
001199 6461
00119a 6e69
00119b 2067
00119c 6966
00119d 656c
00119e 2e20
00119f 2e2e
0011a0 2e2e
0011a1 202e
0011a2 2f27
0011a3 2027
0011a4 6f74
0011a5 6120
0011a6 6f62
0011a7 7472
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\file-transfer.asm(426): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(2535): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\file-transfer.asm' included form here
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
0011a8 001a                      	.db		"Reading file ...... '/' to abort",ctlZ
                                 ;
                                 rendm:
0011a9 6946
0011aa 656c
0011ab 7220
0011ac 6165
0011ad 2064
0011ae 6f63
0011af 706d
0011b0 656c
0011b1 6574
0011b2 2064
0011b3 1a2d                      	.db		"File read completed -",ctlZ
                                 ;
                                 errd:
0011b4 6552
0011b5 6461
0011b6 6520
0011b7 7272
0011b8 726f
0011b9 2021
0011ba 202d
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\file-transfer.asm(432): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(2535): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\file-transfer.asm' included form here
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
0011bb 001a                      	.db		"Read error! - ",ctlZ
                                 ;
                                 mmsg:
0011bc 2720
0011bd 272f
0011be 6620
0011bf 726f
0011c0 6d20
0011c1 6e65
0011c2 2075
0011c3 2d2d
0011c4 1a3e                      	.db		" '/' for menu -->",ctlZ
                                 ;
                                 ;
                                 writex:
                                 ;
                                 ;=====
                                 ;
                                 ;
                                 ;###########################################################################
                                 ;
                                 ;
                                 ; --- Last Word in Program ---
                                 ;
                                 end:
0011c5 4e45
0011c6 1744                      		.db		"END",ctlW
0011c7 11e9                      		.dw		ende
0011c8 0000                      		.dw		NORM
                                 endL:
0011c9 fffc                      		.dw		(end-endL)
                                 ;
                                 iend:
0011ca e001                      		ldi		rmp,high(uf0st)		; Reset ufpch:ufpcl to UF0 start
0011cb 2e40                      		mov		ufpch,rmp
0011cc e000                      		ldi		rmp,low(uf0st)
0011cd 2e50                      		mov		ufpcl,rmp
                                 ;
                                 ; --- Set/Reset Flip Flops ---
                                 ;
                                 ;  Set/Reset Flip Flops using three virtual bytes for 16 SR FFs.
                                 ;  Bytes SFF, RFF and QFF holds the Sn, Rn and Qn control bits
                                 ;  for the FFs. All 8 FFs are processsed in parallel. Control
                                 ;  words .Sn, .Rn and Qn. access individual FF bits. Reset takes
                                 ;  precedence over Set.
                                 ;
                                 rsff:
0011ce 9110 035e                 		lds		rga,vqff_0				; Get current Q state
0011d0 9100 035c                 		lds		rmp,vsff_0				; Get current S state
0011d2 2b10                      		or		rga,rmp					; rga <-- Q + S
0011d3 9310 035e                 		sts		vqff_0,rga				; Q <-- (Q + S)
0011d5 9100 035d                 		lds		rmp,vrff_0				; Get current R state
0011d7 9500                      		com		rmp						; rmp = !R
0011d8 2301                      		and		rmp,rga					; rmp = !R & (Q + S)
0011d9 9300 035e                 		sts		vqff_0,rmp				; Q <-- (Q + S)
                                 ;
0011db 9110 0361                 		lds		rga,vqff_1				; Get current Q state
0011dd 9100 035f                 		lds		rmp,vsff_1				; Get current S state
0011df 2b10                      		or		rga,rmp					; rga <-- Q + S
0011e0 9310 0361                 		sts		vqff_1,rga				; Q <-- (Q + S)
0011e2 9100 0360                 		lds		rmp,vrff_1				; Get current R state
0011e4 9500                      		com		rmp						; rmp = !R
0011e5 2301                      		and		rmp,rga					; rmp = !R & (Q + S)
0011e6 9300 0361                 		sts		vqff_1,rmp				; Q <-- (Q + S)
                                 ;
0011e8 9508                      		ret
                                 ende:
                                 ;
                                 ; ---
                                 ;
                                 
                                 dicte:
0011e9 001a                      		.db		ctlZ,0			; Dictionary end marker
                                 ;
                                 ; ---
                                 ;
                                 ; --- Autostart routine ---
                                 ;
                                 ;
                                 ; Test first byte of EEPROM first to see if is 0xff (not programmed). If
                                 ; unprogrammed, EEPROM does not have a valid UF0 image, then abort the load
                                 ; operation.
                                 ;
                                 autost:
                                 ;
0011ea 9918                      		sbic	PINB,PB0		; PB0/D8
0011eb 940c 11f9                 		jmp		autostx			; Exit if PB0 = 1
                                 ;
0011ed ef0f                      		ldi		rmp,0xff
0011ee bd01                      		out		EEARL,rmp		; EEPROM start address = -1
0011ef bd02                      		out		EEARH,rmp
0011f0 d4db                      		rcall	EERdSeq			; Get first source byte from EEPROM in rmp
0011f1 3f0f                      		cpi		rmp,0xff		; Is it erased?
0011f2 f031                      		breq	autostx			;	Yes, exit
                                 ;
0011f3 940e 0fe4                 		call	ildp			;	No, load EEPROM buffer to UF0 space
0011f5 940e 0f65                 		call	iuf0			;	Execute UF0 program
0011f7 940c 0f30                 		jmp		irun1
                                 ;
                                 autostx:
0011f9 9508                      		ret
                                 ;
                                 ;
                                 ;###########################################################################
                                 ;
                                 ;
                                 ;
                                 ; --- LDT Timer Setting sub-routines ---
                                 ;
                                 ; Go to next timer buffer
                                 ;
                                 nxbuf:
0011fa 9100 0348                 		lds		rmp,offs		; Get offs
0011fc 9503                      		inc		rmp				; Increment offs to next timer
0011fd 3100                      		cpi		rmp,ntim		; offs = ntim?
0011fe f409                      		brne	nxbuf1			;	No, done
0011ff 2700                      		clr		rmp				;	Yes, reset to 0
                                 nxbuf1:
001200 9300 0348                 		sts		offs,rmp
001202 9508                      		ret
                                 ;
                                 ; Go to previous timer buffer
                                 ;
                                 pvbuf:
001203 9100 0348                 		lds		rmp,offs
001205 950a                      		dec		rmp				; Decrement offs to previous timer
001206 3f0f                      		cpi		rmp,0xff		; offs = -1?
001207 f409                      		brne	pvbuf1			;	No
001208 e00f                      		ldi		rmp,(ntim-1)	;	Yes, go to buffer 7
                                 pvbuf1:
001209 9300 0348                 		sts		offs,rmp
00120b 9508                      		ret
                                 ;
                                 ; Display 2 lines of 8 TRBn buffers per line
                                 ;
                                 prtbs:
00120c e170                      		ldi		rgv,ntim		; Show ntim re-load timer buffers
00120d 2700                      		clr		rmp
00120e 9300 0348                 		sts		offs,rmp		; offs = 0, start at buffer 0
                                 prtbs1:
001210 937f                      		push	rgv				; Save counter
001211 d008                      		rcall	prbuf			; Print a timer buffer
001212 dfe7                      		rcall	nxbuf			; Do next buffer
001213 917f                      		pop		rgv				; Get counter
001214 957a                      		dec		rgv				; Count buffers shown
001215 f7d1                      		brne	prtbs1			; Not done, do more
001216 2700                      		clr		rmp
001217 9300 0348                 		sts		offs,rmp		; offs = 0, timer buffer base
001219 9508                      		ret
                                 ;
                                 ; --- Show timer re-load buffer ---
                                 ;
                                 ;  Position cursor and show timer re-load buffer @(OFFS). OFFS contains
                                 ;  offset value that controls the position of the cursor as well as the
                                 ;  offset to the timer re-load buffer base address TRB0.
                                 ;
                                 ;  Entry:       OFFS <-- (0...15) offset address
                                 ;
                                 ;  Buffer base address set at TRB0, initial x,y position  XINIT
                                 ;  and YINIT.
                                 ;
                                 ;
                                 prbuf:
                                +
00121a e0b3                     +ldi XH , high ( TRB0 )
00121b e0a0                     +ldi XL , low ( TRB0 )
                                 		ldxptr	TRB0			; Base of timer re-load buffers
00121c e0cf                      		ldi		YL,xinit		; Initial horizontal offset
00121d e0db                      		ldi		YH,yinit		; Initial vertical offset
00121e 2422                      		clr		count			; Column counter
00121f 9110 0348                 		lds		rga,offs		; Get offset and process column offset
001221 2311                      		tst		rga				; offs = 0?
001222 f061                      		breq	prbuf1			;	Yes, use buffer base address
                                 ;
                                 prbuf2:
001223 e007                      		ldi		rmp,dx1			; C = 0, add buffer spacing
001224 0fc0                      		add		YL,rmp
001225 9611                      		adiw	X,1				; Increment buffer pointer 1 bytes to next buffer
001226 9423                      		inc		count			; Count columns moved
001227 2d02                      		mov		rmp,count
001228 3008                      		cpi		rmp,8			; count = 8?
001229 f419                      		brne	prbuf4			;	No, continue
00122a e0cf                      		ldi		YL,xinit		; Reset X position
00122b e005                      		ldi		rmp,dy			; Move to second row position
00122c 0fd0                      		add		YH,rmp
                                 ;
00122d 951a                      prbuf4:	dec		rga				; Count offs corrections
00122e f7a1                      		brne	prbuf2
                                 ;
                                 ; Arrive here with XH:XL pointing to proper timer re-load buffer and cursor
                                 ; position in YH:YL. Show timer reload buffer contents.
                                 ;
                                 prbuf1:
00122f 940e 1681                 		call	gotoxy			; Move cursor to proper position
001231 911d                      		ld		rga,X+			; Pick up buffer contents
001232 2fc1                      		mov		YL,rga
001233 27dd                      		clr		YH				; YH = 0
001234 940e 14fe                 		call	bn2bcd			; Convert to packed BCD
001236 940e 14ab                 		call	p3dg			; Show timer setting
001238 9508                      		ret
                                 ;
                                 ; Highlight current buffer pointed to by OFFS.
                                 ;
                                 prthi:
001239 940e 1649                 		call	vrev			; Reverse attribute on
                                 prthi1:
00123b 940e 121a                 		call	prbuf			; Show timer buffer
00123d 940e 1644                 		call	vlo				; Normal on
00123f 9508                      		ret
                                 ;
                                 ; Show current buffer as normal.
                                 ;
                                 prtlo:
001240 940e 1644                 		call	vlo				; Normal on
001242 cff8                      		rjmp	prthi1
                                 ;
                                 ; Store timer re-load setting in DBA to buffesr TRB0@(offs)
                                 ;
                                 ldtb:
                                +
001243 e0b3                     +ldi XH , high ( TRB0 )
001244 e0a0                     +ldi XL , low ( TRB0 )
                                 		ldxptr	TRB0			; Base of timer re-load buffers
001245 9100 0348                 		lds		rmp,offs		; Get offs
001247 2300                      		tst		rmp				; offs = 0?
001248 f019                      		breq	ldtb2			;	Yes, store at TRB0
                                 ;
                                 ; Indexed store of TRBn@(offs) <-- (dba)
                                 ;
                                 ldtb1:
001249 9611                      		adiw	X,1				;	No, increment to next timer re-load buffer
00124a 950a                      		dec		rmp				; Process offs count
00124b f7e9                      		brne	ldtb1
                                 ldtb2:
00124c 9100 034e                 		lds		rmp,dba			; Get new setting
00124e 930d                      		st		X+,rmp			; TRBn buffer <-- (dba)
00124f 9508                      		ret
                                 ;
                                 ; Display timer re-load buffer headers
                                 ;
                                 prthdr:
001250 940e 166a                 		call	pxy
001252 0f09                      		.db		9,15
                                +
001253 e3f4                     +ldi ZH , high ( thdr1 * 2 )
001254 e4e2                     +ldi ZL , low ( thdr1 * 2 )
                                 		ldzptr	thdr1			; Buffers 0 to 7
001255 940e 161d                 		call	pptr
                                 ;
001257 940e 166a                 		call	pxy
001259 0f0a                      		.db		10,15
                                +
00125a e3f4                     +ldi ZH , high ( thdr3 * 2 )
00125b eaea                     +ldi ZL , low ( thdr3 * 2 )
                                 		ldzptr	thdr3			; Separator line
00125c 940e 161d                 		call	pptr
                                 ;
00125e 940e 166a                 		call	pxy
001260 0f0e                      		.db		14,15
                                +
001261 e3f4                     +ldi ZH , high ( thdr2 * 2 )
001262 e7e6                     +ldi ZL , low ( thdr2 * 2 )
                                 		ldzptr	thdr2			; Buffers 8 to 15
001263 940e 161d                 		call	pptr
                                 ;
001265 940e 166a                 		call	pxy
001267 0f0f                      		.db		15,15
                                +
001268 e3f4                     +ldi ZH , high ( thdr3 * 2 )
001269 eaea                     +ldi ZL , low ( thdr3 * 2 )
                                 		ldzptr	thdr3			; Separator line
00126a 940e 161d                 		call	pptr
00126c 9508                      		ret
                                 ;
                                 ; Print LDT command message, clear rest of line
                                 ;
                                 prldt:
00126d 940e 152b                 		call	slina
                                +
00126f e3f4                     +ldi ZH , high ( ldtmm * 2 )
001270 e1e6                     +ldi ZL , low ( ldtmm * 2 )
                                 		ldzptr	ldtmm			; Show LDT command message
001271 940e 161d                 		call	pptr
001273 940e 1635                 		call	ceol			; Clear to eol
001275 9508                      		ret
                                 ;
                                 ; Clear delay timer reload buffers
                                 ;
                                 zdt:
                                +
001276 e0b3                     +ldi XH , high ( TRB0 )
001277 e0a0                     +ldi XL , low ( TRB0 )
                                 		ldxptr	TRB0				; Base address of timer reload buffers
001278 e120                      		ldi		rgb,(TCB0-TRB0)		; Byte counter
001279 2700                      		clr		rmp					; Fill byte
                                 zdt0:
00127a 930d                      		st		X+,rmp				; Zero timer buffers
00127b 952a                      		dec		rgb
00127c f7e9                      		brne	zdt0
00127d 9508                      		ret
                                 ;
                                 ;
                                 ;###########################################################################
                                 ;
                                 ;
                                 ; Controller startup and initialization
                                 ;
                                 start:
                                 ;
                                 ; Initialize the stack pointer to end of SRAM
                                 ;
00127e e008                      		ldi		rmp,high(RAMEND)	; Init MSB stack
00127f bf0e                      		out		SPH,rmp
001280 ef0f                      		ldi		rmp,low(RAMEND)	; Init LSB stack
001281 bf0d                      		out		SPL,rmp
                                 ;
                                 ; Initialize the engine
                                 ;
001282 940e 15b0                 		call	wdt_off			; Disable watchdog. Must be done soon after a reset
001284 940e 0267                 		call	initz			; Initialize engine
001286 940e 0297                 		call	inzuart			; Initialize the UART
                                 ;
                                 ; Check if autostart enabled D8/PB0 tied low.
                                 ;
001288 940e 11ea                 		call	autost
                                 ;
                                 ;
                                 ;###########################################################################
                                 ;
                                 ;
                                 ; --- Command Line Input Processor ---
                                 ;
                                 ;  Process command line
                                 ;
                                 cml:
00128a d2da                      		rcall	prscn			; Print command screen
00128b dcd9                      		rcall	iuf0			; Setup control buffers for User File 0
00128c d0d2                      		rcall	dpage			; Display page 0
                                 ;
                                 ;  Main processor
                                 ;
                                 cml1:
00128d dc76                      		rcall	ibs				; Print bit stack
00128e d208                      		rcall	pdbuf			; Print data entry
                                 cml2:
00128f d2c1                      		rcall	enter			; 'Enter: ' prompt
                                 cml2a:
001290 d18e                      		rcall	glin			; User line input
001291 ff85                      		sbrs	flaga,escf
001292 c029                      		rjmp	optn5			; Skip arrow commands if not ESC
                                 ;
                                 ;  Process escape sequences i.e. cursor and Home key commands
                                 ;  The cursor or arrow key sequences are generated when the
                                 ;  appropriate keys are pressed, and are processed by the following
                                 ;  modules. Note these are ANSI sequences.
                                 ;
                                 ;       Up arrow        ESC [ A   -->   Previous Line,	(^W key)
                                 ;       Down  "         ESC [ B   -->   Next Line,		(^Z key)
                                 ;       Left  "         ESC [ D   -->   Previous Page,	(^A key)
                                 ;       Right "         ESC [ C   -->   Next Page,		(^S key)
                                 ;       Home key        ESC [ 1 ~ -->   Jump to line #, ESC H for kermit
                                 ;		INS				ESC [ 2 ~ -->	INS command
                                 ;		DEL				ESC [ 3 ~ -->	DEL command
                                 ;
                                 optn0:
001293 d35a                      		rcall	ci				; Else get '[' character after the ESC
001294 351b                      		cpi		rga,'['			; '['?
001295 f499                      		brne	optn4a			; No, Check if kermit Home string
001296 d357                      		rcall	ci				; Process cursor keys
001297 3412                      		cpi		rga,'B'			; DN key
001298 f411                      		brne	optn1
001299 d071                      		rcall	nextl			; Down a line
00129a cff4                      		rjmp	cml2
                                 ;
                                 optn1:
00129b 3411                      		cpi		rga,'A'			; UP key
00129c f411                      		brne	optn2
00129d d07e                      		rcall	pvln			; Up a line
00129e cff0                      		rjmp	cml2
                                 optn2:
00129f 3413                      		cpi		rga,'C'			; --> key
0012a0 f419                      		brne	optn3
0012a1 d05c                      		rcall	nxpg			; Next page
0012a2 d0bc                      		rcall	dpage			; Dislay page
0012a3 cfeb                      		rjmp	cml2
                                 optn3:
0012a4 3414                      		cpi		rga,'D'			; <-- key
0012a5 f419                      		brne	optn4a
0012a6 d04a                      		rcall	pvpg			; Previous page
0012a7 d0b7                      		rcall	dpage			; Dislay page
0012a8 cfe6                      		rjmp	cml2
                                 ;
                                 ; Process Home key string from kermit
                                 ;
                                 optn4a:
0012a9 3418                      		cpi		rga,'H'			; 'H' ?
0012aa f411                      		brne	optn4			; No, check alternate string
0012ab d07f                      		rcall	jump			; Jump to line number entered
0012ac cfe2                      		rjmp	cml2
                                 ;
                                 ; Process Home key string from non-kermit
                                 ;
                                 optn4:
0012ad 3311                      		cpi		rga,'1'			; Home key
0012ae f419                      		brne	optn7
0012af d33e                      		rcall	ci				; Eat extra '~' character
0012b0 d07a                      		rcall	jump			; Jump to line number entered
0012b1 cfdd                      		rjmp	cml2
                                 ;
                                 ; Process aliases for INS and DEL commands
                                 ;
                                 optn7:
0012b2 3312                      		cpi		rga,'2'			; INS key
0012b3 f419                      		brne	optn8
0012b4 d339                      		rcall	ci				; Eat extra '~' character
                                 
0012b5 dcbd                      		rcall	iins			; Execute INS command
0012b6 cfd8                      		rjmp	cml2
                                 optn8:
0012b7 3313                      		cpi		rga,'3'			; DEL key
0012b8 f419                      		brne	optn5
0012b9 d334                      		rcall	ci				; Eat extra '~' character
                                 
0012ba dcdc                      		rcall	idele			; Execute DEL command
0012bb cfd3                      		rjmp	cml2
                                 ;
                                 ;  Arrive here if input was not a valid escape sequence.
                                 ;
                                 optn5:
0012bc ff87                      		sbrs	flaga,xclinf	; Keep status line?
0012bd c002                      		rjmp	optn6			; Yes, leave status line
0012be 778f                      		cbr		flaga,(1<<xclinf)
0012bf d29b                      		rcall	pruf0			; Show File 0, erase rest of line
                                 optn6:
0012c0 d19b                      		rcall	gchr			; Process line input
0012c1 2311                      		tst		rga				; Line empty?
0012c2 f261                      		breq	cml2			; Get new enter line
0012c3 d22f                      		rcall	decdg			; Test for 0....9
0012c4 f428                      		brcc	pars			; No decimal digit, process line for a word entry
0012c5 d1fe                      		rcall	gnum			; Get possible number, set numfl if good
                                 ;
0012c6 ff83                      		sbrs	flaga,numfl		; numfl set?
0012c7 c015                      		rjmp	errin			;	No, input error
0012c8 7f87                      		cbr		flaga,(1<<numfl)	; Clear numfl
0012c9 cfc3                      		rjmp	cml1
                                 ;
                                 ;  Search Dictionary for matching opcode words of length 1...5,
                                 ;  and return with C=1, A=0FFH and (opcode address) <-- Z if
                                 ;  string found. If no string found C=0, A=0 and ^Z <-- Z at end
                                 ;  of dictionary.
                                 ;
                                 pars:
0012ca 2d02                      		mov		rmp,count		; String length
0012cb 3006                      		cpi		rmp,opclen		; Length ok?
0012cc f480                      		brcc	errin			; No, unrecognized input
                                 ;
                                 ; --- Search Dictionary ---
                                 ;
0012cd d110                      		rcall	fndst			; Look for WORD string in dictionary
0012ce f070                      		brcs	errin			; String not found error
                                 ;
                                 ; --- Execute IWRD ---
                                 ;
                                 ; A vaild WORD from dictionary found, Z points to the WORD's IWRD vector.
                                 ; Execute the IWRD by indirect rcall operation.
                                 ;
                                 cml4:
0012cf 93ff                      		push	ZH				; Preserve Z across icall, required by
0012d0 93ef                      		push	ZL				; rcall to putwd: IWRD <-- Z
0012d1 9509                      		icall					; Execute IWRD vector
0012d2 91ef                      		pop		ZL				; Restore Z
0012d3 91ff                      		pop		ZH
0012d4 d00e                      		rcall	ufcsr			; (POINTR) <-- UF0 @(line #)
                                 ;
                                 ; --- Process IWRD attribute --
                                 ;
0012d5 9100 0346                 		lds		rmp,attrb		; Fetch WORD's low(attrb) - hi byte not used
0012d7 3001                      		cpi		rmp,EDIT		; Edit word?
0012d8 f409                      		brne	cml5			;	No, load IWRD to UFx
0012d9 cfb3                      		rjmp	cml1			;	Yes, skip loading word to UFx
                                 ;
                                 ; --- Store IWRD to UFx space ---
                                 ;
                                 cml5:
0012da d139                      		rcall	putwd			; Load IWRD addr to UFx
0012db d02f                      		rcall	nextl			; Advance to next line
0012dc cfb0                      		rjmp	cml1
                                 ;
                                 ;  Error input handler		(OK)
                                 ;
                                 errin:
0012dd d251                      		rcall	slinb			; Position cursor
                                +
0012de e3f3                     +ldi ZH , high ( err1 * 2 )
0012df ece8                     +ldi ZL , low ( err1 * 2 )
                                 		ldzptr	err1			; Unknown input error
0012e0 d33c                      		rcall	pptr
0012e1 6880                      		sbr		flaga,(1<<xclinf)	; Delayed line clear ###
0012e2 cfac                      		rjmp	cml2
                                 ;
                                 ; Load POINTR <--  UF0 @(line #). POINTR is loaded with the address in		(OK)
                                 ; UF0 space corresponding to the current cursor position (the current
                                 ; absolute line no) stored in (CURSOR) buffer.
                                 ;
                                 ; llnctr uses offs buffer contents to calculate the program line number
                                 ; given by basln + offs. The decom routine decompiles the IWRD at this line
                                 ; number.
                                 ;
                                 ufcsr:
0012e3 d004                      		rcall	csxof			; Exchange offset buffers, CURSOR and OFFS
0012e4 d05f                      		rcall	llnctr			; Get absolute line #, the program counter
0012e5 d06c                      		rcall	lpntr			; Get UFx @(OFFS)
0012e6 d001                      		rcall	csxof
0012e7 9508                      		ret
                                 ;
                                 ; Exchange contents of CURSOR and OFFS buffers		(OK)
                                 ;
                                 ; The offs and cursor buffer contents are exchanged by csxof routine when
                                 ; the program line number for the screen cursor needs to be calculated. In
                                 ; this case, ufcsr is called prior to calling llnctr.
                                 ;
                                 csxof:
0012e8 9100 0349                 		lds		rmp,cursor		; Get cursor contents
0012ea 9110 0348                 		lds		rga,offs		; Get offs contents
0012ec 9300 0348                 		sts		offs,rmp
0012ee 9310 0349                 		sts		cursor,rga
0012f0 9508                      		ret
                                 ;
                                 ; --- Page display sub-processors ---
                                 ;
                                 ; On entry, if basln = 0, roll-under to page 7 (basln = 224).
                                 ; Otherwise, set basln = basln-32
                                 ;
                                 pvpg:
0012f1 9110 0341                 		lds		rga,basln+1	; Get current basln+1
0012f3 3010                      		cpi		rga,0		; Page 0?
0012f4 f029                      		breq	pvpg1		;	Yes, roll-under to page 7
0012f5 ee00                      		ldi		rmp,-32		; rga = basln - 32
0012f6 0f10                      		add		rga,rmp
0012f7 9310 0341                 		sts		basln+1,rga
0012f9 9508                      		ret
                                 pvpg1:
0012fa ee10                      		ldi		rga,224		; Page 7
0012fb 9310 0341                 		sts		basln+1,rga
0012fd 9508                      		ret
                                 ;
                                 ; On entry, if basln = 224, roll over to page 0 (basln = 0).
                                 ; Otherwise, set basln = basln+32
                                 nxpg:
0012fe 9110 0341                 		lds		rga,basln+1	; Get current basln+1
001300 3e10                      		cpi		rga,224		; Page 7?
001301 f029                      		breq	nxpg1		;	Yes, roll-over to page 0
001302 e200                      		ldi		rmp,32		; rga = basln + 32
001303 0f10                      		add		rga,rmp
001304 9310 0341                 		sts		basln+1,rga
001306 9508                      		ret
                                 nxpg1:
001307 2711                      		clr		rga			; Page 0
001308 9310 0341                 		sts		basln+1,rga	; Update base page buffer
00130a 9508                      		ret
                                 ;
                                 ;  Move cursor to next line		(OK)
                                 ;
                                 nextl:
00130b d063                      		rcall	csrlo			; Restore cursor line normal
00130c 9100 0349                 		lds		rmp,cursor
00130e 9503                      		inc		rmp				; Next line
00130f 9300 0349                 		sts		cursor,rmp
                                 ;
001311 3200                      		cpi		rmp,nlines		; Past last line 31?
001312 f439                      		brne	nextl1			;	No, still same page
                                 
001313 2700                      		clr		rmp
001314 9300 0349                 		sts		cursor,rmp		;	Yes, cursor = 0
001316 d04d                      		rcall	csrhi			; Hilite line
001317 dfe6                      		rcall	nxpg			; Next page
001318 d046                      		rcall	dpage			; Show page
001319 9508                      		ret
                                 nextl1:
00131a d049                      		rcall	csrhi			; Hilite line
00131b 9508                      		ret
                                 ;
                                 ;  Move cursor to previous line		(OK)
                                 ;
                                 pvln:
00131c d052                      		rcall	csrlo			; Restore cursor line normal
00131d 9100 0349                 		lds		rmp,cursor
00131f 950a                      		dec		rmp				; Previous line
001320 9300 0349                 		sts		cursor,rmp
                                 ;
001322 3f0f                      		cpi		rmp,0xff		; Past last 0?
001323 f429                      		brne	pvln1			;	No, still same page
001324 e10f                      		ldi		rmp,nlines-1
001325 9300 0349                 		sts		cursor,rmp		;	Yes, reset to line 0
001327 dfc9                      		rcall	pvpg			; Previous page
001328 d036                      		rcall	dpage			; Show page
                                 pvln1:
001329 d03a                      		rcall	csrhi			; Hilite line
00132a 9508                      		ret
                                 ;
                                 ;  Jump to line number given in DBA		(OK)
                                 ;
                                 jump:
00132b d043                      		rcall	csrlo			; Restore cursor line
00132c 9110 034e                 		lds		rga,dba			; Target line number
00132e e220                      		ldi		rgb,nlines		; Divisor
00132f d26d                      		rcall	div8u			; rga/rgb = result in rga + remainder in rgb
001330 9320 0349                 		sts		cursor,rgb		; Remainder to cursor
001332 2311                      		tst		rga
001333 f029                      		breq	jump2			; Skip if page zero
001334 7017                      		andi	rga,0b00000111	; 7 pages maximum
001335 e0c5                      		ldi		YL,5			; Multiply by 32, 5 left shifts
                                 jump1:
001336 0f11                      		lsl		rga				; Convert pages to lines
001337 95ca                      		dec		YL				; 1 page = 32 lines
001338 f7e9                      		brne	jump1
                                 ;
                                 jump2:
001339 2fc1                      		mov		YL,rga			; Save page base line number
00133a 9100 0341                 		lds		rmp,basln+1		; Get base line
00133c 2710                      		eor		rga,rmp			; Same as current page?
00133d f021                      		breq	jump3			; Yes
00133e 93c0 0341                 		sts		basln+1,YL		; No, update to new page
001340 d01e                      		rcall	dpage			; Show page
001341 9508                      		ret
                                 jump3:
001342 d021                      		rcall	csrhi			; Hilite cursor line
001343 9508                      		ret
                                 ;
                                 ; Load (LNCTR) with absolute line number from BASLN + OFFS		(OK)
                                 ;
                                 llnctr:
001344 91d0 0340                 		lds		YH,basln
001346 91c0 0341                 		lds		YL,basln+1		; Y <-- (basln) contents
001348 9100 0348                 		lds		rmp,offs		; rmp <-- (offs)
00134a 0fc0                      		add		YL,rmp
00134b 2700                      		clr		rmp
00134c 1fd0                      		adc		YH,rmp			; Y <-- (basln + offs)
00134d 93d0 0344                 		sts		lnctr,YH
00134f 93c0 0345                 		sts		lnctr+1,YL		; (lnctr) <-- Y
001351 9508                      		ret
                                 ;
                                 ; Load (POINTR) with address of IWRD vector in UFx space from		(OK)
                                 ; the corresponding absolute line number. Call LLNCTR first to load
                                 ; LNCTR with absolute line number.
                                 ;
                                 ;	Entry:	(LNCTR) <-- program line number
                                 ;	Exit:	(POINTR) <-- (LNCTR)*2 + (ufpch:ufpcl)
                                 ;
                                 lpntr:
001352 91d0 0344                 		lds		YH,lnctr		; Y <-- (lnctr) contents
001354 91c0 0345                 		lds		YL,lnctr+1
001356 0fcc                      		lsl		YL				; Y*2 for word addressing
001357 1fdd                      		rol		YH
                                 ;
001358 0dc5                      		add		YL,ufpcl		; Add ufpcl low byte
001359 1dd4                      		adc		YH,ufpch		; Y = lnctr*2 + ufpch:ufpcl
00135a 93d0 0342                 		sts		pointr,YH		; (pointr) <-- Y
00135c 93c0 0343                 		sts		pointr+1,YL
00135e 9508                      		ret
                                 ;
                                 ; Display one page of 32 lines of lines/code WORDS, hilite line.
                                 ;
                                 dpage:
00135f 940e 1373                 		call	ppage			; Show 32 lines of decompiled code
001361 940e 1364                 		call	csrhi			; Hilight on
001363 9508                      		ret
                                 ;
                                 csrhi:
001364 940e 1649                 		call	vrev			; Reverse on
                                 csrhi1:
001366 940e 12e8                 		call	csxof			; Exch OFFS and CURSOR buffers
001368 940e 1385                 		call	decom			; Show program line and code
00136a 940e 1644                 		call	vlo				; Normal on
00136c 940e 12e8                 		call	csxof			; Exch OFFS and CURSOR buffers
00136e 9508                      		ret
                                 ;
                                 csrlo:
00136f 940e 1644                 		call	vlo
001371 cff4                      		rjmp	csrhi1
001372 9508                      		ret
                                 ;
                                 ; Screen display routines - Line # / decompiled word namestring display		(?)
                                 ; is controlled by the base line # buffer BASLN and the offset buffer
                                 ; OFFS. The top-of-page line number is saved in BASLN buffer. Called
                                 ; by dpage.
                                 ; Print a page of 32 lines of decompiled code WORDs and line numbers
                                 ; Registers:
                                 ;
                                 ppage:
001373 e220                      		ldi		rgb,nlines		; 32 lines per page
001374 2700                      		clr		rmp
001375 9300 0348                 		sts		offs,rmp		; offs = 0, line 0
                                 ppage1:
001377 932f                      		push	rgb
001378 d00c                      		rcall	decom			; Decompile a line
001379 9100 0348                 		lds		rmp,offs
00137b 9503                      		inc		rmp				; Next line
00137c 9300 0348                 		sts		offs,rmp
00137e 912f                      		pop		rgb
00137f 952a                      		dec		rgb
001380 f7b1                      		brne	ppage1
001381 2700                      		clr		rmp
001382 9300 0348                 		sts		offs,rmp		; offs = 0
001384 9508                      		ret
                                 ;
                                 ; Decompile and print one WORD namestring from OFFS and BASLN contents		(OK)
                                 ;
                                 decom:
001385 d00d                      		rcall	vctran		; Position cursor
001386 dfbd                      		rcall	llnctr		; Load LNCTR with absolute line number
001387 dfca                      		rcall	lpntr		; Load pointr with IWRD vector
001388 d103                      		rcall	pgmln		; Show program line number
001389 d01d                      		rcall	valwd		; Test for valid word
00138a f418                      		brcc	notwd		; Not valid, show dots
00138b d02e                      		rcall	ptnam		; Point to namestring
00138c d042                      		rcall	prnam		; Show namestring
00138d 9508                      		ret
                                 notwd:
                                +
00138e e3f3                     +ldi ZH , high ( dots * 2 )
00138f eeee                     +ldi ZL , low ( dots * 2 )
                                 		ldzptr	dots
001390 940e 161d                 		call	pptr
001392 9508                      		ret
                                 ;
                                 ; Translate data in BASLN and OFFS to horiz and vert vector			(OK)
                                 ; and position cursor on screen. OFFS holds line count for the
                                 ; displayed 32 line page.
                                 ;
                                 ; Registers: rmp, rga, rgb, YH, YL
                                 ;
                                 vctran:
001393 e0c8                      		ldi		YL,hzri		; Initial horizontal offset
001394 e0d9                      		ldi		YH,vtri		; Initial horizontal offset
001395 9110 0348                 		lds		rga,offs		; Get offset and process row info
001397 7017                      		andi	rga,0b00000111	; Isolate bits 0..2, row 0..7 info
001398 0fd1                      		add		YH,rga			; Add initial vertical offset
                                 ;
001399 9110 0348                 		lds		rga,offs		; Get offset and process column info
00139b 7118                      		andi	rga,0b00011000	; Bits 3,4 become...
00139c f039                      		breq	vct1
00139d 9516                      		lsr		rga
00139e 9516                      		lsr		rga
00139f 9516                      		lsr		rga				; ...bits 0,1 (column 0..3 info)
0013a0 e103                      		ldi		rmp,dlhzr		; Column offset
                                 vct2:
0013a1 0fc0                      		add		YL,rmp			; hzri + dlhzr
0013a2 951a                      		dec		rga
0013a3 f7e9                      		brne	vct2			; Add column offsets
                                 vct1:
0013a4 940e 1681                 		call	gotoxy
0013a6 9508                      		ret
                                 ;
                                 ; Check IWRD <-- (POINTR) in UFx is a valid word by looking for		(OK)
                                 ; ctrl W  namestring terminator, C=1 is valid, else C=0 if no ^W
                                 ; found. Searches backwards from IWRD to expected ^W location in
                                 ; dictionary WORD.
                                 ;
                                 ; Registers: Y, Z, rmp
                                 ;
                                 ; Entry:	IWRD <-- (POINTR), address to store IWRD in UFx
                                 ; Exit:		C=1 if ^W found in WORD vector, else C=0
                                 ;
                                 valwd:
0013a7 91d0 0342                 		lds		YH,pointr		; Y <-- (pointr) contents
0013a9 91c0 0343                 		lds		YL,pointr+1		; Y has UF0 load address for IWRD vector
                                 ;
0013ab 91f9                      		ld		ZH,Y+			; Load Z with IWD vector from UF0
0013ac 91e9                      		ld		ZL,Y+
                                 ;
0013ad e004                      		ldi		rmp,4			; Z = Z - 4
0013ae 1be0                      		sub		ZL,rmp
0013af e000                      		ldi		rmp,0
0013b0 0bf0                      		sbc		ZH,rmp			; Point to namestring last word
                                 ;
0013b1 0fee                      		lsl		ZL
0013b2 1fff                      		rol		ZH				; Z*2 for memory access by Z
0013b3 60e1                      		ori		ZL,1			; Set ZL bit 0 for high byte selection
                                 ;
0013b4 9104                      		lpm		rmp,Z			; ^W should be here if valid word
0013b5 3107                      		cpi		rmp,ctlW
0013b6 9408                      		sec
0013b7 f009                      		breq	valwd1
0013b8 9488                      		clc
                                 valwd1:
0013b9 9508                      		ret
                                 ;
                                 ; Point to 'namestring' of dictionary word.		(OK)
                                 ;
                                 ; Registers: Y, Z, rmp, rga
                                 ;
                                 ; Entry: IWRD <-- (POINTR), address of IWRD vector in UF0
                                 ; Exit:  "namestring" <-- Z*2
                                 ;
                                 ptnam:
0013ba 91d0 0342                 		lds		YH,pointr		; Y <-- (pointr) contents
0013bc 91c0 0343                 		lds		YL,pointr+1		; Y has UF0 load address for IWRD vector
                                 ;
0013be 91f9                      		ld		ZH,Y+			; Load Z with IWD vector from UF0
0013bf 91e9                      		ld		ZL,Y+
                                 ;
0013c0 e001                      		ldi		rmp,1			; Z = Z-1
0013c1 1be0                      		sub		ZL,rmp
0013c2 e000                      		ldi		rmp,0
0013c3 0bf0                      		sbc		ZH,rmp			; Point to offset's address
                                 ;
0013c4 0fee                      		lsl		ZL				; Z*2 for memory access
0013c5 1fff                      		rol		ZH
                                 ;
0013c6 9125                      		lpm		rgb,Z+			; Get offset, lo byte
0013c7 9114                      		lpm		rga,Z			; Get offset, hi byte
                                 ;
0013c8 95f6                      		lsr		ZH				; Z/2 for real address
0013c9 95e7                      		ror		ZL				; offset word <-- Z
                                 ;
0013ca 0fe2                      		add		ZL,rgb			; Z + offset
0013cb 1ff1                      		adc		ZH,rga			; "namestring" address
                                 ;
0013cc 0fee                      		lsl		ZL				; Z*2 for memory access
0013cd 1fff                      		rol		ZH				; "namestring" <-- Z*2
                                 ;
0013ce 9508                      		ret
                                 ;
                                 ; Print spaces/backspaces over old name, then newname		(OK)
                                 ;
                                 prnam:
0013cf 93ff                      		push	ZH
0013d0 93ef                      		push	ZL
                                +
0013d1 e3f3                     +ldi ZH , high ( spbs * 2 )
0013d2 ebec                     +ldi ZL , low ( spbs * 2 )
                                 		ldzptr	spbs			; Blank-backspace string
0013d3 d249                      		rcall	pptr
0013d4 91ef                      		pop		ZL
0013d5 91ff                      		pop		ZH
0013d6 d001                      		rcall	pdptr			; Show "namestring",ctlW <-- Z
0013d7 9508                      		ret
                                 ;
                                 ;  Print string pointed to by Z, ^W terminated		(OK)
                                 ;
                                 pdptr:
0013d8 9115                      		lpm		rga,Z+		; Get a character from memory
0013d9 3117                      		cpi		rga,ctlW	; End of string marker?
0013da f011                      		breq	pdptr1
0013db d219                      		rcall	co
0013dc cffb                      		rjmp	pdptr
                                 pdptr1:
0013dd 9508                      		ret
                                 ;
                                 ;
                                 ;###########################################################################
                                 ;
                                 ;
                                 ; --- Dictionary Search Routine ---		(OK)
                                 ;
                                 ;  Entry:	LINBUF <-- X,
                                 ;  			DICT <-- Z,
                                 ;  			count = string length of WORD
                                 ;  Exit: 	IWRD <-- Z, address of WORD's working code
                                 ;  			C=0 if string found, else C=1
                                 ;			(attrb) <-- Attribyte type byte
                                 ;
                                 ;  The attribute type byte is stored in attrb buffer if the search finds
                                 ;  a matching dictionary word. The attribute byte is used to control in
                                 ;  which mode the dictionary word can be executed, i.e. interpreter, command
                                 ;  or run mode.
                                 ;
                                 ;  The input WORD string in the line buffer is compared to the WORDs
                                 ;  in the dictionary on a character-by-character basis. If a mismatch
                                 ;  is found, the input string pointer is reset and the dictionary
                                 ;  pointer is moved to the next word in the table. Searching continues
                                 ;  to the end of the dictionary.
                                 ;
                                 fndst:
                                +
0013de e0f5                     +ldi ZH , high ( dict * 2 )
0013df e6e4                     +ldi ZL , low ( dict * 2 )
                                 		ldzptr	dict			; Point to dictionary start
                                 fndst1:
                                +
0013e0 e0b3                     +ldi XH , high ( linbuf )
0013e1 e3a8                     +ldi XL , low ( linbuf )
                                 		ldxptr	linbuf			; Reset input string pointer
0013e2 2d22                      		mov		rgb,count		; Get string length
                                 fndst2:
0013e3 9115                      		lpm		rga,Z+			; Get a DICT namestring character
0013e4 2e31                      		mov		asav,rga		; Save character
                                 ;
                                 ; Check for '0' or ^W end markers to see if word is a short sub-string
                                 ;
0013e5 3010                      		cpi		rga,NULL		; Is char a null byte?
0013e6 f061                      		breq	fndst4			;	Yes, keep searching Dict
0013e7 3117                      		cpi		rga,ctlW		; Is char a ^W?
0013e8 f069                      		breq	fndst4a			;	Yes, keep searching Dict
                                 ;
                                 ; Check namestring character to see if it ctlZ end-of-dictionary marker
                                 ;
0013e9 e10a                      		ldi		rmp,ctlZ		; Dict end marker byte
0013ea 2710                      		eor		rga,rmp			; Dictionary end?
0013eb f411                      		brne	fndst3			;	No, continue
0013ec 9408                      		sec						;	Yes, exit, no word match
0013ed 9508                      		ret						; C=0,rga=0
                                 ;
                                 fndst3:
0013ee 911d                      		ld		rga,X+			; Get linbuf char
0013ef 940e 14bd                 		call	case			; Fold to UC
0013f1 2513                      		eor		rga,asav		; linbuf char = Dict char?
0013f2 f061                      		breq	fndst5			; Match, process next char
                                 ;
                                 ; Arrive here when mismatch occurs, move to ^W terminator
                                 ;
                                 fndst4:
0013f3 9115                      		lpm		rga,Z+			; Check for ^W terminator
0013f4 3117                      		cpi		rga,ctlW		; ^W?
0013f5 f7e9                      		brne	fndst4			;	No, keep looking until found
                                 ;
                                 ; Arrive here when ^W found. Pick up the link address of
                                 ; DICT word, put LA into Z, pointing to next DICT word.
                                 ; AVR 8 bit micros store data Little Endian style, lower order
                                 ; byte in lower order address.
                                 ;
                                 fndst4a:
0013f6 9115                      		lpm		rga,Z+			; rga <-- LA (link address) lo
0013f7 931f                      		push	rga
0013f8 9115                      		lpm		rga,Z+			; rga <-- LA (link address) hi
0013f9 931f                      		push	rga
0013fa 91ff                      		pop		ZH				; ZH <-- hi(LA)
0013fb 91ef                      		pop		ZL				; ZL <-- lo(LA)
0013fc 0fee                      		lsl		ZL				; ZH:ZL*2 for memory address access
0013fd 1fff                      		rol		ZH
0013fe cfe1                      		rjmp	fndst1			; Search DICT for next word
                                 ;
                                 ; Arrive here when match found between DICT and linbuf char. Check if
                                 ; all characters in linbuf namestring processed
                                 ;
                                 fndst5:
0013ff 952a                      		dec		rgb				; Count linbuf chars processed
001400 f711                      		brne	fndst2			; Continue matching characters
                                 
001401 9114                      		lpm		rga,Z			; Test char after namestring
001402 3010                      		cpi		rga,NULL		; Null byte?
001403 f409                      		brne	fndst5a			;	No, Look for ^W
001404 9631                      		adiw	ZH:ZL,1			;	Yes, advance past null
                                 
                                 fndst5a:
001405 9115                      		lpm		rga,Z+			; Check for ^W terminator
001406 3117                      		cpi		rga,ctlW		; ^W?
001407 f759                      		brne	fndst4			;	No, mismatch, next word
                                 ;
                                 ; Arrive here on successful match to dict namestring, Link_Address <-- Z.
                                 ;
                                 ; Exit:
                                 ;	(attrb)  <-- attribute word
                                 ;   IWRD     <-- Z
                                 ;	C=1
                                 ;
                                 fndst6:
001408 9632                      		adiw	ZH:ZL,2			; Advance to attribute word
                                +
001409 e0b3                     +ldi XH , high ( attrb )
00140a e4a6                     +ldi XL , low ( attrb )
                                 		ldxptr	attrb
00140b 9115                      		lpm		rga,Z+			; Get attribute word, hi byte
00140c 931d                      		st		X+,rga			; Save it
00140d 9115                      		lpm		rga,Z+			; Get attribute word, lo byte
00140e 931d                      		st		X+,rga			; Save it, Z at offset word
                                 ;
00140f 9632                      		adiw	Z,2				; Advance to IWRD
                                 
                                 ;
001410 95f6                      		lsr		ZH				; ZH:ZL/2 for code address
001411 95e7                      		ror		ZL				; Exit with Z = (IWRD)
001412 9488                      		clc						; Success
001413 9508                      		ret
                                 ;
                                 ; --- Interpreter Routines ---
                                 ;
                                 ; Z has the IWRD subroutine address to be stored in UFx.
                                 ; Load (ZH:XL) contents to UFx @(POINTR). This routine used to
                                 ; load the IWRD vector in Z to the UFx location @(POINTR), and
                                 ; incrementing POINTR to start of next storage location.
                                 ;
                                 ; Entry: Z = IWRD address
                                 ; Exit: (POINTR) = (POINTR+1)
                                 ;
                                 putwd:
001414 91d0 0342                 		lds		YH,pointr		; Hi then lo byte
001416 91c0 0343                 		lds		YL,pointr+1
001418 93f9                      		st		Y+,ZH			; UFx <-- Y
001419 93e9                      		st		Y+,ZL
00141a 93d0 0342                 		sts		pointr,YH
00141c 93c0 0343                 		sts		pointr+1,YL
00141e 9508                      		ret
                                 ;
                                 ; --- Line input and initialization routines ---	(OK)
                                 ;
                                 ; An 8 byte line input buffer is supported. The buffer is initially
                                 ; cleared to zeroes, and pointed to by XH:XL. COUNT maintains a
                                 ; count of characters entered. Entry is terminated by <'CR'>, <^X>
                                 ; erases current line and starts over, and <BS> erases the previous
                                 ; character. XH:XL is reserved for use as LINBUF pointer to allow
                                 ; multiple GCHR calls.
                                 ;
                                 ;	Registers used:
                                 ;	rmp, rga, rgb, rgc, X
                                 ;
                                 glin:
00141f 940e 1463                 		call	inzln			; Zero the line buffer and count register
                                 glin1:
001421 940e 15ee                 		call	ci				; Get a character
001423 301d                      		cpi		rga,CR			; Test if <CR>
001424 f421                      		brne	glin2			;	No, look for next special key
                                +
001425 e0b3                     +ldi XH , high ( linbuf )
001426 e3a8                     +ldi XL , low ( linbuf )
                                 		ldxptr	linbuf			;	Yes, reset linbuf pointer
001427 6180                      		sbr		flaga,(1<<crf)	; And set CR flag
001428 9508                      		ret
                                 ;
                                 ; Look for a ^X key, if so do a line delete
                                 ;
                                 glin2:
001429 3118                      		cpi		rga,ctlX		; Test if <^X>
00142a f441                      		brne	glin3			;	No, look for next special key
00142b 2d22                      		mov		rgb,count		; Load character counter
00142c 2322                      		tst		rgb				; Count = 0?
00142d f389                      		breq	glin
                                 glin2a:
00142e 940e 1616                 		call	bksp			; Move cursor back one space
001430 952a                      		dec		rgb
001431 f7e1                      		brne	glin2a			; back to start
001432 cfec                      		rjmp	glin			; Restart
                                 ;
                                 ; Look for a BS key, if so do a delete character at cursor
                                 ;
                                 glin3:
001433 3018                      		cpi		rga,BS			; Test if backspace
001434 f451                      		brne	glin5			;	No, look for next special key
                                 glin3a:
001435 2d22                      		mov		rgb,count		; Load character counter
001436 2322                      		tst		rgb				; Count = 0?
001437 f349                      		breq	glin1			;	Yes, fetch another character
001438 952a                      		dec		rgb
001439 2e22                      		mov		count,rgb
00143a 940e 1616                 		call	bksp			; Move cursor back one space
00143c e000                      		ldi		rmp,0			; Backup pointer and insert 0
00143d 930e                      		st		-X,rmp
00143e cfe2                      		rjmp	glin1
                                 ;
                                 ; Look for a Tab key, if so expand tab to spaces
                                 ;
                                 glin5:
00143f 3019                      		cpi		rga,HT			; Test if tab
001440 f439                      		brne	glin6			;	No,  look for next special key
001441 e037                      		ldi		rgc,7			; Temp counter
001442 e210                      		ldi		rga,SP			; Space character
                                 glin5a:
001443 940e 1452                 		call	ldlin
001445 953a                      		dec		rgc
001446 f7e1                      		brne	glin5a
001447 cfd9                      		rjmp	glin1
                                 ;
                                 ; Look for a Escape key, if so set escf
                                 ;
                                 glin6:
001448 311b                      		cpi		rga,ESC			; Test if esc
001449 f411                      		brne	glin7			;	No, look for other control key
00144a 6280                      		sbr		flaga,(1<<escf)	; Set esc flag
00144b 9508                      		ret
                                 ;
                                 ; Look for other control key.
                                 ;
                                 glin7:
00144c d038                      		rcall	fctl			; Test for other control key
00144d ff86                      		sbrs	flaga,kyf
00144e c001                      		rjmp	glin8			;	kyf = 0
00144f 9508                      		ret						;	kyf = 1
                                 ;
                                 ; Arrive here is valid key entry
                                 ;
                                 glin8:
001450 d001                      		rcall	ldlin			; Load the input buffer and show
001451 cfcf                      		rjmp	glin1
                                 ;
                                 ; Load character in rga to LINBUF, update pointer and character counter		(OK)
                                 ;
                                 ldlin:
001452 2d22                      		mov		rgb,count		; Get current count
001453 3028                      		cpi		rgb,linsz		; End of buffer?
001454 f409                      		brne	ldlin1			;	No
001455 9508                      		ret						;	Yes, exit
                                 ldlin1:
001456 9523                      		inc		rgb
001457 2e22                      		mov		count,rgb		; Update count
001458 931d                      		st		X+,rga			; Store entered key to buffer
001459 940e 15f5                 		call	co				; Show it
00145b 9508                      		ret
                                 ;
                                 ;  Get linbuf character, increment XH:XL pointer and set C if
                                 ;  not 'CR', else clear C, rga = 0.
                                 ;
                                 gchr:
00145c 911d                      		ld		rga,X+			; Get character from line buffer, advance pointer
00145d 3010                      		cpi		rga,0			; Test for 0
00145e f411                      		brne	gchr1			;	rga >= 0, means ascii printable character
00145f 9488                      		clc
001460 9508                      		ret
                                 gchr1:
001461 9408                      		sec
001462 9508                      		ret
                                 ;
                                 ; Clear input line buffer	(OK)
                                 ;
                                 inzln:
001463 2700                      		clr		rmp				; Fill byte
001464 2422                      		clr		count			; Initialize count to 0
001465 e028                      		ldi		rgb,linsz		; Buffer size
                                +
001466 e0b3                     +ldi XH , high ( linbuf )
001467 e3a8                     +ldi XL , low ( linbuf )
                                 		ldxptr	linbuf			; Point to line buffer
                                 inzln1:
001468 930d                      		st		X+,rmp
001469 952a                      		dec		rgb
00146a f7e9                      		brne	inzln1
                                +
00146b e0b3                     +ldi XH , high ( linbuf )
00146c e3a8                     +ldi XL , low ( linbuf )
                                 		ldxptr	linbuf			; Point to line buffer
00146d 7c8f                      		cbr		flaga,(1<<crf)|(1<<escf)	; Clear exit flags
00146e 9508                      		ret
                                 ;
                                 ; Zero RAM data space, excluding UF0 space and timer reload buffers
                                 ;
                                 zbuf:
00146f e522                      		ldi		rgb,(buffend-tcb0)
                                +
001470 e0b3                     +ldi XH , high ( tcb0 )
001471 e1a0                     +ldi XL , low ( tcb0 )
                                 		ldxptr	tcb0			; Start at TCB0
001472 2700                      		clr		rmp
                                 zbuf1:
001473 930d                      		st		X+,rmp
001474 952a                      		dec		rgb
001475 f7e9                      		brne	zbuf1
001476 9508                      		ret
                                 ;
                                 ; Zero lower register buffers
                                 ;
                                 zregs:
001477 2700                      		clr		rmp
001478 2e60                      		mov		BSTK,rmp
001479 9300 034f                 		sts		PA,rmp			; RAM buffer
00147b 9300 0353                 		sts		PU,rmp			; RAM buffer
00147d 9300 0354                 		sts		PV,rmp			; RAM buffer
00147f 9300 0351                 		sts		PY,rmp			; RAM buffer
001481 2ed0                      		mov		res0,rmp
001482 2ee0                      		mov		res1,rmp
001483 2ef0                      		mov		res2,rmp
001484 9508                      		ret
                                 ;
                                 ;  Test rga for control key, 0...19H, 7FH..FFH, and set KYF		(OK)
                                 ;  if true, else clear KYF. rga preserved
                                 ;
                                 fctl:
001485 6480                      		sbr		flaga,(1<<kyf)
001486 3210                      		cpi		rga,SP				; rga < SP?
001487 f018                      		brcs	fctl1				;	Yes
001488 371f                      		cpi		rga,DEL				; rga >= SP?
001489 f408                      		brcc	fctl1				;	No
00148a 7b8f                      		cbr		flaga,(1<<kyf)		; Clear kyf
                                 fctl1:
00148b 9508                      		ret
                                 ;
                                 ;  Display LNCTR contents as decimal digits
                                 ;
                                 pgmln:
00148c 91d0 0344                 		lds		YH,lnctr		; Get hi byte
00148e 91c0 0345                 		lds		YL,lnctr+1		; Get lo byte
001490 940e 14fe                 		call	bn2bcd			; Convert to packed BCD
001492 940e 14ab                 		call	p3dg
001494 940e 1605                 		call	dblsp
001496 9508                      		ret
                                 ;
                                 ;  Show contents of Data Buffer		(OK)
                                 ;
                                 pdbuf:
001497 d1d2                      		rcall	pxy
001498 2706                      		.db		6,39
                                +
001499 e0b3                     +ldi XH , high ( wdbuf )
00149a e4ac                     +ldi XL , low ( wdbuf )
                                 		ldxptr	wdbuf			; Pointer to wdbuf
00149b 91dd                      		ld		YH,X+			; Get hi byte
00149c 91cc                      		ld		YL,X			; Get lo byte
00149d 940e 14fe                 		call	bn2bcd			; Convert to packed BCD
00149f 940e 14a2                 		call	p5dg			; Show the data word
0014a1 9508                      		ret
                                 ;
                                 ; Print 5 digits in res2:res1:res0 stored as packed bcd		(OK)
                                 ;
                                 p5dg:
0014a2 2d1f                      		mov		rga,res2		; Fetch 1st of 3 bytes
0014a3 d013                      		rcall	pdg				; Show digit 5 only
                                 ;
                                 ; Print 4 digits in res2:res1:res0 stored as packed bcd		(OK)
                                 ;
                                 p4dg:
0014a4 2d1e                      		mov		rga,res1		; Fetch 2nd of 3 bytes
0014a5 940e 14af                 		call	pacc			; Show digits 4,3
                                 ;
                                 ; Print 2 digits in res2:res1:res0 stored as packed bcd		(OK)
                                 ;
                                 p2dg:
0014a7 2d1d                      		mov		rga,res0		; Fetch 3rd of 3 bytes
0014a8 940e 14af                 		call	pacc
0014aa 9508                      		ret
                                 ;
                                 ; Print 3 digits in res2:res1:res0 stored as packed bcd		(OK)
                                 ;
                                 p3dg:
0014ab 2d1e                      		mov		rga,res1		; Fetch 2nd of 3 bytes
0014ac 940e 14b7                 		call	pdg				; Show digit 3 only
0014ae cff8                      		rjmp	p2dg			; Show digits 2,1
                                 ;
                                 ; Convert packed BCD digits in rga to ascii and display		(OK)
                                 ;
                                 pacc:
0014af 2e31                      		mov		asav,rga		; Save the data
0014b0 9512                      		swap	rga				; Hi nibble first
0014b1 940e 14b7                 		call	pdg				; Convert to ascii and display
0014b3 2d13                      		mov		rga,asav
0014b4 940e 14b7                 		call	pdg				; Show lo nibble
0014b6 9508                      		ret
                                 ;
                                 ; Display bcd low nibble as ascii digit			(OK)
                                 ;
                                 pdg:
0014b7 701f                      		andi	rga,0x0f		; Mask hi nibble
0014b8 e300                      		ldi		rmp,'0'			; Convert by adding '0'
0014b9 0f10                      		add		rga,rmp
0014ba 940e 15f5                 		call	co				; Show the digit
0014bc 9508                      		ret
                                 ;
                                 ;
                                 ;###########################################################################
                                 ;
                                 ; --- Conversion and testing routines ---
                                 ;
                                 ;  Convert rga to upper case
                                 ;
                                 case:
0014bd 3611                      		cpi		rga,0x61		; Ascii 'a'
0014be f020                      		brcs	case1			; < a
0014bf 371b                      		cpi		rga,0x7b		; Ascii 'z'
0014c0 f410                      		brcc	case1			; > z
0014c1 9488                      		clc
0014c2 4210                      		sbci	rga,SP			; Subtract SP to convert to UC
                                 case1:
0014c3 9508                      		ret
                                 ;
                                 ; gnum used to process possible good ascii number from linbuf, convert it to		(OK)
                                 ; binary number in YH:YL using gdbn.
                                 ;
                                 ; Save data byte in DBA if number less than 256, or data word
                                 ; in WDBUF if number is 256 to 65,535. The numfl is set if the input
                                 ; data is good byte value. User to clear numfl after test.
                                 ;
                                 ; Registers:	flaga, rgv, YH, YL, rmp, XH:XL
                                 ;
                                 gnum:
0014c4 7f87                      		cbr		flaga,(1<<numfl)	; Clear the good number flag
0014c5 2d72                      		mov		rgv,count			; Load counter with number of characters in linbuf
0014c6 3076                      		cpi		rgv,ndec+1			; Compare to limit
0014c7 f468                      		brcc	gnum2				; Too many digits error
0014c8 940e 14d6                 		call	gdbn				; Convert to binary in YH:YL
0014ca f450                      		brcc	gnum2				; Error
                                +
0014cb e0b3                     +ldi XH , high ( wdbuf )
0014cc e4ac                     +ldi XL , low ( wdbuf )
                                 		ldxptr	wdbuf				; Point to data word buffer
0014cd 93dd                      		st		X+,YH				; Save result high byte
0014ce 93cd                      		st		X+,YL				; Save result low byte
0014cf 93cc                      		st		X,YL				; Save result low to data byte buffer
0014d0 23dd                      		tst		YH					; Test result high byte if zero
0014d1 f011                      		breq	gnum1				;	Yes, word value
0014d2 ef0f                      		ldi		rmp,0xff			;	No, cap byte value to 0xff
0014d3 930c                      		st		X,rmp				;   Save in dba
                                 gnum1:
0014d4 6088                      		sbr		flaga,(1<<numfl)	; Mark as byte value
                                 gnum2:
0014d5 9508                      		ret
                                 ;
                                 ; Convert ASCII decimal string in LINBUF to binary number in  YH:YL.		(OK)
                                 ; The number to be converted is maximum allowed 5 ascii digits long,
                                 ; set by ndec, equivalent to (0xffff) binary number.
                                 ;
                                 ; This routine called by gnum to convert ascii numbers for data entry
                                 ;
                                 ; Entry: rgv = ndec, number of ascii digits to convert
                                 ; Exit:  YH:YL <-- 16 bit result if ok, C = 1
                                 ;        YH:YL <-- 00, C = 0 if error
                                 ; Regs:  rga, rgb, rgc, YH, YL, rgv, XH:XL
                                 ;
                                 gdbn:
0014d6 27dd                      		clr		YH			; Clear result registers
0014d7 27cc                      		clr		YL
                                +
0014d8 e0b3                     +ldi XH , high ( linbuf )
0014d9 e3a8                     +ldi XL , low ( linbuf )
                                 		ldxptr	linbuf		; Setup line buffer pointer
                                 gdbn1:
0014da 911d                      		ld		rga,X+		; Fetch a character
0014db 940e 14f3                 		call	decdg		; Convert to BCD
0014dd f468                      		brcc	gdbnx		; Error exit
0014de 2e31                      		mov		asav,rga	; Save character
0014df 940e 1582                 		call	dex10		; Value * 10, result in YH:YL
0014e1 f068                      		brcs	gdbnov		; Overflow
                                 ;
0014e2 2d33                      		mov		rgc,asav	; Add original digit in
0014e3 2722                      		clr		rgb
0014e4 940e 1594                 		call	adebc		; YH:YL = YH:YL + rgb:rgc
0014e6 f040                      		brcs	gdbnov		; Overflow error
0014e7 957a                      		dec		rgv			; All characters processed?
0014e8 f789                      		brne	gdbn1		;	No, continue
0014e9 9408                      		sec
0014ea 9508                      		ret					;	Yes, normal exit
                                 ;
                                 gdbnx:
0014eb 9488                      		clc					; Error exit
0014ec 27dd                      		clr		YH
0014ed 27cc                      		clr		YL
0014ee 9508                      		ret
                                 ;
                                 gdbnov:
0014ef 9408                      		sec					; Overflow condition
0014f0 efdf                      		ldi		YH,0xff
0014f1 efcf                      		ldi		YL,0xff	; Limit to 0xFFFF
0014f2 9508                      		ret
                                 ;
                                 ; Convert ASCII 0.....9 to BCD, C = 1 if ok, else		(OK)
                                 ; C = 0 and rga unchanged
                                 ; Registers:	rga, asav
                                 ;
                                 decdg:
0014f3 2e31                      		mov		asav,rga	; Save ascii digit
0014f4 940e 14bd                 		call	case		; Fold to UC
0014f6 5310                      		subi	rga,'0'		; Char less than char '0'?
0014f7 f018                      		brcs	ddgx		;	Yes, error exit
0014f8 301a                      		cpi		rga,LF		;  Char from 0...9?
0014f9 f408                      		brcc	ddgx		;	No, error exit
0014fa 9508                      		ret					; Is 0...9
                                 ddgx:
0014fb 9488                      		clc					; Not 0...9
0014fc 2d13                      		mov		rga,asav
0014fd 9508                      		ret
                                 ;
                                 ; Convert 16 bit binary in YH:YL to packed bcd in res2:res1:res0		(OK)
                                 ;
                                 ; Registers: rgb, rgc, YH, YL, res0, res1, res2
                                 ;
                                 bn2bcd:
0014fe ef3f                      		ser		rgc					; rgc = 0xff
0014ff 2ef3                      		mov		res2,rgc
                                 ;
                                 ; Process 10,000's digit
                                 ;
                                 cvde_L10k:
001500 94f3                      		inc		res2
001501 51c0                      		subi	YL,low(10000)
001502 42d7                      		sbci	YH,high(10000)
001503 f7e0                      		brcc	cvde_L10k			; Loop until C set
001504 5fc0                      		subi	YL,low(-10000)		; Correct last subtraction
001505 4dd8                      		sbci	YH,high(-10000)
001506 ef20                      		ldi		rgb,(256-16)
                                 ;
                                 ; Process 1000's digit
                                 ;
                                 cvde_L1k:
001507 5f20                      		subi	rgb,(-16)
001508 5ec8                      		subi	YL,low(1000)
001509 40d3                      		sbci	YH,high(1000)
00150a f7e0                      		brcc	cvde_L1k			; Loop until C set
00150b 51c8                      		subi	YL,low(-1000)		; Correct last subtraction
00150c 4fdc                      		sbci	YH,high(-1000)
00150d 2ee3                      		mov		res1,rgc
                                 ;
                                 ; Process 100's digit
                                 ;
                                 cvde_L100:
00150e 94e3                      		inc		res1
00150f 56c4                      		subi	YL,low(100)
001510 40d0                      		sbci	YH,high(100)
001511 f7e0                      		brcc	cvde_L100			; Loop until C set
001512 59cc                      		subi	YL,low(-100)		; Correct last subtraction
001513 2ae2                      		or		res1,rgb
001514 ef20                      		ldi		rgb,(256-16)
                                 ;
                                 ; Process 10's digit
                                 ;
                                 cvde_L10:
001515 5f20                      		subi	rgb,(-16)
001516 50ca                      		subi	YL,10
001517 f7e8                      		brcc	cvde_L10			; Loop until C set
001518 5fc6                      		subi	YL,-10				; Correct last subtraction
001519 2ed2                      		mov		res0,rgb
00151a 2adc                      		or		res0,YL
00151b 9508                      		ret
                                 ;
                                 ;
                                 ; Convert rga to hex digit and set C, else clear C if character
                                 ; not an ascii hexadecimal digit. On error, return with character in rga
                                 ;
                                 ; Registers:	rga
                                 ;
                                 hexdg:
00151c 2e31                      		mov		asav,rga	; Save char
00151d df9f                      		rcall	case		; Fold to UC
00151e 5310                      		subi	rga,'0'		; rga < '0'?
00151f f040                      		brcs	hexdg1		;	Yes, exit
001520 301a                      		cpi		rga,LF		; rga from 0...9?
001521 f028                      		brcs	hexdg2		;	Yes
001522 5017                      		subi	rga,7		; Dump funny chars
001523 301a                      		cpi		rga,LF		; Char from 9...A?
001524 f018                      		brcs	hexdg1
001525 3110                      		cpi		rga,0x10	; Char above F?
001526 f408                      		brcc	hexdg1		;	Yes
                                 hexdg2:
001527 9508                      		ret					; Normal exit, C=1
                                 hexdg1:
001528 2d13                      		mov		rga,asav	; Restore char
001529 9488                      		clc
00152a 9508                      		ret
                                 ;
                                 ; --- General Tile Interpreter Screen Routines ---
                                 ;
                                 ;  Screen routines
                                 ;
                                 slina:
00152b 940e 166a                 		call	pxy
00152d 0218                      		.db		24,2			; Cursor to status line position A
00152e c003                      		rjmp	slin
                                 slinb:
00152f 940e 166a                 		call	pxy				; Cursor to status line
001531 1618                      		.db		24,22
                                 slin:
001532 940e 1635                 		call	ceol			; Clear the line
001534 9508                      		ret
                                 ;
                                 clean:
001535 940e 166a                 		call	pxy				; Wipe screen clean
001537 0108                      		.db		8,1
001538 940e 153f                 		call	clin			; Clear lines
00153a 000f                      		.dw		15
00153b 940e 166a                 		call	pxy
00153d 0108                      		.db		8,1
00153e 9508                      		ret
                                 ;
                                 ; Clear lines specified immediately following rcall to clin
                                 ;
                                 clin:
00153f 91ff                      	pop		ZH				; Point to data word
001540 91ef                      	pop		ZL
001541 0fee                      	lsl		ZL				; Z*2 for word address
001542 1fff                      	rol		ZH
001543 7fee                      	andi	ZL,0xfe			; Fetch lower byte of word
001544 9125                      	lpm		rgb,Z+			; Get word
001545 9631                      	adiw	Z,1
001546 95f6                      	lsr		ZH
001547 95e7                      	ror		ZL				; Z/2
001548 93ef                      	push	ZL				; Return address to stack
001549 93ff                      	push	ZH
                                 clin1:
00154a 940e 1635                 	call	ceol			; Clear lines
00154c 940e 1630                 	call	cdown			; Move cursor down 1 row
00154e 952a                      	dec		rgb
00154f f7d1                      	brne	clin1
001550 9508                      	ret
                                 ;
                                 ; Display 'Enter:' prompt
                                 ;
                                 enter:
001551 940e 166a                 		call	pxy
001553 0616                      		.db		22,6
001554 940e 1635                 		call	ceol
                                +
001556 e3f3                     +ldi ZH , high ( entm * 2 )
001557 eee6                     +ldi ZL , low ( entm * 2 )
                                 		ldzptr	entm
001558 940e 161d                 		call	pptr
00155a 9508                      		ret
                                 ;
                                 ; Display 'File 0' message
                                 ;
                                 pruf0:
00155b 940e 166a                 		call	pxy
00155d 0218                      		.db		24,2
00155e 940e 1635                 		call	ceol
                                +
001560 e3f3                     +ldi ZH , high ( uf0m * 2 )
001561 eae6                     +ldi ZL , low ( uf0m * 2 )
                                 		ldzptr	uf0m			; Show File 0
001562 940e 161d                 		call	pptr
001564 9508                      		ret
                                 ;
                                 ; Print main screen
                                 ;
                                 prscn:
001565 940e 1627                 		call	clrscn			; Home cursor and clear screen
001567 940e 166a                 		call	pxy
001569 0101                      		.db		1,1
                                +
00156a e2fd                     +ldi ZH , high ( scrnm * 2 )
00156b eaec                     +ldi ZL , low ( scrnm * 2 )
                                 		ldzptr	scrnm			; Print Tile header
00156c 940e 161d                 		call	pptr
00156e 940e 166a                 		call	pxy
001570 0117                      		.db		23,1
                                +
001571 e2ff                     +ldi ZH , high ( statm * 2 )
001572 e1ec                     +ldi ZL , low ( statm * 2 )
                                 		ldzptr	statm			; Print status line
001573 940e 161d                 		call	pptr
001575 9508                      		ret
                                 ;
                                 sak:
001576 940e 166a                 		call	pxy
001578 3a18                      		.db		24,58
                                +
001579 e3f3                     +ldi ZH , high ( sakm * 2 )
00157a e9e0                     +ldi ZL , low ( sakm * 2 )
                                 		ldzptr	sakm			; Strike any key
00157b 940e 161d                 		call	pptr
00157d 940e 15ee                 		call	ci				; Wait for any key
00157f 940e 152f                 		call	slinb
001581 9508                      		ret
                                 ;
                                 ; --- Data Buffer control and Math routines ---
                                 ;
                                 ; Multiply YH:YL by 10, called by gdbn ascii to binary converter routine		(OK)
                                 ; YH:YL = YH:YL * 10, C = 0 if ok, C = 1 on error
                                 ; Registers:	rga, rgb, rgc, YH, YL
                                 ;
                                 dex10:
001582 940e 1590                 		call	dex2		; YH:YL * 2
001584 f050                      		brcs	dexx		; Error exit, overflow and C=1
001585 93df                      		push	YH			; Copy YH:YL to rgb:rgc
001586 912f                      		pop		rgb
001587 93cf                      		push	YL
001588 913f                      		pop		rgc
                                 ;
001589 d006                      		rcall	dex2		; * 4
00158a f020                      		brcs	dexx
00158b d004                      		rcall	dex2		; * 8
00158c f010                      		brcs	dexx
00158d 940e 1594                 		call	adebc		; YH:YL = YH:YL + rgb:rgc
                                 dexx:
00158f 9508                      		ret
                                 ;
                                 ; YH:YL: = YH:YL * 2
                                 ;
                                 dex2:
001590 9488                      		clc
001591 1fcc                      		rol		YL
001592 1fdd                      		rol		YH
001593 9508                      		ret
                                 ;
                                 ; YH:YL = YH:YL + rgb:rgc, C = 0 if ok else C = 1 on overflow
                                 ;
                                 adebc:
001594 0fc3                      		add		YL,rgc
001595 1fd2                      		adc		YH,rgb
001596 9508                      		ret
                                 ;
                                 ; Decrement XH:XL pointer by 1		(OK)
                                 ;
                                 decxptr:
001597 930f                      		push	rmp
001598 ef0f                      		ldi		rmp,-1
001599 0fa0                      		add		XL,rmp
00159a 1fb0                      		adc		XH,rmp
00159b 910f                      		pop		rmp
00159c 9508                      		ret
                                 ;
                                 ; "div8u" - 8/8 Bit Unsigned Division				(OK)
                                 ;
                                 ; This subroutine divides the two register variables "rga" (dividend) and
                                 ; "rgb" (divisor). The result is placed in "rga" and the remainder in "rgb".
                                 ;
                                 ; High registers used:	4 (rga,rgb,rgc,rgv)
                                 ;
                                 ;
                                 ; Register Variables:
                                 ;	rgc	remainder
                                 ;	rga	dividend & result
                                 ;	rgb divisor
                                 ;	rgv	loop counter
                                 ;
                                 ; Entry:	(rga) = dividend
                                 ;			(rgb) = divisor
                                 ; Exit:		(rga) = integer part of quotient
                                 ;			(rgb) = integer remainder
                                 ;
                                 div8u:
00159d 933f                      		push	rgc
00159e 937f                      		push	rgv
00159f 1b33                      		sub		rgc,rgc			; clear remainder and carry
0015a0 e079                              ldi		rgv,9			; init loop counter
0015a1 1f11                      d8u_1:	rol		rga				; shift left dividend
0015a2 957a                              dec		rgv				; decrement counter
0015a3 f421                              brne	d8u_2			; if done
0015a4 2f23                      		mov		rgb,rgc			; move remainder to rgb
0015a5 917f                      		pop		rgv
0015a6 913f                      		pop		rgc
0015a7 9508                              ret						;    return
                                 ;
0015a8 1f33                      d8u_2:	rol		rgc				; shift dividend into remainder
0015a9 1b32                              sub		rgc,rgb			; remainder = remainder - divisor
0015aa f418                              brcc	d8u_3			; if result negative
0015ab 0f32                              add		rgc,rgb			;    restore remainder
0015ac 9488                              clc						;    clear carry to be shifted into result
0015ad cff3                              rjmp	d8u_1			; else
0015ae 9408                      d8u_3:	sec						;    set carry to be shifted into result
0015af cff1                              rjmp	d8u_1
                                 ;
                                 ;
                                 ; --- General Service Routines ---
                                 ;
                                 ;
                                 ; Turn off watchdog
                                 ;
                                 wdt_off:
0015b0 94f8                      		cli							; Clear global interrupts
                                 ;
                                 ; Reset WD timer
                                 ;
0015b1 95a8                      		wdr
                                 ;
0015b2 b704                      		in		rmp,MCUSR				; Clear WDRF bit
0015b3 7000                      		andi	rmp,(0xff & (0<<WDRF))	; WDRF bit = 0
0015b4 bf04                      		out		MCUSR,rmp
                                 ;
                                 ; Set WDCE and WDE bits, keep old prescaler setting
                                 ;
0015b5 9100 0060                 		lds		rmp,WDTCSR
0015b7 6108                      		ori		rmp,(1<<WDCE)|(1<<WDE)
0015b8 9300 0060                 		sts		WDTCSR,rmp
                                 ;
                                 ; Turn off WDT
                                 ;
0015ba e000                      		ldi		rmp,(0<<WDE)			; Clear WD system reset enable
0015bb 9300 0060                 		sts		WDTCSR,rmp
                                 ;
0015bd 9478                      		sei								; Set global interrupts
0015be 9508                      		ret
                                 ;
                                 ;
                                 ;###########################################################################
                                 ;
                                 ; --- Video routines ---
                                 ;
                                 ;
                                 ; --- Low level video drivers ---
                                 ;
                                 ; Register rga used to pass data to console output routine
                                 ;
                                 ; Print rga data as two hexadecimal digits.			(OK)
                                 ;
                                 pahex:
0015bf 931f                      	push	rga
0015c0 9512                      	swap	rga				; Show MSD nibble first
0015c1 d001                      	rcall	pahex1
0015c2 911f                      	pop		rga
                                 pahex1:
0015c3 701f                      	andi	rga, 0x0f		; Mask off higher nibble
0015c4 e370                      	ldi		rgv, 0x30 		; Add ascii '0' to convert
0015c5 0f17                      	add		rga, rgv		; Convert to ascii
0015c6 331a                      	cpi		rga, 0x3a		; Check if > 9
0015c7 f010                      	brcs	pahex2			;  No, it is 0 ... 9
0015c8 e077                      	ldi		rgv, 0x07		;  Yes, convert to A ... F
0015c9 0f17                      	add		rga, rgv
                                 pahex2:
0015ca 940e 15f5                 	call	co
0015cc 9508                      	ret
                                 ;
                                 ; Print rga contents as decimal (0...255). Leading			(OK)
                                 ; zero suppression is provided only on the 100's
                                 ; digit, so at least two digits are always printed.
                                 ;
                                 ; Registers rga, rgb not saved
                                 ;
                                 pdec:
0015cd e624                      	ldi		rgb,100			; Get 100's digit
0015ce 940e 159d                 	call	div8u
0015d0 2311                      	tst		rga				; Do leading zero suppression
0015d1 f011                      	breq	pdec1
0015d2 940e 15e1                 	call	pnum
                                 pdec1:
0015d4 e01a                      	ldi		rga,10			; Get 10's digit
                                +
0015d5 931f                     +push rga
0015d6 932f                     +push rgb
0015d7 911f                     +pop rga
0015d8 912f                     +pop rgb
                                 	xchreg	rga,rgb
0015d9 940e 159d                 	call	div8u			; rgb has units
0015db 940e 15e1                 	call	pnum
                                +
0015dd 931f                     +push rga
0015de 932f                     +push rgb
0015df 911f                     +pop rga
0015e0 912f                     +pop rgb
                                 	xchreg	rga,rgb
                                 pnum:
0015e1 6310                      	ori		rga,0x30		; Ascii "0"
0015e2 940e 15f5                 	call	co				; Show ascii decimal
0015e4 9508                      	ret
                                 ;
                                 ; Scan for keyboard input and return char in rga if any,
                                 ; else rga=0.
                                 ;
                                 getc:
0015e5 9100 00c0                 	lds		rmp,UCSR0A		; Get UART control status register
0015e7 ff07                      	sbrs	rmp,RXC0		; Test receiver complete flag
0015e8 c003                      	rjmp	getc1
0015e9 9110 00c6                 	lds		rga,UDR0		; rga <-- UDR0
0015eb 9508                      	ret
                                 getc1:
0015ec 2711                      	clr	rga
0015ed 9508                      	ret
                                 ;
                                 ; Load rga from UDR0 register. Waits until data byte is received.		(OK)
                                 ;
                                 ci:
0015ee 9100 00c0                 	lds		rmp,UCSR0A		; Get UART control status register
0015f0 ff07                      	sbrs	rmp,RXC0		; Test receiver complete flag
0015f1 cffc                      	rjmp	ci
                                 ;
                                 ; Fetch data
                                 ;
0015f2 9110 00c6                 	lds		rga,UDR0		; rga <-- UDR0
0015f4 9508                      	ret
                                 ;
                                 ; Load UDR0 from rga. Wait until transmitter is empty before loading.		(OK)
                                 ;
                                 co:
0015f5 9100 00c0                 	lds		rmp,UCSR0A		; Get UART control status register
0015f7 ff05                      	sbrs	rmp,UDRE0		; Test if UDR0 is empty
0015f8 cffc                      	rjmp	co
                                 ;
                                 ; Send data
                                 ;
0015f9 9310 00c6                 	sts		UDR0,rga		; UDR0 <-- rga
0015fb 9508                      	ret
                                 ;
                                 ; Print CR and LFs	(OK)
                                 ;
                                 crllf:
0015fc d000                      	rcall	crlf			; Two CRLF
                                 crlf:
0015fd 931f                      	push	rga
0015fe e01d                      	ldi		rga,CR			; Carriage return
0015ff 940e 15f5                 	call	co
001601 e01a                      	ldi		rga,LF			; Linefeed
001602 940e 15f5                 	call	co
001604 c00a                      	rjmp	cco
                                 ;
                                 ; Print spaces	(OK)
                                 ;
                                 dblsp:
001605 940e 1607                 	call	space
                                 space:
001607 931f                      	push	rga
001608 e210                      	ldi		rga,SP			; Space
001609 c005                      	rjmp	cco
                                 ;
                                 ; Print tab	(OK)
                                 ;
                                 prtab:
00160a 931f                      	push	rga
00160b e019                      	ldi		rga,HT
00160c c002                      	rjmp	cco
                                 ;
                                 ; Ring bell
                                 ;
                                 beep:
00160d 931f                      	push	rga
00160e e017                      	ldi		rga,BELL
                                 cco:
00160f 940e 15f5                 	call	co
001611 911f                      	pop		rga
001612 9508                      	ret
                                 ;
                                 ; Print comma	(OK)
                                 ;
                                 prcma:
001613 931f                      	push	rga
001614 e21c                      	ldi		rga,cma
001615 cff9                      	rjmp	cco
                                 ;
                                 ; Print delete character at cursor	(OK)
                                 ;
                                 bksp:
001616 931f                      	push	rga
001617 940e 163a                 	call	cbak			; Delete character at cursor
001619 940e 1635                 	call	ceol			; Clear cursor to end of line
00161b 911f                      	pop		rga
00161c 9508                      	ret
                                 ;
                                 ; Print message string, ^Z terminated. Routine is called with		(OK)
                                 ; code address of string loaded in ZH:ZL.
                                 ;
                                 pptr:
00161d 931f                      	push	rga
                                 pptr1:
00161e 9115                      	lpm		rga,Z+			; String byte to rga, Z+
00161f 311a                      	cpi		rga,ctlZ		; byte ^Z?
001620 f411                      	brne	pptr2			; Print if not ^Z
001621 911f                      	pop		rga
001622 9508                      	ret
                                 pptr2:
001623 3010                      	cpi		rga,NULL		; Skip any nulls in string
001624 f3c9                      	breq	pptr1
001625 dfcf                      	rcall	co
001626 cff7                      	rjmp	pptr1
                                 ;
                                 ; --- Video and Cursor control routines ---
                                 ;
                                 ; Clear screen	(OK)
                                 ;
                                 clrscn:
001627 93ff                      	push	zh
001628 93ef                      	push	zl
                                +
001629 e2fd                     +ldi ZH , high ( scrn * 2 )
00162a e2e4                     +ldi ZL , low ( scrn * 2 )
                                 	ldzptr	scrn		; Home cursor
00162b 940e 161d                 	call	pptr
                                +
00162d e2fd                     +ldi ZH , high ( clrs * 2 )
00162e e2ee                     +ldi ZL , low ( clrs * 2 )
                                 	ldzptr	clrs		; Clear entire screen
00162f c01d                      	rjmp	video
                                 ;
                                 ; --- Move cursor down ---
                                 ;
                                 cdown:
001630 93ff                      	push	zh
001631 93ef                      	push	zl
                                +
001632 e2fd                     +ldi ZH , high ( cudn * 2 )
001633 e1ec                     +ldi ZL , low ( cudn * 2 )
                                 	ldzptr	cudn		; Cursor down one row
001634 c018                      	rjmp	video
                                 ;
                                 ; --- Clear to end of line ---
                                 ;
                                 ceol:
001635 93ff                      	push	zh
001636 93ef                      	push	zl
                                +
001637 e2fd                     +ldi ZH , high ( eol * 2 )
001638 e3e2                     +ldi ZL , low ( eol * 2 )
                                 	ldzptr	eol			; Clear to end of screen
001639 c013                      	rjmp	video
                                 ;
                                 ; --- Cursor back one column ---
                                 ;
                                 cbak:
00163a 93ff                      	push	zh
00163b 93ef                      	push	zl
                                +
00163c e2fd                     +ldi ZH , high ( cubk * 2 )
00163d e2e0                     +ldi ZL , low ( cubk * 2 )
                                 	ldzptr	cubk			; Cursor back 1 column
00163e c00e                      	rjmp	video
                                 ;
                                 ; --- Highlight on ---
                                 ;
                                 vhi:
00163f 93ff                      	push	zh
001640 93ef                      	push	zl
                                +
001641 e2fd                     +ldi ZH , high ( hi * 2 )
001642 e3e6                     +ldi ZL , low ( hi * 2 )
                                 	ldzptr	hi			; Highlight on
001643 c009                      	rjmp	video
                                 ;
                                 ; --- Normal ---
                                 ;
                                 vlo:
001644 93ff                      	push	zh
001645 93ef                      	push	zl
                                +
001646 e2fd                     +ldi ZH , high ( lo * 2 )
001647 e3ec                     +ldi ZL , low ( lo * 2 )
                                 	ldzptr	lo			; Normal - attributes off
001648 c004                      	rjmp	video
                                 ;
                                 ; --- Reverse ---	(OK)
                                 ;
                                 vrev:
001649 93ff                      	push	zh
00164a 93ef                      	push	zl
                                +
00164b e2fd                     +ldi ZH , high ( rev * 2 )
00164c e4e0                     +ldi ZL , low ( rev * 2 )
                                 	ldzptr	rev			; Reverse on
                                 video:
00164d dfcf                      	rcall	pptr
00164e 91ef                      	pop		zl
00164f 91ff                      	pop		zh
001650 9508                      	ret
                                 ;
                                 ; --- Video position cursor sequences ---
                                 ; Lead-in sequence
                                 ;
                                 vpxy1:
001651 93ff                      	push	zh
001652 93ef                      	push	zl
                                +
001653 e2fd                     +ldi ZH , high ( pxy1 * 2 )
001654 e4e6                     +ldi ZL , low ( pxy1 * 2 )
                                 	ldzptr	pxy1			; Lead-in sequence
001655 cff7                      	rjmp	video
                                 ;
                                 ; Middle sequence
                                 ;
                                 vpxy2:
001656 93ff                      	push	zh
001657 93ef                      	push	zl
                                +
001658 e2fd                     +ldi ZH , high ( pxy2 * 2 )
001659 e4ea                     +ldi ZL , low ( pxy2 * 2 )
                                 	ldzptr	pxy2			; Middle sequence
00165a cff2                      	rjmp	video
                                 ;
                                 ; End sequence
                                 ;
                                 vpxy3:
00165b 93ff                      	push	zh
00165c 93ef                      	push	zl
                                +
00165d e2fd                     +ldi ZH , high ( pxy3 * 2 )
00165e e4ec                     +ldi ZL , low ( pxy3 * 2 )
                                 	ldzptr	pxy3			; Trailing sequence
00165f cfed                      	rjmp	video
                                 ;
                                 ; --- Save cursor position ---
                                 ;
                                 vscp:
001660 93ff                      	push	zh
001661 93ef                      	push	zl
                                +
001662 e2fd                     +ldi ZH , high ( scp * 2 )
001663 e5e4                     +ldi ZL , low ( scp * 2 )
                                 	ldzptr	scp			; Save cursor position
001664 cfe8                      	rjmp	video
                                 ;
                                 ; --- Restore cursor position ---
                                 ;
                                 vrcp:
001665 93ff                      	push	zh
001666 93ef                      	push	zl
                                +
001667 e2fd                     +ldi ZH , high ( rcp * 2 )
001668 e5e8                     +ldi ZL , low ( rcp * 2 )
                                 	ldzptr	rcp					; Restore cursor position
001669 cfe3                      	rjmp	video
                                 ;
                                 ; --- Position cursor at row, column immediately following rcall to pxy ---
                                 ;
                                 ; Row & column values must be given as ascii decimal.			(OK)
                                 ;
                                 pxy:
00166a 940e 1651                 	call	vpxy1			; Lead-in sequence
00166c 91ff                      	pop		ZH				; Point to string start address
00166d 91ef                      	pop		ZL
00166e 9488                      	clc
00166f 1fee                      	rol		ZL				; 16 bit multiply by 2 for word address
001670 1fff                      	rol		ZH
                                 ;
001671 9115                      	lpm		rga,Z+			; Pick up row value
001672 940e 15cd                 	call	pdec			; Print it and ..
001674 940e 1656                 	call	vpxy2			; Middle sequence		+++++ Uses Z pointer, must save Z +++
001676 9115                      	lpm		rga,Z+			; Pick up column value
001677 940e 15cd                 	call	pdec			; Print it and ..
001679 940e 165b                 	call	vpxy3			; End sequence
                                 ;
00167b 9488                      	clc
00167c 95f7                      	ror		ZH
00167d 95e7                      	ror		ZL
00167e 93ef                      	push	ZL				; Return to caller
00167f 93ff                      	push	ZH
001680 9508                      	ret
                                 ;
                                 ; Position cursor at (YH)-->row, (YL)-->col		(OK)
                                 ;
                                 gotoxy:
001681 940e 1651                 	call	vpxy1			; Send lead-in string
001683 2f1d                      	mov		rga,YH			; Get row value
001684 940e 15cd                 	call	pdec			; Send row
001686 940e 1656                 	call	vpxy2			; Send middle string
001688 2f1c                      	mov		rga,YL			; Get col value
001689 940e 15cd                 	call	pdec			; Send col
00168b 940e 165b                 	call	vpxy3			; Send trailing string
00168d 9508                      	ret
                                 ;
                                 ;
                                 ; --- Message strings data area ---
                                 ;
                                 ; Terminal control sequences
                                 ;
00168e 5b1b
00168f 1a42                      cudn:	.db	ESC,"[B",ctlZ		; Move cursor down
001690 5b1b
001691 1a44                      cubk:	.db	ESC,"[D",ctlZ		; Cursor back one column
001692 5b1b
001693 1a48                      scrn:	.db	ESC,"[H",ctlZ		; Home cursor
001694 5b1b
001695 4a30
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4408): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
001696 001a                      eos:	.db	ESC,"[0J",ctlZ		; Clear from cursor to end of screen
001697 5b1b
001698 1a4a                      clrs:	.db	ESC,"[J",ctlZ		; Clear entire screen
001699 5b1b
00169a 1a4b                      eol:	.db	ESC,"[K",ctlZ		; Erase to end of line
00169b 5b1b
00169c 6d31
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4411): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
00169d 001a                      hi:		.db	ESC,"[1m",ctlZ		; Highlight on
00169e 5b1b
00169f 1a6d                      lo:		.db	ESC,"[m",ctlZ		; Normal - attributes off
0016a0 5b1b
0016a1 6d37
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4413): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
0016a2 001a                      rev:	.db	ESC,"[7m",ctlZ		; Reverse on
0016a3 5b1b
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4414): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
0016a4 001a                      pxy1:	.db	ESC,"[",ctlZ		; Lead-in sequence
0016a5 1a3b                      pxy2:	.db	";",ctlZ			; Middle sequence
0016a6 1a48                      pxy3:	.db	"H",ctlZ			; Trailing sequence
0016a7 5b1b
0016a8 4d31
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4417): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
0016a9 001a                      dlc:	.db	ESC,"[1M",ctlZ		; Delete line at cursor
0016aa 371b
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4418): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
0016ab 001a                      scp:	.db	ESC,"7",ctlZ		; Save cursor position
0016ac 381b
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4419): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
0016ad 001a                      rcp:	.db	ESC,"8",ctlZ		; Restore cursor position
                                 ;
                                 ;
                                 ;###########################################################################
                                 ;
                                 .include	"eeprom_module.asm"
                                 
                                  * eeprom_module.asm
                                  *
                                  *  Created: 3/18/2014 1:26:05 PM
                                  *   Author: lynf
                                  */
                                 ;
                                 ;  Version 0 
                                 ;
                                 ;###########################################################################
                                 ; MIT License
                                 ;
                                 ; Copyright (c) 2019 Francis Lyn
                                 ;
                                 ; Permission is hereby granted, free of charge, to any person obtaining a copy
                                 ; of this software and associated documentation files (the "Software"), to deal
                                 ; in the Software without restriction, including without limitation the rights
                                 ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                                 ; copies of the Software, and to permit persons to whom the Software is
                                 ; furnished to do so, subject to the following conditions:
                                 ;
                                 ; The above copyright notice and this permission notice shall be included in all
                                 ; copies or substantial portions of the Software.
                                 ;
                                 ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                                 ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                                 ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                                 ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                                 ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                                 ; SOFTWARE.
                                 ;###########################################################################
                                 ;
                                 ; INCLUDE this module in main code
                                 ; 
                                 ; Polled service routines for EEPROM random read and write. Read routine
                                 ; enters with EEPROM address specified in (rgb:rga). Routine return with
                                 ; EEPROM data in (rmp).
                                 ;
                                 ; Write routine enters with EEPROM address specified in (rgb:rga), and data
                                 ; to write in (rmp).
                                 ;
                                 ; Sequential read routine does not specify an EPROM start address but instead
                                 ; uses current (EEARH:EEARL) pointing to the last accessed EEPROM data.
                                 ; (EEARH:EEARL) is incremented by 1, then routine returns with EEPROM data in (rmp).
                                 ;
                                 ; Sequential read routine does not specify an EPROM start address but instead
                                 ; uses current (EEARH:EEARL) pointing to the last accessed EEPROM data, and with
                                 ; data to write in (rmp). (EEARH:EEARL) is incremented by 1, then routine writes
                                 ; (rmp) to EEPROM.
                                 ;
                                 ; Registers: rmp, Y
                                 ;
                                 ;***************************************************************************
                                 ;* 
                                 ;*		(OK)
                                 ;*
                                 ;* Wait until the EEPROM is ready to be programmed, then programs the EEPROM
                                 ;* with register variable "rmp" at address "YH:YL"
                                 ;*
                                 ;*
                                 ;***************************************************************************
                                 ;
                                 ;	Entry:
                                 ;	rmp			; data byte to write to EEPROM
                                 ;	YL			; address low byte to write to
                                 ;	YH			; address high byte to write to
                                 ;
                                 EEWrite:
0016ae 99f9                      	sbic	EECR,EEPE		; If EEPE not clear
0016af cffe                      	rjmp	EEWrite			;	wait more
                                 
0016b0 bdd2                      	out 	EEARH,YH		; Load EEPROM address high byte
0016b1 bdc1                      	out		EEARL,YL		; Load EEPROM address low byte
                                 		
                                 
0016b2 bd00                      	out		EEDR,rmp		; output data to EEPROM
0016b3 94f8                      	cli						; Disable global interrupts	
0016b4 9afa                      	sbi 	EECR,EEMPE		; set master write enable	
0016b5 9af9                      	sbi		EECR,EEPE		; set EEPROM Write strobe
                                 							; This instruction takes 4 clock cycles since
                                 							; it halts the CPU for two clock cycles
0016b6 9478                      	sei						; Enable global interrupts
0016b7 9508                      	ret
                                 
                                 ;***************************************************************************
                                 ;* 
                                 ;* EERead		(OK)
                                 ;*
                                 ;* Wait until the EEPROM is ready to be programmed, then
                                 ;* read the register variable "rmp" from address "YH:YL"
                                 ;*
                                 ;*
                                 ;***************************************************************************
                                 ;
                                 ;	Entry:
                                 ;	YL			; EEPROM address low to read from
                                 ;	YH			; EEPROM address high to read from
                                 ;
                                 ;	Exit:
                                 ;	rmp			; result data byte
                                 ;
                                 EERead:
0016b8 99f9                      	sbic	EECR,EEPE		; If EEPE not clear
0016b9 cffe                      	rjmp	EERead			;	wait more
                                 
0016ba bdd2                      	out 	EEARH,YH		; output EEPROM address high byte
0016bb bdc1                      	out		EEARL,YL		; output EEPROM address low byte
                                 
                                 
0016bc 9af8                      	sbi		EECR,EERE		; set EEPROM Read strobe
                                 							; This instruction takes 4 clock cycles since
                                 							; it halts the CPU for two clock cycles
0016bd b500                      	in		rmp,EEDR		; get EEPROM data
0016be 9508                      	ret
                                 
                                 		
                                 ;***************************************************************************
                                 ;* 
                                 ;* EEWrSeq		(OK)
                                 ;*
                                 ;* Increment the address stored in EEAR and write the register variable
                                 ;*  "rmp" data into the EEPROM.
                                 ;*
                                 ;*
                                 ;***************************************************************************
                                 ;
                                 ;	YL			; Temporary storage of address low byte
                                 ;	YH			; Temporary storage of address high byte
                                 ;
                                 ;	Entry:
                                 ;	rmp			; Data to write to EEPROM 
                                 ;
                                 
                                 EEWrSeq:
0016bf 99f9                      	sbic	EECR,EEPE		; If EEPE not clear
0016c0 cffe                      	rjmp	EEWrSeq			;	wait more
                                 ;
0016c1 b5c1                      	in		YL,EEARL		; Get address low byte from EEPROM address register
0016c2 b5d2                      	in		YH,EEARH		; Get address high byte from EEPROM address register
0016c3 9621                       	adiw	Y,1				; Increment address
0016c4 bdc1                      	out		EEARL,YL		; Output address low byte
0016c5 bdd2                      	out		EEARH,YH		; Output address high byte
                                 ;	
0016c6 bd00                      	out		EEDR,rmp		; Write data to EEPROM
0016c7 94f8                      	cli						; Disable global interrupts
0016c8 9afa                      	sbi 	EECR,EEMPE		; Set master write enable
0016c9 9af9                      	sbi		EECR,EEPE		; Set EEPROM Write strobe
                                 							; This instruction takes 4 clock cycles since
                                 							; It halts the CPU for two clock cycles
0016ca 9478                      	sei						; Enable global interrupts
0016cb 9508                      	ret
                                 ;
                                 ;***************************************************************************
                                 ;* 
                                 ;* EERdSeq		(OK)
                                 ;*
                                 ;* Increment the address stored in EEAR and read the EEPROM data into the
                                 ;* register variable "rmp"
                                 ;* 
                                 ;*
                                 ;***************************************************************************
                                 ;
                                 ;	YL			; Temporary storage of address low byte
                                 ;	YH			; Temporary storage of address high byte
                                 ;
                                 ;	Exit:
                                 ;	rmp			; EEPROM data read
                                 ;
                                 
                                 EERdSeq:
0016cc 99f9                      	sbic		EECR,EEPE	; If EEPE not clear
0016cd cffe                      	rjmp		EERdSeq		;	wait more
                                 
                                 ; Read sequence
0016ce b5c1                      	in		YL,EEARL		; Get address low byte from EEPROM address register
0016cf b5d2                      	in		YH,EEARH		; Get address high byte from EEPROM address register
0016d0 9621                      	adiw	Y,1				; Increment address
0016d1 bdc1                      	out		EEARL,YL		; Output address low byte
0016d2 bdd2                      	out		EEARH,YH		; Output address high byte
                                 
0016d3 9af8                      	sbi		EECR,EERE		; Set EEPROM Read strobe
                                 							; This instruction takes 4 clock cycles since
                                 							; It halts the CPU for two clock cycles
0016d4 b500                      	in		rmp,EEDR		; Get data
0016d5 9508                      	ret
                                 ;
                                 ;
                                 ; End of source code
                                 ;
                                 ;####################################################################################
                                 ;
                                 ;
                                 ;###########################################################################
                                 ;
                                 ; --- Screen displays ---
                                 ;
                                 scrnm:
0016d6 2020
0016d7 2020
0016d8 2020
0016d9 2020
0016da 2020
0016db 2020
0016dc 2020
0016dd 2020
0016de 2020
0016df 3c20
0016e0 3c3c
0016e1 203c
0016e2 4e20
0016e3 6e61
0016e4 206f
0016e5 202d
0016e6 2075
0016e7 2054
0016e8 2049
0016e9 204c
0016ea 2045
0016eb 2d20
0016ec 2020
0016ed 5441
0016ee 656d
0016ef 6167
0016f0 3233
0016f1 2038
0016f2 3e20
0016f3 3e3e
0016f4 0d3e
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4431): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
0016f5 000a                      	.db	"                   <<<<  Nano - u T I L E  -  ATmega328  >>>>",cr,lf
0016f6 2d2d
0016f7 2d2d
0016f8 2d2d
0016f9 2d2d
0016fa 2d2d
0016fb 2d2d
0016fc 2d2d
0016fd 2d2d
0016fe 2d2d
0016ff 2d2d
001700 2d2d
001701 2d2d
001702 2d2d
001703 2d2d
001704 2d2d
001705 2d2d
001706 2d2d
001707 2d2d
001708 2d2d
001709 2d2d
00170a 2d2d
00170b 2d2d
00170c 2d2d
00170d 2d2d
00170e 2d2d
00170f 2d2d
001710 2d2d
001711 2d2d
001712 2d2d
001713 2d2d
001714 2d2d
001715 2d2d
001716 2d2d
001717 2d2d
001718 2d2d
001719 2d2d
00171a 2d2d
00171b 2d2d
00171c 2d2d
00171d 2d2d
00171e 0a0d                      	.db	"--------------------------------------------------------------------------------",cr,lf
00171f 2020
001720 2020
001721 2020
001722 2020
001723 2020
001724 4220
001725 7469
001726 5320
001727 6174
001728 6b63
001729 2020
00172a 2020
00172b 2020
00172c 2020
00172d 2020
00172e 2020
00172f 2020
001730 2020
001731 2020
001732 2020
001733 2020
001734 2020
001735 2020
001736 2020
001737 2020
001738 2020
001739 2020
00173a 2020
00173b 2020
00173c 2020
00173d 6f50
00173e 7472
00173f 4220
001740 7479
001741 0d65
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4433): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
001742 000a                      	.db	"           Bit Stack                                        Port Byte",cr,lf
001743 2020
001744 2020
001745 2020
001746 2020
001747 2037
001748 2036
001749 2035
00174a 2034
00174b 2033
00174c 2032
00174d 2031
00174e 2030
00174f 2020
001750 2020
001751 2020
001752 2020
001753 2020
001754 2020
001755 2020
001756 6144
001757 6174
001758 2020
001759 2020
00175a 2020
00175b 2020
00175c 2020
00175d 2020
00175e 2020
00175f 3720
001760 3620
001761 3520
001762 3420
001763 3320
001764 3220
001765 3120
001766 3020
001767 0a0d                      	.db	"        7 6 5 4 3 2 1 0               Data               7 6 5 4 3 2 1 0",cr,lf
001768 2020
001769 2020
00176a 2020
00176b 2020
00176c 3d3d
00176d 3d3d
00176e 3d3d
00176f 3d3d
001770 3d3d
001771 3d3d
001772 3d3d
001773 203d
001774 2020
001775 2020
001776 2020
001777 2020
001778 2020
001779 2020
00177a 2020
00177b 3d3d
00177c 3d3d
00177d 203d
00177e 2020
00177f 2020
001780 2020
001781 2020
001782 2020
001783 2020
001784 3d20
001785 3d3d
001786 3d3d
001787 3d3d
001788 3d3d
001789 3d3d
00178a 3d3d
00178b 3d3d
00178c 0a0d
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4435): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
00178d 000a                      	.db	"        ===============               =====              ===============",cr,lf,lf
                                 statm:
00178e 2d2d
00178f 2d2d
001790 2d2d
001791 2d2d
001792 2d2d
001793 2d2d
001794 2d2d
001795 2d2d
001796 2d2d
001797 2d2d
001798 2d2d
001799 2d2d
00179a 2d2d
00179b 2d2d
00179c 2d2d
00179d 2d2d
00179e 2d2d
00179f 2d2d
0017a0 2d2d
0017a1 2d2d
0017a2 2d2d
0017a3 2d2d
0017a4 2d2d
0017a5 2d2d
0017a6 2d2d
0017a7 2d2d
0017a8 2d2d
0017a9 2d2d
0017aa 2d2d
0017ab 2d2d
0017ac 2d2d
0017ad 2d2d
0017ae 2d2d
0017af 2d2d
0017b0 2d2d
0017b1 2d2d
0017b2 2d2d
0017b3 2d2d
0017b4 2d2d
0017b5 2d2d
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4437): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
0017b6 001a                      	.db	"--------------------------------------------------------------------------------",ctlZ
                                 hlpm:
0017b7 2020
0017b8 6f4c
0017b9 6967
0017ba 2063
0017bb 2020
0017bc 6942
0017bd 2074
0017be 7453
0017bf 6361
0017c0 206b
0017c1 2020
0017c2 2020
0017c3 2020
0017c4 2020
0017c5 2020
0017c6 2f49
0017c7 204f
0017c8 202d
0017c9 6f43
0017ca 6d6d
0017cb 6e61
0017cc 7364
0017cd 2020
0017ce 2020
0017cf 2020
0017d0 2020
0017d1 2020
0017d2 2020
0017d3 4920
0017d4 746e
0017d5 7265
0017d6 7270
0017d7 7465
0017d8 7265
0017d9 2020
0017da 2020
0017db 2020
0017dc 6954
0017dd 656d
0017de 7372
0017df 0a0d                      	.db	"  Logic   Bit Stack           I/O - Commands             Interpreter      Timers",cr,lf
0017e0 2020
0017e1 2d2d
0017e2 2d2d
0017e3 202d
0017e4 2020
0017e5 2d2d
0017e6 2d2d
0017e7 2d2d
0017e8 2d2d
0017e9 202d
0017ea 2020
0017eb 2d20
0017ec 2d2d
0017ed 2d2d
0017ee 2d2d
0017ef 2d2d
0017f0 2d2d
0017f1 2d2d
0017f2 2d2d
0017f3 2d2d
0017f4 2d2d
0017f5 2d2d
0017f6 2d2d
0017f7 2d2d
0017f8 202d
0017f9 2020
0017fa 2d20
0017fb 2d2d
0017fc 2d2d
0017fd 2d2d
0017fe 2d2d
0017ff 2d2d
001800 2d2d
001801 2d2d
001802 2d2d
001803 202d
001804 2020
001805 2d2d
001806 2d2d
001807 2d2d
001808 0a0d                      	.db	"  -----   ---------    --------------------------    ------------------   ------",cr,lf
001809 2020
00180a 6120
00180b 646e
00180c 2020
00180d 2020
00180e 2020
00180f 7320
001810 7465
001811 2020
001812 2020
001813 2020
001814 2020
001815 4920
001816 3a6e
001817 2020
001818 6941
001819 202e
00181a 4c41
00181b 2e69
00181c 4120
00181d 6954
00181e 202e
00181f 4441
001820 2e69
001821 2020
001822 2020
001823 2020
001824 6620
001825 6c69
001826 206c
001827 6520
001828 3078
001829 2020
00182a 7220
00182b 6e75
00182c 2020
00182d 2020
00182e 5420
00182f 6d51
001830 0d2e
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4441): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
001831 000a                      	.db	"   and       set         In:  Ai. ALi. ATi. ADi.       fill  ex0   run     TQm.",cr,lf
001832 2020
001833 6f20
001834 2072
001835 2020
001836 2020
001837 2020
001838 6320
001839 726c
00183a 2020
00183b 2020
00183c 2020
00183d 2020
00183e 754f
00183f 3a74
001840 2e20
001841 6e59
001842 2020
001843 2020
001844 2020
001845 2020
001846 2020
001847 2020
001848 2020
001849 2020
00184a 2020
00184b 2020
00184c 2020
00184d 6920
00184e 736e
00184f 2020
001850 6b20
001851 7965
001852 2020
001853 6520
001854 646e
001855 2020
001856 2020
001857 542e
001858 6d6b
001859 0a0d                      	.db	"   or        clr        Out: .Yn                       ins   key   end    .Tkm",cr,lf
00185a 2020
00185b 7820
00185c 726f
00185d 2020
00185e 2020
00185f 2020
001860 6420
001861 7075
001862 2020
001863 2020
001864 2020
001865 5620
001866 7269
001867 3a74
001868 2020
001869 6e55
00186a 2c2e
00186b 2e20
00186c 6e55
00186d 202c
00186e 6e56
00186f 2c2e
001870 2e20
001871 6e56
001872 2020
001873 2020
001874 2020
001875 6420
001876 6c65
001877 2020
001878 2020
001879 202f
00187a 2020
00187b 7620
00187c 7265
00187d 2020
00187e 2020
00187f 542e
001880 6d52
001881 0a0d                      	.db	"   xor       dup       Virt:  Un., .Un, Vn., .Vn       del    /    ver    .TRm",cr,lf
001882 2020
001883 2020
001884 2021
001885 2020
001886 2020
001887 2020
001888 6420
001889 6f72
00188a 2070
00188b 2020
00188c 2820
00188d 2069
00188e 203d
00188f 2e30
001890 352e
001891 202c
001892 206e
001893 203d
001894 2e30
001895 372e
001896 202c
001897 206d
001898 203d
001899 2e30
00189a 662e
00189b 2029
00189c 2020
00189d 2020
00189e 203f
00189f 2020
0018a0 6f6c
0018a1 6461
0018a2 2020
0018a3 7473
0018a4 726f
0018a5 2065
0018a6 2020
0018a7 6c20
0018a8 7464
0018a9 0a0d                      	.db	"    !        drop    (i = 0..5, n = 0..7, m = 0..f)     ?   load  store    ldt",cr,lf
0018aa 2020
0018ab 6e20
0018ac 706f
0018ad 2020
0018ae 2020
0018af 2e66
0018b0 202c
0018b1 2e7a
0018b2 202c
0018b3 2121
0018b4 2020
0018b5 2020
0018b6 2020
0018b7 2020
0018b8 2020
0018b9 2020
0018ba 2020
0018bb 2020
0018bc 2020
0018bd 2020
0018be 2020
0018bf 2020
0018c0 2020
0018c1 2020
0018c2 2020
0018c3 2020
0018c4 2020
0018c5 2020
0018c6 2020
0018c7 2020
0018c8 6572
0018c9 6461
0018ca 2020
0018cb 7277
0018cc 7469
0018cd 0d65
0018ce 0a0a                      	.db	"   nop    f., z., !!                                        read  write",cr,lf,lf
0018cf 2020
0018d0 2d2d
0018d1 2d2d
0018d2 2d2d
0018d3 202d
0018d4 7942
0018d5 6574
0018d6 4320
0018d7 6d6f
0018d8 616d
0018d9 646e
0018da 2073
0018db 2d2d
0018dc 2d2d
0018dd 2d2d
0018de 202d
0018df 2020
0018e0 2020
0018e1 2d20
0018e2 4620
0018e3 696c
0018e4 2f70
0018e5 6c46
0018e6 706f
0018e7 2d20
0018e8 2020
0018e9 2020
0018ea 2d20
0018eb 2d2d
0018ec 4320
0018ed 6f6c
0018ee 6b63
0018ef 5020
0018f0 6c75
0018f1 6573
0018f2 2073
0018f3 2d2d
0018f4 0d2d
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4446): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
0018f5 000a                      	.db	"  ------- Byte Commands -------      - Flip/Flop -     --- Clock Pulses ---",cr,lf
0018f6 2020
0018f7 5020
0018f8 2e41
0018f9 2020
0018fa 502e
0018fb 2059
0018fc 2020
0018fd 5550
0018fe 202e
0018ff 2e20
001900 5550
001901 2020
001902 5650
001903 202e
001904 502e
001905 2056
001906 2020
001907 2020
001908 532e
001909 206d
00190a 2e20
00190b 6d52
00190c 2020
00190d 5120
00190e 2e6d
00190f 2020
001910 2020
001911 6320
001912 6b6c
001913 2e61
001914 2020
001915 6320
001916 6b6c
001917 2e62
001918 2020
001919 6c63
00191a 636b
00191b 0d2e
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4447): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
00191c 000a                      	.db	"   PA.  .PY   PU.  .PU  PV. .PV     .Sm  .Rm   Qm.     clka.   clkb.  clkc.",cr,lf
00191d 2020
00191e 5020
00191f 4150
001920 2020
001921 4250
001922 2053
001923 2020
001924 5050
001925 2055
001926 5020
001927 5650
001928 2020
001929 5050
00192a 2059
00192b 2020
00192c 2020
00192d 2020
00192e 2020
00192f 2020
001930 2020
001931 2020
001932 2020
001933 2020
001934 2020
001935 2020
001936 2020
001937 2020
001938 3220
001939 3030
00193a 6d20
00193b 2073
00193c 3620
00193d 3030
00193e 6d20
00193f 2073
001940 2e31
001941 2038
001942 0d73
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4448): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
001943 000a                       	.db	"   PPA  PBS   PPU  PPV  PPY                            200 ms  600 ms 1.8 s",cr,lf
001944 2020
001945 7247
001946 756f
001947 646e
001948 4420
001949 2038
00194a 6f74
00194b 6520
00194c 616e
00194d 6c62
00194e 2065
00194f 7541
001950 6f74
001951 7473
001952 7261
001953 2074
001954 2020
001955 2020
001956 2020
001957 2020
001958 2020
001959 2020
00195a 2020
00195b 2020
00195c 2020
00195d 6954
00195e 656d
00195f 7372
001960 203a
001961 3054
001962 2e2e
001963 3354
001964 2820
001965 3031
001966 2030
001967 736d
001968 6365
001969 0d29
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4449): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
00196a 000a                      	.db	"  Ground D8 to enable Autostart                   Timers: T0..T3 (100 msec)",cr,lf
00196b 2020
00196c 7247
00196d 756f
00196e 646e
00196f 4420
001970 2039
001971 6f74
001972 6920
001973 766e
001974 7265
001975 2074
001976 756f
001977 7074
001978 7475
001979 2073
00197a 2020
00197b 2020
00197c 2020
00197d 2020
00197e 2020
00197f 2020
001980 2020
001981 2020
001982 2020
001983 2020
001984 2020
001985 2020
001986 2020
001987 2020
001988 3454
001989 2e2e
00198a 6254
00198b 2820
00198c 6573
00198d 2963
00198e 0a0d                      	.db "  Ground D9 to invert outputs                             T4..Tb (sec)",cr,lf
00198f 2020
001990 6144
001991 6574
001992 203a
001993 3032
001994 3931
001995 312f
001996 2f32
001997 3930
001998 2020
001999 2020
00199a 2020
00199b 2020
00199c 2020
00199d 2020
00199e 2020
00199f 2020
0019a0 2020
0019a1 2020
0019a2 2020
0019a3 2020
0019a4 2020
0019a5 6354
0019a6 2e2e
0019a7 6554
0019a8 2820
0019a9 696d
0019aa 296e
0019ab 202c
0019ac 6654
0019ad 2820
0019ae 2e36
0019af 3636
0019b0 6d20
0019b1 6e69
0019b2 0d29
0019b3 1a0a                      	.db "  Date: 2019/12/09                          Tc..Te (min), Tf (6.66 min)",cr,lf,ctlZ
                                 ;
0019b4 2020
0019b5 3f20
0019b6 1a00                      inerr:	.db	"   ?",0,ctlZ
0019b7 2a2a
0019b8 202a
0019b9 7552
0019ba 6e6e
0019bb 6e69
0019bc 2067
0019bd 7355
0019be 7265
0019bf 4620
0019c0 6c69
0019c1 2065
0019c2 7250
0019c3 676f
0019c4 6172
0019c5 206d
0019c6 2a2a
0019c7 1a2a                      runm:	.db	"*** Running User File Program ***",ctlZ
0019c8 2020
0019c9 7453
0019ca 6972
0019cb 656b
0019cc 6120
0019cd 796e
0019ce 6b20
0019cf 7965
0019d0 2d20
0019d1 3e2d
0019d2 1a20                      sakm:	.db	"  Strike any key --> ",ctlZ
0019d3 2a2a
0019d4 202a
0019d5 7355
0019d6 7265
0019d7 4620
0019d8 6c69
0019d9 2065
0019da 2030
0019db 2a2a
0019dc 002a
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4456): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
0019dd 001a                      uf0m:	.db	"*** User File 0 ***",0,ctlZ
0019de 2020
0019df 2020
0019e0 0820
0019e1 0808
0019e2 0808
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4457): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
0019e3 001a                      spbs:	.db	"     ",BS,BS,BS,BS,BS,ctlZ
0019e4 2020
0019e5 2a2a
0019e6 202a
0019e7 6e55
0019e8 6572
0019e9 6f63
0019ea 6e67
0019eb 7a69
0019ec 6465
0019ed 4920
0019ee 706e
0019ef 7475
0019f0 2021
0019f1 2a2a
0019f2 1a2a                      err1:	.db	"  *** Unrecognized Input! ***",ctlZ
0019f3 6e45
0019f4 6574
0019f5 3a72
0019f6 1a20                      entm:	.db	"Enter: ",ctlZ
0019f7 2e2e
0019f8 2e2e
0019f9 1a2e                      dots:	.db	".....",ctlZ
0019fa 2020
0019fb 5320
0019fc 6f74
0019fd 6972
0019fe 676e
0019ff 5520
001a00 3046
001a01 202c
001a02 6c70
001a03 6165
001a04 6573
001a05 7720
001a06 6961
001a07 2074
001a08 2e2e
001a09 202e
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4461): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
001a0a 001a                      storem:	.db "   Storing UF0, please wait ... ",ctlZ
001a0b 2a2a
001a0c 202a
001a0d 6f4c
001a0e 6461
001a0f 7420
001a10 6d69
001a11 7265
001a12 2c73
001a13 5a20
001a14 6320
001a15 656c
001a16 7261
001a17 6120
001a18 6c6c
001a19 202c
001a1a 433c
001a1b 3e52
001a1c 6520
001a1d 6978
001a1e 2074
001a1f 2a2a
001a20 1a2a                      ldtmm:	.db	"*** Load timers, Z clear all, <CR> exit ***",ctlZ
001a21 3054
001a22 2020
001a23 2020
001a24 5420
001a25 2031
001a26 2020
001a27 2020
001a28 3254
001a29 2020
001a2a 2020
001a2b 5420
001a2c 2033
001a2d 2020
001a2e 2020
001a2f 3454
001a30 2020
001a31 2020
001a32 5420
001a33 2035
001a34 2020
001a35 2020
001a36 3654
001a37 2020
001a38 2020
001a39 5420
001a3a 1a37                      thdr1:  .db     "T0     T1     T2     T3     T4     T5     T6     T7",ctlZ
001a3b 3854
001a3c 2020
001a3d 2020
001a3e 5420
001a3f 2039
001a40 2020
001a41 2020
001a42 4154
001a43 2020
001a44 2020
001a45 5420
001a46 2042
001a47 2020
001a48 2020
001a49 4354
001a4a 2020
001a4b 2020
001a4c 5420
001a4d 2044
001a4e 2020
001a4f 2020
001a50 4554
001a51 2020
001a52 2020
001a53 5420
001a54 1a46                      thdr2:  .db     "T8     T9     TA     TB     TC     TD     TE     TF",ctlZ
001a55 3d3d
001a56 3d3d
001a57 3d3d
001a58 3d3d
001a59 3d3d
001a5a 3d3d
001a5b 3d3d
001a5c 3d3d
001a5d 3d3d
001a5e 3d3d
001a5f 3d3d
001a60 3d3d
001a61 3d3d
001a62 3d3d
001a63 3d3d
001a64 3d3d
001a65 3d3d
001a66 3d3d
001a67 3d3d
001a68 3d3d
001a69 3d3d
001a6a 3d3d
001a6b 3d3d
001a6c 3d3d
001a6d 3d3d
001a6e 3d3d
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm(4465): warning: .cseg .db misalignment - padding zero byte
E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\main.asm(7): 'E:\Users\lynf\My Documents\Atmel Studio\7.0\m328-utile\m328-utile\m328-nano-utile.asm' included form here
001a6f 001a                      thdr3:  .db     "====================================================",ctlZ
                                 ;
                                 ;
                                 ; --- End of source code ---
                                 ;
                                 ;=====
                                 ;
                                 ;


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :  35 y  :  11 z  :  20 r0 :   0 r1 :   0 r2 :  16 r3 :  10 r4 :   5 
r5 :   5 r6 : 212 r7 :   4 r8 :   3 r9 :   3 r10:   3 r11:   0 r12:   0 
r13:   4 r14:   6 r15:   4 r16:1103 r17: 325 r18:  66 r19:  31 r20:  15 
r21:   0 r22:   0 r23:  22 r24:  31 r25:  21 r26:  33 r27:  33 r28:  77 
r29:  58 r30:  95 r31:  93 
Registers used: 29 out of 35 (82.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   6 add   :  24 adiw  :   9 and   :   7 
andi  :  10 asr   :   0 bclr  :  56 bld   : 172 brbc  :   0 brbs  :   0 
brcc  :  95 brcs  :  30 break :   0 breq  :  44 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  : 110 brpl  :   0 brsh  :   0 brtc  :   0 brts  :  83 brvc  :   0 
brvs  :   0 bset  :  56 bst   :  83 call  : 180 cbi   :   4 cbr   :  32 
clc   :  99 clh   :   0 cli   :   7 cln   :   0 clr   :  35 cls   :   0 
clt   :  50 clv   :   0 clz   :   0 com   :   6 cp    :   0 cpc   :   0 
cpi   :  58 cpse  :   0 dec   :  67 eor   :  10 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   2 ijmp  :   0 in    :  11 inc   :   8 jmp   :   5 
ld    :  21 ldd   :   0 ldi   : 271 lds   : 355 lpm   :  19 lsl   :  10 
lsr   : 114 mov   :  72 movw  :   1 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :  10 ori   :   3 out   :  33 pop   :  36 
push  :  62 rcall : 136 ret   : 334 reti  :   2 rjmp  :  95 rol   : 108 
ror   :  11 sbc   :   6 sbci  :   6 sbi   :  14 sbic  :   5 sbis  :   2 
sbiw  :   1 sbr   :  31 sbrc  :   0 sbrs  :  41 sec   :  93 seh   :   0 
sei   :   7 sen   :   0 ser   :   1 ses   :   0 set   :  16 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  22 std   :   0 sts   : 305 
sub   :   8 subi  :  13 swap  :   3 tst   :  38 wdr   :   1 
Instructions used: 67 out of 113 (59.3%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0034e0   9014   4430  13444   32768  41.0%
[.dseg] 0x000100 0x000362      0    610    610    2048  29.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 23 warnings
